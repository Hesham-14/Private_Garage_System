
U11-Garage-System-ECU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003938  08003938  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003938  08003938  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000088  080039c8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  080039c8  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008354  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013b5  00000000  00000000  00028405  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001be4  00000000  00000000  000297ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000430  00000000  00000000  0002b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003b0  00000000  00000000  0002b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003be1  00000000  00000000  0002bb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004cf9  00000000  00000000  0002f761  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c91a  00000000  00000000  0003445a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00040d74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e88  00000000  00000000  00040df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	080031e0 	.word	0x080031e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	080031e0 	.word	0x080031e0

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <HAL_keypad_init>:
 * @brief 		-Initializes Keypad Pins
 * @param [in]	-none
 * @retval 		-none
 **************************************************************************/
void HAL_keypad_init(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
	uint32_t Pin_Counter;
	GPIO_PinConfig_t Keypad_Pin;

	/*Configure Rows as Input Pins*/
	Keypad_Pin.GPIO_Mode = GPIO_MODE_INPUT_PU;
 800018a:	2302      	movs	r3, #2
 800018c:	70bb      	strb	r3, [r7, #2]
	for(Pin_Counter=0;Pin_Counter<Keypad_ROWS_SIZE;Pin_Counter++)
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e00d      	b.n	80001b0 <HAL_keypad_init+0x2c>
	{
		Keypad_Pin.GPIO_PinNumber=Keypad_Rows[Pin_Counter];
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <HAL_keypad_init+0x7c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4413      	add	r3, r2
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	b29b      	uxth	r3, r3
 800019e:	803b      	strh	r3, [r7, #0]
		MCAL_GPIO_Init(Keypad_Port, &Keypad_Pin);
 80001a0:	463b      	mov	r3, r7
 80001a2:	4619      	mov	r1, r3
 80001a4:	4817      	ldr	r0, [pc, #92]	; (8000204 <HAL_keypad_init+0x80>)
 80001a6:	f000 fdde 	bl	8000d66 <MCAL_GPIO_Init>
	for(Pin_Counter=0;Pin_Counter<Keypad_ROWS_SIZE;Pin_Counter++)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3301      	adds	r3, #1
 80001ae:	607b      	str	r3, [r7, #4]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2b03      	cmp	r3, #3
 80001b4:	d9ee      	bls.n	8000194 <HAL_keypad_init+0x10>
	}

	/*Configure Columns as Output Pins*/
	Keypad_Pin.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001b6:	2304      	movs	r3, #4
 80001b8:	70bb      	strb	r3, [r7, #2]
	Keypad_Pin.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ba:	2301      	movs	r3, #1
 80001bc:	70fb      	strb	r3, [r7, #3]
	for(Pin_Counter=0;Pin_Counter<Keypad_COLUMNS_SIZE;Pin_Counter++)
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e016      	b.n	80001f2 <HAL_keypad_init+0x6e>
	{
		Keypad_Pin.GPIO_PinNumber=Keypad_Columns[Pin_Counter];
 80001c4:	4a10      	ldr	r2, [pc, #64]	; (8000208 <HAL_keypad_init+0x84>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	803b      	strh	r3, [r7, #0]
		MCAL_GPIO_Init(Keypad_Port, &Keypad_Pin);
 80001d0:	463b      	mov	r3, r7
 80001d2:	4619      	mov	r1, r3
 80001d4:	480b      	ldr	r0, [pc, #44]	; (8000204 <HAL_keypad_init+0x80>)
 80001d6:	f000 fdc6 	bl	8000d66 <MCAL_GPIO_Init>
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Columns[Pin_Counter], GPIO_PIN_SET);
 80001da:	4a0b      	ldr	r2, [pc, #44]	; (8000208 <HAL_keypad_init+0x84>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2201      	movs	r2, #1
 80001e4:	4619      	mov	r1, r3
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <HAL_keypad_init+0x80>)
 80001e8:	f000 fe25 	bl	8000e36 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<Keypad_COLUMNS_SIZE;Pin_Counter++)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3301      	adds	r3, #1
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d9e5      	bls.n	80001c4 <HAL_keypad_init+0x40>
	}
}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20000004 	.word	0x20000004
 8000204:	40010c00 	.word	0x40010c00
 8000208:	20000000 	.word	0x20000000

0800020c <LCD_itoa>:
/*
 * =========================================================================
 * 								Generic Functions
 * =========================================================================*/
void LCD_itoa(uint32_t Data,char String[])
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
	uint8_t Digit=0,Count;
 8000216:	2300      	movs	r3, #0
 8000218:	73fb      	strb	r3, [r7, #15]
	if(!Data)String[Digit++]='0';
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d122      	bne.n	8000266 <LCD_itoa+0x5a>
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	73fa      	strb	r2, [r7, #15]
 8000226:	461a      	mov	r2, r3
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	4413      	add	r3, r2
 800022c:	2230      	movs	r2, #48	; 0x30
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	e01c      	b.n	800026c <LCD_itoa+0x60>
	else for(;Data;Digit++,Data/=10)
		String[Digit]=(Data%10+'0');
 8000232:	6879      	ldr	r1, [r7, #4]
 8000234:	4b33      	ldr	r3, [pc, #204]	; (8000304 <LCD_itoa+0xf8>)
 8000236:	fba3 2301 	umull	r2, r3, r3, r1
 800023a:	08da      	lsrs	r2, r3, #3
 800023c:	4613      	mov	r3, r2
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	4413      	add	r3, r2
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	1aca      	subs	r2, r1, r3
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	6839      	ldr	r1, [r7, #0]
 800024c:	440b      	add	r3, r1
 800024e:	3230      	adds	r2, #48	; 0x30
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	701a      	strb	r2, [r3, #0]
	else for(;Data;Digit++,Data/=10)
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	3301      	adds	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a29      	ldr	r2, [pc, #164]	; (8000304 <LCD_itoa+0xf8>)
 800025e:	fba2 2303 	umull	r2, r3, r2, r3
 8000262:	08db      	lsrs	r3, r3, #3
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1e2      	bne.n	8000232 <LCD_itoa+0x26>
	String[Digit]=0;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	683a      	ldr	r2, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
	for(Count=0;Count<(Digit>>1);Count++)
 8000276:	2300      	movs	r3, #0
 8000278:	73bb      	strb	r3, [r7, #14]
 800027a:	e038      	b.n	80002ee <LCD_itoa+0xe2>
	{
		String[Count]^=String[Digit-Count-1];
 800027c:	7bbb      	ldrb	r3, [r7, #14]
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	4413      	add	r3, r2
 8000282:	7819      	ldrb	r1, [r3, #0]
 8000284:	7bfa      	ldrb	r2, [r7, #15]
 8000286:	7bbb      	ldrb	r3, [r7, #14]
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	3b01      	subs	r3, #1
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	4413      	add	r3, r2
 8000290:	781a      	ldrb	r2, [r3, #0]
 8000292:	7bbb      	ldrb	r3, [r7, #14]
 8000294:	6838      	ldr	r0, [r7, #0]
 8000296:	4403      	add	r3, r0
 8000298:	404a      	eors	r2, r1
 800029a:	b2d2      	uxtb	r2, r2
 800029c:	701a      	strb	r2, [r3, #0]
		String[Digit-Count-1]^=String[Count];
 800029e:	7bfa      	ldrb	r2, [r7, #15]
 80002a0:	7bbb      	ldrb	r3, [r7, #14]
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	3b01      	subs	r3, #1
 80002a6:	683a      	ldr	r2, [r7, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	7819      	ldrb	r1, [r3, #0]
 80002ac:	7bbb      	ldrb	r3, [r7, #14]
 80002ae:	683a      	ldr	r2, [r7, #0]
 80002b0:	4413      	add	r3, r2
 80002b2:	781a      	ldrb	r2, [r3, #0]
 80002b4:	7bf8      	ldrb	r0, [r7, #15]
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	1ac3      	subs	r3, r0, r3
 80002ba:	3b01      	subs	r3, #1
 80002bc:	6838      	ldr	r0, [r7, #0]
 80002be:	4403      	add	r3, r0
 80002c0:	404a      	eors	r2, r1
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	701a      	strb	r2, [r3, #0]
		String[Count]^=String[Digit-Count-1];
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	7819      	ldrb	r1, [r3, #0]
 80002ce:	7bfa      	ldrb	r2, [r7, #15]
 80002d0:	7bbb      	ldrb	r3, [r7, #14]
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	3b01      	subs	r3, #1
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	4413      	add	r3, r2
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	7bbb      	ldrb	r3, [r7, #14]
 80002de:	6838      	ldr	r0, [r7, #0]
 80002e0:	4403      	add	r3, r0
 80002e2:	404a      	eors	r2, r1
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	701a      	strb	r2, [r3, #0]
	for(Count=0;Count<(Digit>>1);Count++)
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	3301      	adds	r3, #1
 80002ec:	73bb      	strb	r3, [r7, #14]
 80002ee:	7bfb      	ldrb	r3, [r7, #15]
 80002f0:	085b      	lsrs	r3, r3, #1
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	7bba      	ldrb	r2, [r7, #14]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d3c0      	bcc.n	800027c <LCD_itoa+0x70>
	}
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	cccccccd 	.word	0xcccccccd

08000308 <HAL_LCD_Set_Courser>:
	}
}


void HAL_LCD_Set_Courser(uint8_t Y_Axis,uint8_t X_Axis)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	460a      	mov	r2, r1
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	4613      	mov	r3, r2
 8000316:	71bb      	strb	r3, [r7, #6]
	uint8_t Line_Select;
	switch (Y_Axis)
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	3b01      	subs	r3, #1
 800031c:	2b03      	cmp	r3, #3
 800031e:	d817      	bhi.n	8000350 <HAL_LCD_Set_Courser+0x48>
 8000320:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <HAL_LCD_Set_Courser+0x20>)
 8000322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000326:	bf00      	nop
 8000328:	08000339 	.word	0x08000339
 800032c:	0800033f 	.word	0x0800033f
 8000330:	08000345 	.word	0x08000345
 8000334:	0800034b 	.word	0x0800034b
	{
	case 1:
		Line_Select=LCD_BEGIN_AT_FIRST_ROW;break;
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	73fb      	strb	r3, [r7, #15]
 800033c:	e009      	b.n	8000352 <HAL_LCD_Set_Courser+0x4a>
	case 2:
		Line_Select=LCD_BEGIN_AT_SECOND_ROW;break;
 800033e:	23c0      	movs	r3, #192	; 0xc0
 8000340:	73fb      	strb	r3, [r7, #15]
 8000342:	e006      	b.n	8000352 <HAL_LCD_Set_Courser+0x4a>
	case 3:
		Line_Select=LCD_THIRD_LINE;break;
 8000344:	2390      	movs	r3, #144	; 0x90
 8000346:	73fb      	strb	r3, [r7, #15]
 8000348:	e003      	b.n	8000352 <HAL_LCD_Set_Courser+0x4a>
	case 4:
		Line_Select=LCD_FOURTH_LINE;break;
 800034a:	23d0      	movs	r3, #208	; 0xd0
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e000      	b.n	8000352 <HAL_LCD_Set_Courser+0x4a>
	default:break;
 8000350:	bf00      	nop
	}
	HAL_LCD_Send_Command(Line_Select+X_Axis);
 8000352:	7bfa      	ldrb	r2, [r7, #15]
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	4413      	add	r3, r2
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8d7 	bl	800050c <HAL_LCD_Send_Command>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop

08000368 <check_line>:

void check_line()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	if(count == 17)
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <check_line+0x58>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b11      	cmp	r3, #17
 8000372:	d104      	bne.n	800037e <check_line+0x16>
		HAL_LCD_Set_Courser(2,0);
 8000374:	2100      	movs	r1, #0
 8000376:	2002      	movs	r0, #2
 8000378:	f7ff ffc6 	bl	8000308 <HAL_LCD_Set_Courser>
	{
		LCD_clear_screen();
		HAL_LCD_Set_Courser(1,0);
		count = 0;
	}
}
 800037c:	e01e      	b.n	80003bc <check_line+0x54>
	else if(count == 33)
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <check_line+0x58>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b21      	cmp	r3, #33	; 0x21
 8000384:	d104      	bne.n	8000390 <check_line+0x28>
		HAL_LCD_Set_Courser(3,0);
 8000386:	2100      	movs	r1, #0
 8000388:	2003      	movs	r0, #3
 800038a:	f7ff ffbd 	bl	8000308 <HAL_LCD_Set_Courser>
}
 800038e:	e015      	b.n	80003bc <check_line+0x54>
	else if(count ==49)
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <check_line+0x58>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b31      	cmp	r3, #49	; 0x31
 8000396:	d104      	bne.n	80003a2 <check_line+0x3a>
		HAL_LCD_Set_Courser(4,0);
 8000398:	2100      	movs	r1, #0
 800039a:	2004      	movs	r0, #4
 800039c:	f7ff ffb4 	bl	8000308 <HAL_LCD_Set_Courser>
}
 80003a0:	e00c      	b.n	80003bc <check_line+0x54>
	else if(count == 65)
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <check_line+0x58>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b41      	cmp	r3, #65	; 0x41
 80003a8:	d108      	bne.n	80003bc <check_line+0x54>
		LCD_clear_screen();
 80003aa:	f000 f80b 	bl	80003c4 <LCD_clear_screen>
		HAL_LCD_Set_Courser(1,0);
 80003ae:	2100      	movs	r1, #0
 80003b0:	2001      	movs	r0, #1
 80003b2:	f7ff ffa9 	bl	8000308 <HAL_LCD_Set_Courser>
		count = 0;
 80003b6:	4b02      	ldr	r3, [pc, #8]	; (80003c0 <check_line+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000a4 	.word	0x200000a4

080003c4 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DISP_ON);
 80003c8:	200c      	movs	r0, #12
 80003ca:	f000 f89f 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_CLEAR_SCREEN);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 f89c 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_ENTRY_INC_);
 80003d4:	2006      	movs	r0, #6
 80003d6:	f000 f899 	bl	800050c <HAL_LCD_Send_Command>
	delay_ms(5);
 80003da:	2005      	movs	r0, #5
 80003dc:	f000 f820 	bl	8000420 <delay_ms>
	count = 0;
 80003e0:	4b02      	ldr	r3, [pc, #8]	; (80003ec <LCD_clear_screen+0x28>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200000a4 	.word	0x200000a4

080003f0 <ENABLE_cycle>:


void ENABLE_cycle()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_EN, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fa:	4808      	ldr	r0, [pc, #32]	; (800041c <ENABLE_cycle+0x2c>)
 80003fc:	f000 fd1b 	bl	8000e36 <MCAL_GPIO_WritePin>
	delay_ms(5);
 8000400:	2005      	movs	r0, #5
 8000402:	f000 f80d 	bl	8000420 <delay_ms>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_EN, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <ENABLE_cycle+0x2c>)
 800040e:	f000 fd12 	bl	8000e36 <MCAL_GPIO_WritePin>
	delay_ms(2);
 8000412:	2002      	movs	r0, #2
 8000414:	f000 f804 	bl	8000420 <delay_ms>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010c00 	.word	0x40010c00

08000420 <delay_ms>:

void delay_ms(uint32_t time){
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	e00b      	b.n	8000446 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800042e:	2300      	movs	r3, #0
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	e002      	b.n	800043a <delay_ms+0x1a>
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	3301      	adds	r3, #1
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	2bfe      	cmp	r3, #254	; 0xfe
 800043e:	d9f9      	bls.n	8000434 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3301      	adds	r3, #1
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3ef      	bcc.n	800042e <delay_ms+0xe>
			;
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <HAL_LCD_Init>:
 * @brief 		-Initializes LCD states in the ref
 * @param [in]	-n1
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Init(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b087      	sub	sp, #28
 800045c:	af00      	add	r7, sp, #0
#if LCD_MODE == Eight_Bit_Mode
	uint32_t Pin_Counter,Pins[8]=LCD_Data_Pins;
#elif LCD_MODE == Four_Bit_Mode
	uint32_t Pin_Counter,Pins[4]=LCD_Data_Pins;
 800045e:	4b28      	ldr	r3, [pc, #160]	; (8000500 <HAL_LCD_Init+0xa8>)
 8000460:	1d3c      	adds	r4, r7, #4
 8000462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif

	GPIO_PinConfig_t  LCD_Pin;
	/*Initialize Control Pins*/
	LCD_Pin.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2304      	movs	r3, #4
 800046a:	70bb      	strb	r3, [r7, #2]
	LCD_Pin.GPIO_Output_Speed = GPIO_SPEED_10M;
 800046c:	2301      	movs	r3, #1
 800046e:	70fb      	strb	r3, [r7, #3]
	LCD_Pin.GPIO_PinNumber = LCD_RS;
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(LCD_Control_Port, &LCD_Pin);
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	4822      	ldr	r0, [pc, #136]	; (8000504 <HAL_LCD_Init+0xac>)
 800047a:	f000 fc74 	bl	8000d66 <MCAL_GPIO_Init>
	LCD_Pin.GPIO_PinNumber = LCD_RW;
 800047e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000482:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(LCD_Control_Port, &LCD_Pin);
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	481e      	ldr	r0, [pc, #120]	; (8000504 <HAL_LCD_Init+0xac>)
 800048a:	f000 fc6c 	bl	8000d66 <MCAL_GPIO_Init>
	LCD_Pin.GPIO_PinNumber = LCD_EN;
 800048e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000492:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(LCD_Control_Port, &LCD_Pin);
 8000494:	463b      	mov	r3, r7
 8000496:	4619      	mov	r1, r3
 8000498:	481a      	ldr	r0, [pc, #104]	; (8000504 <HAL_LCD_Init+0xac>)
 800049a:	f000 fc64 	bl	8000d66 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_EN, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	4817      	ldr	r0, [pc, #92]	; (8000504 <HAL_LCD_Init+0xac>)
 80004a6:	f000 fcc6 	bl	8000e36 <MCAL_GPIO_WritePin>
	HAL_LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
	HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
	HAL_LCD_Send_Command(LCD_ENTRY_INC_);
#elif LCD_MODE == Four_Bit_Mode
	/*Initialize Data Pins*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	e010      	b.n	80004d2 <HAL_LCD_Init+0x7a>
	{
		LCD_Pin.GPIO_PinNumber=Pins[Pin_Counter];
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	f107 0218 	add.w	r2, r7, #24
 80004b8:	4413      	add	r3, r2
 80004ba:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80004be:	b29b      	uxth	r3, r3
 80004c0:	803b      	strh	r3, [r7, #0]
		MCAL_GPIO_Init(LCD_Data_Port, &LCD_Pin);
 80004c2:	463b      	mov	r3, r7
 80004c4:	4619      	mov	r1, r3
 80004c6:	4810      	ldr	r0, [pc, #64]	; (8000508 <HAL_LCD_Init+0xb0>)
 80004c8:	f000 fc4d 	bl	8000d66 <MCAL_GPIO_Init>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3301      	adds	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d9eb      	bls.n	80004b0 <HAL_LCD_Init+0x58>
	}
	delay_ms(40);
 80004d8:	2028      	movs	r0, #40	; 0x28
 80004da:	f7ff ffa1 	bl	8000420 <delay_ms>
	/* Configure LCD */
	HAL_LCD_Send_Command(LCD_RETURN_HOME);
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 f814 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
 80004e4:	2028      	movs	r0, #40	; 0x28
 80004e6:	f000 f811 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 80004ea:	200f      	movs	r0, #15
 80004ec:	f000 f80e 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_ENTRY_INC_);
 80004f0:	2006      	movs	r0, #6
 80004f2:	f000 f80b 	bl	800050c <HAL_LCD_Send_Command>
#else
#warning (" Wrong Configuration !!")
#endif
}
 80004f6:	bf00      	nop
 80004f8:	371c      	adds	r7, #28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	bf00      	nop
 8000500:	080031f8 	.word	0x080031f8
 8000504:	40010c00 	.word	0x40010c00
 8000508:	40010800 	.word	0x40010800

0800050c <HAL_LCD_Send_Command>:
 * @brief 		-Send Command to LCD
 * @param [in]	-command
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Send_Command(uint8_t Command)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b089      	sub	sp, #36	; 0x24
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
#if LCD_MODE == Eight_Bit_Mode
	uint32_t Pin_Counter,Pins[8]=LCD_Data_Pins;
#elif LCD_MODE == Four_Bit_Mode
	uint32_t Pin_Counter,Pins[4]=LCD_Data_Pins;
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <HAL_LCD_Send_Command+0xb4>)
 8000518:	f107 040c 	add.w	r4, r7, #12
 800051c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800051e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif
	// Turn off RS & RW
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RW, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000528:	4826      	ldr	r0, [pc, #152]	; (80005c4 <HAL_LCD_Send_Command+0xb8>)
 800052a:	f000 fc84 	bl	8000e36 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RS, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	4824      	ldr	r0, [pc, #144]	; (80005c4 <HAL_LCD_Send_Command+0xb8>)
 8000534:	f000 fc7f 	bl	8000e36 <MCAL_GPIO_WritePin>
	/*Write Command*/
	for(Pin_Counter=0;Pin_Counter<8;Pin_Counter++)
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Command>>Pin_Counter)&1));
#elif LCD_MODE == Four_Bit_Mode
	/*Send Hi Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	e017      	b.n	800056e <HAL_LCD_Send_Command+0x62>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Command>>Pin_Counter+4)&1));
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	f107 0220 	add.w	r2, r7, #32
 8000546:	4413      	add	r3, r2
 8000548:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800054c:	4619      	mov	r1, r3
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	3304      	adds	r3, #4
 8000554:	fa42 f303 	asr.w	r3, r2, r3
 8000558:	b2db      	uxtb	r3, r3
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	4819      	ldr	r0, [pc, #100]	; (80005c8 <HAL_LCD_Send_Command+0xbc>)
 8000564:	f000 fc67 	bl	8000e36 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	3301      	adds	r3, #1
 800056c:	61fb      	str	r3, [r7, #28]
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d9e4      	bls.n	800053e <HAL_LCD_Send_Command+0x32>
	/*Enable LCD*/
	ENABLE_cycle();
 8000574:	f7ff ff3c 	bl	80003f0 <ENABLE_cycle>
	/*Send Low Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
 800057c:	e016      	b.n	80005ac <HAL_LCD_Send_Command+0xa0>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Command>>Pin_Counter)&1));
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	f107 0220 	add.w	r2, r7, #32
 8000586:	4413      	add	r3, r2
 8000588:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800058c:	4619      	mov	r1, r3
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	fa42 f303 	asr.w	r3, r2, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <HAL_LCD_Send_Command+0xbc>)
 80005a2:	f000 fc48 	bl	8000e36 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3301      	adds	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d9e5      	bls.n	800057e <HAL_LCD_Send_Command+0x72>
#endif
	/*Enable LCD*/
	ENABLE_cycle();
 80005b2:	f7ff ff1d 	bl	80003f0 <ENABLE_cycle>
}
 80005b6:	bf00      	nop
 80005b8:	3724      	adds	r7, #36	; 0x24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	bf00      	nop
 80005c0:	080031f8 	.word	0x080031f8
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	40010800 	.word	0x40010800

080005cc <HAL_LCD_Send_Data>:
 * @brief 		-Send data to LCD
 * @param [in]	-data
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Send_Data(uint8_t Data)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
#if LCD_MODE == Eight_Bit_Mode
	uint32_t Pin_Counter,Pins[8]=LCD_Data_Pins;
#elif LCD_MODE == Four_Bit_Mode
	uint32_t Pin_Counter,Pins[4]=LCD_Data_Pins;
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <HAL_LCD_Send_Data+0xc8>)
 80005d8:	f107 040c 	add.w	r4, r7, #12
 80005dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif
	/*check line*/
	count++;
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <HAL_LCD_Send_Data+0xcc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <HAL_LCD_Send_Data+0xcc>)
 80005ea:	6013      	str	r3, [r2, #0]
	check_line();
 80005ec:	f7ff febc 	bl	8000368 <check_line>
	delay_ms(20);
 80005f0:	2014      	movs	r0, #20
 80005f2:	f7ff ff15 	bl	8000420 <delay_ms>
	// Turn on RS & off RW
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RW, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fc:	4827      	ldr	r0, [pc, #156]	; (800069c <HAL_LCD_Send_Data+0xd0>)
 80005fe:	f000 fc1a 	bl	8000e36 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RS, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	4825      	ldr	r0, [pc, #148]	; (800069c <HAL_LCD_Send_Data+0xd0>)
 8000608:	f000 fc15 	bl	8000e36 <MCAL_GPIO_WritePin>
	/*Write Data*/
	for(Pin_Counter=0;Pin_Counter<8;Pin_Counter++)
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Data>>Pin_Counter)&1));
#elif LCD_MODE == Four_Bit_Mode
	/*Send Hi Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	e017      	b.n	8000642 <HAL_LCD_Send_Data+0x76>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Data>>Pin_Counter+4)&1));
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	f107 0220 	add.w	r2, r7, #32
 800061a:	4413      	add	r3, r2
 800061c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000620:	4619      	mov	r1, r3
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	3304      	adds	r3, #4
 8000628:	fa42 f303 	asr.w	r3, r2, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	481a      	ldr	r0, [pc, #104]	; (80006a0 <HAL_LCD_Send_Data+0xd4>)
 8000638:	f000 fbfd 	bl	8000e36 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	3301      	adds	r3, #1
 8000640:	61fb      	str	r3, [r7, #28]
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	2b03      	cmp	r3, #3
 8000646:	d9e4      	bls.n	8000612 <HAL_LCD_Send_Data+0x46>
	/*Enable LCD*/
	ENABLE_cycle();
 8000648:	f7ff fed2 	bl	80003f0 <ENABLE_cycle>
	/*Send Low Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	e016      	b.n	8000680 <HAL_LCD_Send_Data+0xb4>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Data>>Pin_Counter)&1));
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	f107 0220 	add.w	r2, r7, #32
 800065a:	4413      	add	r3, r2
 800065c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000660:	4619      	mov	r1, r3
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	fa42 f303 	asr.w	r3, r2, r3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <HAL_LCD_Send_Data+0xd4>)
 8000676:	f000 fbde 	bl	8000e36 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3301      	adds	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d9e5      	bls.n	8000652 <HAL_LCD_Send_Data+0x86>
#endif
	/*Enable LCD*/
	ENABLE_cycle();
 8000686:	f7ff feb3 	bl	80003f0 <ENABLE_cycle>
}
 800068a:	bf00      	nop
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	bf00      	nop
 8000694:	080031f8 	.word	0x080031f8
 8000698:	200000a4 	.word	0x200000a4
 800069c:	40010c00 	.word	0x40010c00
 80006a0:	40010800 	.word	0x40010800

080006a4 <HAL_LCD_Send_Number>:
 * @brief 		-send Integer number to LCD
 * @param [in]	-data
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Send_Number(uint32_t Data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	char String[8];
	LCD_itoa(Data,String);
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fdaa 	bl	800020c <LCD_itoa>
	HAL_LCD_Send_String(String);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f804 	bl	80006ca <HAL_LCD_Send_String>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_LCD_Send_String>:
 * @brief 		-send string number to LCD
 * @param [in]	-data
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Send_String(char String[])
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]

	while(*String != '\0')
 80006d2:	e007      	b.n	80006e4 <HAL_LCD_Send_String+0x1a>
	{
		HAL_LCD_Send_Data(*String);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff77 	bl	80005cc <HAL_LCD_Send_Data>
		String++;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
	while(*String != '\0')
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f3      	bne.n	80006d4 <HAL_LCD_Send_String+0xa>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Enable_NVIC>:
 * 								Generic Functions
 * =========================================================================
 */

void Enable_NVIC (uint16_t IRQ)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d854      	bhi.n	80007ae <Enable_NVIC+0xba>
 8000704:	a201      	add	r2, pc, #4	; (adr r2, 800070c <Enable_NVIC+0x18>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	0800074d 	.word	0x0800074d
 8000710:	0800075b 	.word	0x0800075b
 8000714:	08000769 	.word	0x08000769
 8000718:	08000777 	.word	0x08000777
 800071c:	08000785 	.word	0x08000785
 8000720:	08000793 	.word	0x08000793
 8000724:	08000793 	.word	0x08000793
 8000728:	08000793 	.word	0x08000793
 800072c:	08000793 	.word	0x08000793
 8000730:	08000793 	.word	0x08000793
 8000734:	080007a1 	.word	0x080007a1
 8000738:	080007a1 	.word	0x080007a1
 800073c:	080007a1 	.word	0x080007a1
 8000740:	080007a1 	.word	0x080007a1
 8000744:	080007a1 	.word	0x080007a1
 8000748:	080007a1 	.word	0x080007a1
	{
	case 0:
		NVIC_EXT0_IRQ6_Enable();
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <Enable_NVIC+0xc4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <Enable_NVIC+0xc4>)
 8000752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000756:	6013      	str	r3, [r2, #0]
		break;
 8000758:	e029      	b.n	80007ae <Enable_NVIC+0xba>
	case 1:
		NVIC_EXT1_IRQ7_Enable();
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <Enable_NVIC+0xc4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <Enable_NVIC+0xc4>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6013      	str	r3, [r2, #0]
		break ;
 8000766:	e022      	b.n	80007ae <Enable_NVIC+0xba>
	case 2:
		NVIC_EXT2_IRQ8_Enable();
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <Enable_NVIC+0xc4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <Enable_NVIC+0xc4>)
 800076e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000772:	6013      	str	r3, [r2, #0]
		break ;
 8000774:	e01b      	b.n	80007ae <Enable_NVIC+0xba>
	case 3:
		NVIC_EXT3_IRQ9_Enable();
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <Enable_NVIC+0xc4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <Enable_NVIC+0xc4>)
 800077c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000780:	6013      	str	r3, [r2, #0]
		break ;
 8000782:	e014      	b.n	80007ae <Enable_NVIC+0xba>
	case 4:
		NVIC_EXT4_IRQ10_Enable();
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <Enable_NVIC+0xc4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <Enable_NVIC+0xc4>)
 800078a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800078e:	6013      	str	r3, [r2, #0]
		break ;
 8000790:	e00d      	b.n	80007ae <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXT9_5_IRQ23_Enable();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <Enable_NVIC+0xc4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <Enable_NVIC+0xc4>)
 8000798:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800079c:	6013      	str	r3, [r2, #0]
		break ;
 800079e:	e006      	b.n	80007ae <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXT15_10_IRQ40_Enable();
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <Enable_NVIC+0xc8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a05      	ldr	r2, [pc, #20]	; (80007bc <Enable_NVIC+0xc8>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007aa:	6013      	str	r3, [r2, #0]
		break ;
 80007ac:	bf00      	nop

	}
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000e104 	.word	0xe000e104

080007c0 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d854      	bhi.n	800087a <Disable_NVIC+0xba>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <Disable_NVIC+0x18>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	08000819 	.word	0x08000819
 80007dc:	08000827 	.word	0x08000827
 80007e0:	08000835 	.word	0x08000835
 80007e4:	08000843 	.word	0x08000843
 80007e8:	08000851 	.word	0x08000851
 80007ec:	0800085f 	.word	0x0800085f
 80007f0:	0800085f 	.word	0x0800085f
 80007f4:	0800085f 	.word	0x0800085f
 80007f8:	0800085f 	.word	0x0800085f
 80007fc:	0800085f 	.word	0x0800085f
 8000800:	0800086d 	.word	0x0800086d
 8000804:	0800086d 	.word	0x0800086d
 8000808:	0800086d 	.word	0x0800086d
 800080c:	0800086d 	.word	0x0800086d
 8000810:	0800086d 	.word	0x0800086d
 8000814:	0800086d 	.word	0x0800086d
		{
		case 0:
			NVIC_EXT0_IRQ6_Disable() ;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <Disable_NVIC+0xc4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <Disable_NVIC+0xc4>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000822:	6013      	str	r3, [r2, #0]
			break;
 8000824:	e029      	b.n	800087a <Disable_NVIC+0xba>
		case 1:
			NVIC_EXT1_IRQ7_Disable() ;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <Disable_NVIC+0xc4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <Disable_NVIC+0xc4>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6013      	str	r3, [r2, #0]
			break ;
 8000832:	e022      	b.n	800087a <Disable_NVIC+0xba>
		case 2:
			NVIC_EXT2_IRQ8_Disable() ;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <Disable_NVIC+0xc4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <Disable_NVIC+0xc4>)
 800083a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083e:	6013      	str	r3, [r2, #0]
			break ;
 8000840:	e01b      	b.n	800087a <Disable_NVIC+0xba>
		case 3:
			NVIC_EXT3_IRQ9_Disable() ;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <Disable_NVIC+0xc4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <Disable_NVIC+0xc4>)
 8000848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084c:	6013      	str	r3, [r2, #0]
			break ;
 800084e:	e014      	b.n	800087a <Disable_NVIC+0xba>
		case 4:
			NVIC_EXT4_IRQ10_Disable() ;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <Disable_NVIC+0xc4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <Disable_NVIC+0xc4>)
 8000856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085a:	6013      	str	r3, [r2, #0]
			break ;
 800085c:	e00d      	b.n	800087a <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_EXT9_5_IRQ23_Disable();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <Disable_NVIC+0xc4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <Disable_NVIC+0xc4>)
 8000864:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000868:	6013      	str	r3, [r2, #0]
			break ;
 800086a:	e006      	b.n	800087a <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_EXT15_10_IRQ40_Disable();
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <Disable_NVIC+0xc8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a05      	ldr	r2, [pc, #20]	; (8000888 <Disable_NVIC+0xc8>)
 8000872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000876:	6013      	str	r3, [r2, #0]
			break ;
 8000878:	bf00      	nop

		}

}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	e000e180 	.word	0xe000e180
 8000888:	e000e184 	.word	0xe000e184

0800088c <UPDATE_EXTI>:


void UPDATE_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	//1. Configure GPIO to be AF input -> Floating input
	GPIO_PinConfig_t EXTI_pin;
	EXTI_pin.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	891b      	ldrh	r3, [r3, #8]
 8000898:	813b      	strh	r3, [r7, #8]
	EXTI_pin.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800089a:	2301      	movs	r3, #1
 800089c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &EXTI_pin);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f107 0208 	add.w	r2, r7, #8
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fa5c 	bl	8000d66 <MCAL_GPIO_Init>

	//===============================================================
	//2. configure AFIO_EXTICR to route betwen EXTI line with port A, B, C, D
	//konw which EXTICR
	uint8_t AFIO_EXTICR_index = (EXTI_Config->EXTI_PIN.EXTI_Line_Number / 4);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]
	//know position in the register bits
	uint8_t AFIO_EXTICR_position = ((EXTI_Config->EXTI_PIN.EXTI_Line_Number % 4)*4);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0303 	and.w	r3, r3, #3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	73bb      	strb	r3, [r7, #14]
	//clear the 4 bits for the XTI
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 80008c8:	4a60      	ldr	r2, [pc, #384]	; (8000a4c <UPDATE_EXTI+0x1c0>)
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	3302      	adds	r3, #2
 80008ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	210f      	movs	r1, #15
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	495b      	ldr	r1, [pc, #364]	; (8000a4c <UPDATE_EXTI+0x1c0>)
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	4002      	ands	r2, r0
 80008e4:	3302      	adds	r3, #2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//store port value
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_EXTI_PORT_mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0x0F) << AFIO_EXTICR_position);
 80008ea:	4a58      	ldr	r2, [pc, #352]	; (8000a4c <UPDATE_EXTI+0x1c0>)
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	3302      	adds	r3, #2
 80008f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	4955      	ldr	r1, [pc, #340]	; (8000a50 <UPDATE_EXTI+0x1c4>)
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d016      	beq.n	800092c <UPDATE_EXTI+0xa0>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	4954      	ldr	r1, [pc, #336]	; (8000a54 <UPDATE_EXTI+0x1c8>)
 8000904:	428b      	cmp	r3, r1
 8000906:	d00f      	beq.n	8000928 <UPDATE_EXTI+0x9c>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4952      	ldr	r1, [pc, #328]	; (8000a58 <UPDATE_EXTI+0x1cc>)
 800090e:	428b      	cmp	r3, r1
 8000910:	d008      	beq.n	8000924 <UPDATE_EXTI+0x98>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4951      	ldr	r1, [pc, #324]	; (8000a5c <UPDATE_EXTI+0x1d0>)
 8000918:	428b      	cmp	r3, r1
 800091a:	d101      	bne.n	8000920 <UPDATE_EXTI+0x94>
 800091c:	2303      	movs	r3, #3
 800091e:	e006      	b.n	800092e <UPDATE_EXTI+0xa2>
 8000920:	2300      	movs	r3, #0
 8000922:	e004      	b.n	800092e <UPDATE_EXTI+0xa2>
 8000924:	2302      	movs	r3, #2
 8000926:	e002      	b.n	800092e <UPDATE_EXTI+0xa2>
 8000928:	2301      	movs	r3, #1
 800092a:	e000      	b.n	800092e <UPDATE_EXTI+0xa2>
 800092c:	2300      	movs	r3, #0
 800092e:	7bb9      	ldrb	r1, [r7, #14]
 8000930:	408b      	lsls	r3, r1
 8000932:	4618      	mov	r0, r3
 8000934:	4945      	ldr	r1, [pc, #276]	; (8000a4c <UPDATE_EXTI+0x1c0>)
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	4302      	orrs	r2, r0
 800093a:	3302      	adds	r3, #2
 800093c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//===============================================================
	//3. setting trigger state
	//clear trigger registers
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	8812      	ldrh	r2, [r2, #0]
 8000948:	4611      	mov	r1, r2
 800094a:	2201      	movs	r2, #1
 800094c:	408a      	lsls	r2, r1
 800094e:	43d2      	mvns	r2, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a43      	ldr	r2, [pc, #268]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 8000954:	400b      	ands	r3, r1
 8000956:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000958:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	8812      	ldrh	r2, [r2, #0]
 8000960:	4611      	mov	r1, r2
 8000962:	2201      	movs	r2, #1
 8000964:	408a      	lsls	r2, r1
 8000966:	43d2      	mvns	r2, r2
 8000968:	4611      	mov	r1, r2
 800096a:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 800096c:	400b      	ands	r3, r1
 800096e:	60d3      	str	r3, [r2, #12]
	//check state
	if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_RISING)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7b1b      	ldrb	r3, [r3, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10b      	bne.n	8000990 <UPDATE_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	8812      	ldrh	r2, [r2, #0]
 8000980:	4611      	mov	r1, r2
 8000982:	2201      	movs	r2, #1
 8000984:	408a      	lsls	r2, r1
 8000986:	4611      	mov	r1, r2
 8000988:	4a35      	ldr	r2, [pc, #212]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 800098a:	430b      	orrs	r3, r1
 800098c:	6093      	str	r3, [r2, #8]
 800098e:	e029      	b.n	80009e4 <UPDATE_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_TRIGGER_FALLING)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7b1b      	ldrb	r3, [r3, #12]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d10b      	bne.n	80009b0 <UPDATE_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	8812      	ldrh	r2, [r2, #0]
 80009a0:	4611      	mov	r1, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	408a      	lsls	r2, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	4a2d      	ldr	r2, [pc, #180]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 80009aa:	430b      	orrs	r3, r1
 80009ac:	60d3      	str	r3, [r2, #12]
 80009ae:	e019      	b.n	80009e4 <UPDATE_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_TRIGGER_RisingAndFalling)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7b1b      	ldrb	r3, [r3, #12]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d115      	bne.n	80009e4 <UPDATE_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	8812      	ldrh	r2, [r2, #0]
 80009c0:	4611      	mov	r1, r2
 80009c2:	2201      	movs	r2, #1
 80009c4:	408a      	lsls	r2, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 80009ca:	430b      	orrs	r3, r1
 80009cc:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8812      	ldrh	r2, [r2, #0]
 80009d6:	4611      	mov	r1, r2
 80009d8:	2201      	movs	r2, #1
 80009da:	408a      	lsls	r2, r1
 80009dc:	4611      	mov	r1, r2
 80009de:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 80009e0:	430b      	orrs	r3, r1
 80009e2:	60d3      	str	r3, [r2, #12]
	}

	//===============================================================
	//4. Update IRQ Handling Callback array
	GP_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_Line_Number] = EXTI_Config->P_IRQ_CallBack;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <UPDATE_EXTI+0x1d8>)
 80009f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//===============================================================
	//5. Enable/Disable IRQ EXTI (IMR) & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7b5b      	ldrb	r3, [r3, #13]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d110      	bne.n	8000a1e <UPDATE_EXTI+0x192>
	{
		//EXTI IMR
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line_Number );
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	8812      	ldrh	r2, [r2, #0]
 8000a04:	4611      	mov	r1, r2
 8000a06:	2201      	movs	r2, #1
 8000a08:	408a      	lsls	r2, r1
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	6013      	str	r3, [r2, #0]

		//enable NVIC
		Enable_NVIC (EXTI_Config->EXTI_PIN.EXTI_Line_Number ) ;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe6c 	bl	80006f4 <Enable_NVIC>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.IVT_IRQ_Number);

		//disable NVIC
		Disable_NVIC (EXTI_Config->EXTI_PIN.IVT_IRQ_Number);
	}
}
 8000a1c:	e011      	b.n	8000a42 <UPDATE_EXTI+0x1b6>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.IVT_IRQ_Number);
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	7a92      	ldrb	r2, [r2, #10]
 8000a26:	4611      	mov	r1, r2
 8000a28:	2201      	movs	r2, #1
 8000a2a:	408a      	lsls	r2, r1
 8000a2c:	43d2      	mvns	r2, r2
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <UPDATE_EXTI+0x1d4>)
 8000a32:	400b      	ands	r3, r1
 8000a34:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_PIN.IVT_IRQ_Number);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7a9b      	ldrb	r3, [r3, #10]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff febf 	bl	80007c0 <Disable_NVIC>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	40010400 	.word	0x40010400
 8000a64:	200000c8 	.word	0x200000c8

08000a68 <MCAL_EXTI_GPIO_Init>:
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules,
 * 				 but LQFP48 package has only GPIO A, B, and (part of C,D) exported as extenal PINs from thr MCU
 * 				 -Also mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	UPDATE_EXTI(EXTI_Config);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff0b 	bl	800088c <UPDATE_EXTI>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <EXTI0_IRQHandler>:
 * =========================================================================
 * 								IRQ Functions
 * =========================================================================
 */
void EXTI0_IRQHandler()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 0);
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <EXTI0_IRQHandler+0x1c>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <EXTI0_IRQHandler+0x1c>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[0]();
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <EXTI0_IRQHandler+0x20>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4798      	blx	r3
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010400 	.word	0x40010400
 8000aa0:	200000c8 	.word	0x200000c8

08000aa4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 1);
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <EXTI1_IRQHandler+0x1c>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <EXTI1_IRQHandler+0x1c>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[1]();
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <EXTI1_IRQHandler+0x20>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	4798      	blx	r3
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40010400 	.word	0x40010400
 8000ac4:	200000c8 	.word	0x200000c8

08000ac8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 2);
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <EXTI2_IRQHandler+0x1c>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <EXTI2_IRQHandler+0x1c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[2]();
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <EXTI2_IRQHandler+0x20>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4798      	blx	r3
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010400 	.word	0x40010400
 8000ae8:	200000c8 	.word	0x200000c8

08000aec <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 3);
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <EXTI3_IRQHandler+0x1c>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <EXTI3_IRQHandler+0x1c>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[3]();
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <EXTI3_IRQHandler+0x20>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	4798      	blx	r3
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010400 	.word	0x40010400
 8000b0c:	200000c8 	.word	0x200000c8

08000b10 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 4);
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <EXTI4_IRQHandler+0x1c>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <EXTI4_IRQHandler+0x1c>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[4]();
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <EXTI4_IRQHandler+0x20>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	4798      	blx	r3
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010400 	.word	0x40010400
 8000b30:	200000c8 	.word	0x200000c8

08000b34 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	//check which EXTI
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= (1 << 5); GP_IRQ_CALLBACK[5](); }
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	f003 0320 	and.w	r3, r3, #32
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d008      	beq.n	8000b56 <EXTI9_5_IRQHandler+0x22>
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b4a:	f043 0320 	orr.w	r3, r3, #32
 8000b4e:	6153      	str	r3, [r2, #20]
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <EXTI9_5_IRQHandler+0xa4>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= (1 << 6); GP_IRQ_CALLBACK[6](); }
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <EXTI9_5_IRQHandler+0x40>
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <EXTI9_5_IRQHandler+0xa4>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= (1 << 7); GP_IRQ_CALLBACK[7](); }
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d008      	beq.n	8000b92 <EXTI9_5_IRQHandler+0x5e>
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	6153      	str	r3, [r2, #20]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <EXTI9_5_IRQHandler+0xa4>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= (1 << 8); GP_IRQ_CALLBACK[8](); }
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d008      	beq.n	8000bb0 <EXTI9_5_IRQHandler+0x7c>
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <EXTI9_5_IRQHandler+0xa4>)
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= (1 << 9); GP_IRQ_CALLBACK[9](); }
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d008      	beq.n	8000bce <EXTI9_5_IRQHandler+0x9a>
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <EXTI9_5_IRQHandler+0xa0>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6153      	str	r3, [r2, #20]
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <EXTI9_5_IRQHandler+0xa4>)
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	4798      	blx	r3

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010400 	.word	0x40010400
 8000bd8:	200000c8 	.word	0x200000c8

08000bdc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	//check which EXTI
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= (1 << 10); GP_IRQ_CALLBACK[10](); }
 8000be0:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d008      	beq.n	8000bfe <EXTI15_10_IRQHandler+0x22>
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6153      	str	r3, [r2, #20]
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <EXTI15_10_IRQHandler+0xc0>)
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= (1 << 11); GP_IRQ_CALLBACK[11](); }
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d008      	beq.n	8000c1c <EXTI15_10_IRQHandler+0x40>
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <EXTI15_10_IRQHandler+0xc0>)
 8000c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= (1 << 12); GP_IRQ_CALLBACK[12](); }
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d008      	beq.n	8000c3a <EXTI15_10_IRQHandler+0x5e>
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c32:	6153      	str	r3, [r2, #20]
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <EXTI15_10_IRQHandler+0xc0>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= (1 << 13); GP_IRQ_CALLBACK[13](); }
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d008      	beq.n	8000c58 <EXTI15_10_IRQHandler+0x7c>
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <EXTI15_10_IRQHandler+0xc0>)
 8000c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c56:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= (1 << 14); GP_IRQ_CALLBACK[14](); }
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d008      	beq.n	8000c76 <EXTI15_10_IRQHandler+0x9a>
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6153      	str	r3, [r2, #20]
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <EXTI15_10_IRQHandler+0xc0>)
 8000c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c74:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= (1 << 15); GP_IRQ_CALLBACK[15](); }
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d008      	beq.n	8000c94 <EXTI15_10_IRQHandler+0xb8>
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <EXTI15_10_IRQHandler+0xbc>)
 8000c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <EXTI15_10_IRQHandler+0xc0>)
 8000c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c92:	4798      	blx	r3

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010400 	.word	0x40010400
 8000c9c:	200000c8 	.word	0x200000c8

08000ca0 <Get_CRLH_Position>:
 */
#include "../MCAL/inc/STM32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2b80      	cmp	r3, #128	; 0x80
 8000cae:	d042      	beq.n	8000d36 <Get_CRLH_Position+0x96>
 8000cb0:	2b80      	cmp	r3, #128	; 0x80
 8000cb2:	dc11      	bgt.n	8000cd8 <Get_CRLH_Position+0x38>
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d036      	beq.n	8000d26 <Get_CRLH_Position+0x86>
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	dc06      	bgt.n	8000cca <Get_CRLH_Position+0x2a>
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d02e      	beq.n	8000d1e <Get_CRLH_Position+0x7e>
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d02e      	beq.n	8000d22 <Get_CRLH_Position+0x82>
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d028      	beq.n	8000d1a <Get_CRLH_Position+0x7a>
 8000cc8:	e047      	b.n	8000d5a <Get_CRLH_Position+0xba>
 8000cca:	2b20      	cmp	r3, #32
 8000ccc:	d02f      	beq.n	8000d2e <Get_CRLH_Position+0x8e>
 8000cce:	2b40      	cmp	r3, #64	; 0x40
 8000cd0:	d02f      	beq.n	8000d32 <Get_CRLH_Position+0x92>
 8000cd2:	2b10      	cmp	r3, #16
 8000cd4:	d029      	beq.n	8000d2a <Get_CRLH_Position+0x8a>
 8000cd6:	e040      	b.n	8000d5a <Get_CRLH_Position+0xba>
 8000cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cdc:	d033      	beq.n	8000d46 <Get_CRLH_Position+0xa6>
 8000cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce2:	dc09      	bgt.n	8000cf8 <Get_CRLH_Position+0x58>
 8000ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce8:	d029      	beq.n	8000d3e <Get_CRLH_Position+0x9e>
 8000cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cee:	d028      	beq.n	8000d42 <Get_CRLH_Position+0xa2>
 8000cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf4:	d021      	beq.n	8000d3a <Get_CRLH_Position+0x9a>
 8000cf6:	e030      	b.n	8000d5a <Get_CRLH_Position+0xba>
 8000cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cfc:	d027      	beq.n	8000d4e <Get_CRLH_Position+0xae>
 8000cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d02:	dc03      	bgt.n	8000d0c <Get_CRLH_Position+0x6c>
 8000d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d08:	d01f      	beq.n	8000d4a <Get_CRLH_Position+0xaa>
 8000d0a:	e026      	b.n	8000d5a <Get_CRLH_Position+0xba>
 8000d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d10:	d01f      	beq.n	8000d52 <Get_CRLH_Position+0xb2>
 8000d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d16:	d01e      	beq.n	8000d56 <Get_CRLH_Position+0xb6>
 8000d18:	e01f      	b.n	8000d5a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e01e      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e01c      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000d22:	2308      	movs	r3, #8
 8000d24:	e01a      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000d26:	230c      	movs	r3, #12
 8000d28:	e018      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	e016      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000d2e:	2314      	movs	r3, #20
 8000d30:	e014      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000d32:	2318      	movs	r3, #24
 8000d34:	e012      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000d36:	231c      	movs	r3, #28
 8000d38:	e010      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e00e      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	e00c      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000d42:	2308      	movs	r3, #8
 8000d44:	e00a      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000d46:	230c      	movs	r3, #12
 8000d48:	e008      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	e006      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000d4e:	2314      	movs	r3, #20
 8000d50:	e004      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000d52:	2318      	movs	r3, #24
 8000d54:	e002      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000d56:	231c      	movs	r3, #28
 8000d58:	e000      	b.n	8000d5c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules,
 * 				 but LQFP48 package has only GPIO A, B, and (part of C,D) exported as extenal PINs from thr MCU
 */
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000d66:	b590      	push	{r4, r7, lr}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
	//check CRL\H
	volatile uint32_t *ConfigRegister = NULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	2bff      	cmp	r3, #255	; 0xff
 8000d7e:	d801      	bhi.n	8000d84 <MCAL_GPIO_Init+0x1e>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	e001      	b.n	8000d88 <MCAL_GPIO_Init+0x22>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3304      	adds	r3, #4
 8000d88:	60bb      	str	r3, [r7, #8]

	//0. clear CNFy[1:0] MODEy[1:0]
	*ConfigRegister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff86 	bl	8000ca0 <Get_CRLH_Position>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	230f      	movs	r3, #15
 8000d9a:	4093      	lsls	r3, r2
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	401a      	ands	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	601a      	str	r2, [r3, #0]

	//1. if pin is output
	if((PinConfig->GPIO_Mode >= GPIO_MODE_OUTPUT_PP) && (PinConfig->GPIO_Mode <= GPIO_MODE_OUTPUT_AF_OD))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d911      	bls.n	8000dd4 <MCAL_GPIO_Init+0x6e>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d80d      	bhi.n	8000dd4 <MCAL_GPIO_Init+0x6e>
	{
		//set CNF from output options, then set MODE (speed)
		PIN_Config = (((PinConfig->GPIO_Mode - 0x4UL) << 2) | (PinConfig->GPIO_Output_Speed & 0x0F));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	789b      	ldrb	r3, [r3, #2]
 8000dbc:	3b04      	subs	r3, #4
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	f003 030f 	and.w	r3, r3, #15
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	e01e      	b.n	8000e12 <MCAL_GPIO_Init+0xac>
	}
	//2. if pin is input
	else
	{
		//if input pull-down, reset ODR
		if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d108      	bne.n	8000dee <MCAL_GPIO_Init+0x88>
		{
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	8812      	ldrh	r2, [r2, #0]
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	401a      	ands	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	e00a      	b.n	8000e04 <MCAL_GPIO_Init+0x9e>
		}
		//if input pull-up, set ODR
		else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	789b      	ldrb	r3, [r3, #2]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d106      	bne.n	8000e04 <MCAL_GPIO_Init+0x9e>
		{
			GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	8812      	ldrh	r2, [r2, #0]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	60da      	str	r2, [r3, #12]
		}

		//set CNF from input options, then set MODe (00)
		PIN_Config = ((PinConfig->GPIO_Mode << 2) & 0x0F );
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	73fb      	strb	r3, [r7, #15]
	}
	//3. update register with the Pin_Config information
	*ConfigRegister |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000e12:	7bfc      	ldrb	r4, [r7, #15]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff41 	bl	8000ca0 <Get_CRLH_Position>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	fa04 f203 	lsl.w	r2, r4, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	601a      	str	r2, [r3, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}

08000e36 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: Pin value
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx, uint16_t *PinNumber, uint8_t value)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	4613      	mov	r3, r2
 8000e42:	71fb      	strb	r3, [r7, #7]
	//set pin by 1
	if(value != GPIO_PIN_RESET)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <MCAL_GPIO_WritePin+0x1c>
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
	else
		//reset bit
		GPIOx->BRR = (uint32_t)PinNumber;
}
 8000e50:	e002      	b.n	8000e58 <MCAL_GPIO_WritePin+0x22>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	615a      	str	r2, [r3, #20]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
	...

08000e64 <MCAL_RCC_GetSYS_CLKFreq>:
 * @param [in]	-none
 * @retval 		-SYS_CLK value
 * Note			-none
 */
uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >>2 & 0b11)
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d006      	beq.n	8000e84 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d302      	bcc.n	8000e80 <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d004      	beq.n	8000e88 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000e7e:	e005      	b.n	8000e8c <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000e82:	e004      	b.n	8000e8e <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	case 1:
		return HSE_RC_CLK;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000e86:	e002      	b.n	8000e8e <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	case 2:
		return PLL_RC_CLK;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000e8a:	e000      	b.n	8000e8e <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	default:
		return HSI_RC_CLK;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <MCAL_RCC_GetSYS_CLKFreq+0x38>)
		break;
	}
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	007a1200 	.word	0x007a1200
 8000ea0:	00f42400 	.word	0x00f42400
 8000ea4:	044aa200 	.word	0x044aa200

08000ea8 <MCAL_RCC_GetHCLKFreq>:
 * @param [in]	-none
 * @retval 		-HCLK value
 * Note			-none
 */
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	// Get SYS_CLK source Compute HCLK Frequency
	return ( MCAL_RCC_GetSYS_CLKFreq() >> APBPrescTable[(RCC->CFGR >> 4) & 0b1111] );
 8000eac:	f7ff ffda 	bl	8000e64 <MCAL_RCC_GetSYS_CLKFreq>
 8000eb0:	4601      	mov	r1, r0
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MCAL_RCC_GetHCLKFreq+0x24>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <MCAL_RCC_GetHCLKFreq+0x28>)
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <MCAL_RCC_GetPCLK1Freq>:
 * @param [in]	-none
 * @retval 		-PCLK1 value
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	// Get HCLK source Compute PCLK1 Frequency
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111] );
 8000ed8:	f7ff ffe6 	bl	8000ea8 <MCAL_RCC_GetHCLKFreq>
 8000edc:	4601      	mov	r1, r0
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <MCAL_RCC_GetPCLK1Freq+0x28>)
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	20000008 	.word	0x20000008

08000f00 <MCAL_RCC_GetPCLK2Freq>:
 * @param [in]	-none
 * @retval 		-PCLK2 value
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	// Get HCLK source Compute PCLK2 Frequency
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111] );
 8000f04:	f7ff ffd0 	bl	8000ea8 <MCAL_RCC_GetHCLKFreq>
 8000f08:	4601      	mov	r1, r0
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	0adb      	lsrs	r3, r3, #11
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <MCAL_RCC_GetPCLK2Freq+0x28>)
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	20000008 	.word	0x20000008

08000f2c <MCAL_SPI_GPIO_SetPins>:
 * @brief 		- Initialize the GPIO Pins for SPI Interface
 * @param [in]	- SPIx: where x can be (1..3 depending on device used)
 * @retval 		- none
 */
void MCAL_SPI_GPIO_SetPins(SPI_t* SPIx)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	/* For SPI 1 */
	if(SPIx == SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a94      	ldr	r2, [pc, #592]	; (8001188 <MCAL_SPI_GPIO_SetPins+0x25c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 808f 	bne.w	800105c <MCAL_SPI_GPIO_SetPins+0x130>
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		/* Master Mode */
		if(Glob_SPI_Config[SPI1_Index]->Mode == SPI_MODE_Master)
 8000f3e:	4b93      	ldr	r3, [pc, #588]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d14e      	bne.n	8000fe6 <MCAL_SPI_GPIO_SetPins+0xba>
		{
			/* set NSS by checking which NSS Mode -> PA4 */
			if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Master_SS_DISABLE)
 8000f48:	4b90      	ldr	r3, [pc, #576]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	891b      	ldrh	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10a      	bne.n	8000f68 <MCAL_SPI_GPIO_SetPins+0x3c>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000f52:	2310      	movs	r3, #16
 8000f54:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	488b      	ldr	r0, [pc, #556]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8000f62:	f7ff ff00 	bl	8000d66 <MCAL_GPIO_Init>
 8000f66:	e010      	b.n	8000f8a <MCAL_SPI_GPIO_SetPins+0x5e>
			}
			else if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Master_SS_ENABLE)
 8000f68:	4b88      	ldr	r3, [pc, #544]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	891b      	ldrh	r3, [r3, #8]
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d10b      	bne.n	8000f8a <MCAL_SPI_GPIO_SetPins+0x5e>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000f72:	2310      	movs	r3, #16
 8000f74:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000f76:	2306      	movs	r3, #6
 8000f78:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	4619      	mov	r1, r3
 8000f84:	4882      	ldr	r0, [pc, #520]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8000f86:	f7ff feee 	bl	8000d66 <MCAL_GPIO_Init>
			}


			/* Set SCK -> PA5 */
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	487c      	ldr	r0, [pc, #496]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8000f9e:	f7ff fee2 	bl	8000d66 <MCAL_GPIO_Init>

			/* Set MISO -> PA6 */
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 8000fa2:	4b7a      	ldr	r3, [pc, #488]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	885b      	ldrh	r3, [r3, #2]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <MCAL_SPI_GPIO_SetPins+0x94>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4875      	ldr	r0, [pc, #468]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8000fbc:	f7ff fed3 	bl	8000d66 <MCAL_GPIO_Init>
			else
			{
				//todo for Half-Duplex
			}
			/* Set MOSI -> PA7 */
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 8000fc0:	4b72      	ldr	r3, [pc, #456]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	885b      	ldrh	r3, [r3, #2]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 80da 	bne.w	8001180 <MCAL_SPI_GPIO_SetPins+0x254>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	486c      	ldr	r0, [pc, #432]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8000fe0:	f7ff fec1 	bl	8000d66 <MCAL_GPIO_Init>
		{
			//todo for Half-Duplex
		}
	}

}
 8000fe4:	e0cc      	b.n	8001180 <MCAL_SPI_GPIO_SetPins+0x254>
			if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Slave)
 8000fe6:	4b69      	ldr	r3, [pc, #420]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <MCAL_SPI_GPIO_SetPins+0xd8>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4864      	ldr	r0, [pc, #400]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8001000:	f7ff feb1 	bl	8000d66 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8001004:	2320      	movs	r3, #32
 8001006:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8001008:	2301      	movs	r3, #1
 800100a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	485f      	ldr	r0, [pc, #380]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8001014:	f7ff fea7 	bl	8000d66 <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	885b      	ldrh	r3, [r3, #2]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10b      	bne.n	800103a <MCAL_SPI_GPIO_SetPins+0x10e>
				PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8001022:	2340      	movs	r3, #64	; 0x40
 8001024:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8001026:	2306      	movs	r3, #6
 8001028:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	4856      	ldr	r0, [pc, #344]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8001036:	f7ff fe96 	bl	8000d66 <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 800103a:	4b54      	ldr	r3, [pc, #336]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f040 809d 	bne.w	8001180 <MCAL_SPI_GPIO_SetPins+0x254>
				PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800104a:	2301      	movs	r3, #1
 800104c:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4619      	mov	r1, r3
 8001054:	484e      	ldr	r0, [pc, #312]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8001056:	f7ff fe86 	bl	8000d66 <MCAL_GPIO_Init>
}
 800105a:	e091      	b.n	8001180 <MCAL_SPI_GPIO_SetPins+0x254>
	else if(SPIx == SPI2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <MCAL_SPI_GPIO_SetPins+0x268>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d150      	bne.n	8001106 <MCAL_SPI_GPIO_SetPins+0x1da>
		if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Master_SS_DISABLE)
 8001064:	4b49      	ldr	r3, [pc, #292]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	891b      	ldrh	r3, [r3, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10a      	bne.n	8001084 <MCAL_SPI_GPIO_SetPins+0x158>
			PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800106e:	2310      	movs	r3, #16
 8001070:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8001072:	2301      	movs	r3, #1
 8001074:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 800107e:	f7ff fe72 	bl	8000d66 <MCAL_GPIO_Init>
 8001082:	e010      	b.n	80010a6 <MCAL_SPI_GPIO_SetPins+0x17a>
		else if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Master_SS_ENABLE)
 8001084:	4b41      	ldr	r3, [pc, #260]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	891b      	ldrh	r3, [r3, #8]
 800108a:	2b04      	cmp	r3, #4
 800108c:	d10b      	bne.n	80010a6 <MCAL_SPI_GPIO_SetPins+0x17a>
			PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800108e:	2310      	movs	r3, #16
 8001090:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8001092:	2306      	movs	r3, #6
 8001094:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	483b      	ldr	r0, [pc, #236]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 80010a2:	f7ff fe60 	bl	8000d66 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80010ac:	2306      	movs	r3, #6
 80010ae:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	4835      	ldr	r0, [pc, #212]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 80010bc:	f7ff fe53 	bl	8000d66 <MCAL_GPIO_Init>
		if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	885b      	ldrh	r3, [r3, #2]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10a      	bne.n	80010e0 <MCAL_SPI_GPIO_SetPins+0x1b4>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80010ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ce:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	482d      	ldr	r0, [pc, #180]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 80010dc:	f7ff fe43 	bl	8000d66 <MCAL_GPIO_Init>
		if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	885b      	ldrh	r3, [r3, #2]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d14a      	bne.n	8001180 <MCAL_SPI_GPIO_SetPins+0x254>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80010ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ee:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80010f0:	2306      	movs	r3, #6
 80010f2:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4824      	ldr	r0, [pc, #144]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8001100:	f7ff fe31 	bl	8000d66 <MCAL_GPIO_Init>
}
 8001104:	e03c      	b.n	8001180 <MCAL_SPI_GPIO_SetPins+0x254>
		if(Glob_SPI_Config[SPI2_Index]->NSS == SPI_NSS_Hardware_Slave)
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	891b      	ldrh	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10a      	bne.n	8001126 <MCAL_SPI_GPIO_SetPins+0x1fa>
			PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8001116:	2301      	movs	r3, #1
 8001118:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	481b      	ldr	r0, [pc, #108]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8001122:	f7ff fe20 	bl	8000d66 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8001126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800112c:	2301      	movs	r3, #1
 800112e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	4816      	ldr	r0, [pc, #88]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 8001138:	f7ff fe15 	bl	8000d66 <MCAL_GPIO_Init>
		if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	885b      	ldrh	r3, [r3, #2]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <MCAL_SPI_GPIO_SetPins+0x234>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8001146:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800114a:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800114c:	2306      	movs	r3, #6
 800114e:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 800115c:	f7ff fe03 	bl	8000d66 <MCAL_GPIO_Init>
		if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MCAL_SPI_GPIO_SetPins+0x260>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	885b      	ldrh	r3, [r3, #2]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10a      	bne.n	8001180 <MCAL_SPI_GPIO_SetPins+0x254>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800116a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800116e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8001170:	2301      	movs	r3, #1
 8001172:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MCAL_SPI_GPIO_SetPins+0x264>)
 800117c:	f7ff fdf3 	bl	8000d66 <MCAL_GPIO_Init>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013000 	.word	0x40013000
 800118c:	200000a8 	.word	0x200000a8
 8001190:	40010800 	.word	0x40010800
 8001194:	40003800 	.word	0x40003800

08001198 <MCAL_SPI_Init>:
 * @retval 		- none
 * Note			- Support for SPI Full Duplex Master/Slave only & NSS HW/SW
 *				- in case of mater you have to configure pin and drive it
 */
void MCAL_SPI_Init(SPI_t* SPIx, SPI_Config_t* SPI_Cfg)
{
 8001198:	b4b0      	push	{r4, r5, r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	/* Safety for Register*/
	u32 TempCR1 = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
	u32 TempCR2 = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]

	/* Save Config & Enable CLK*/
	if(SPIx == SPI1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a5e      	ldr	r2, [pc, #376]	; (8001328 <MCAL_SPI_Init+0x190>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d113      	bne.n	80011da <MCAL_SPI_Init+0x42>
	{
		Glob_SPI1_Config = *SPI_Cfg;
 80011b2:	4a5e      	ldr	r2, [pc, #376]	; (800132c <MCAL_SPI_Init+0x194>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4614      	mov	r4, r2
 80011b8:	461d      	mov	r5, r3
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Glob_SPI_Config[SPI1_Index] = &Glob_SPI1_Config;
 80011c6:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <MCAL_SPI_Init+0x198>)
 80011c8:	4a58      	ldr	r2, [pc, #352]	; (800132c <MCAL_SPI_Init+0x194>)
 80011ca:	601a      	str	r2, [r3, #0]
		RCC_SPI1_CLK_EN();
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <MCAL_SPI_Init+0x19c>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a58      	ldr	r2, [pc, #352]	; (8001334 <MCAL_SPI_Init+0x19c>)
 80011d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	e016      	b.n	8001208 <MCAL_SPI_Init+0x70>
	}
	else if (SPIx == SPI2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a56      	ldr	r2, [pc, #344]	; (8001338 <MCAL_SPI_Init+0x1a0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d112      	bne.n	8001208 <MCAL_SPI_Init+0x70>
	{
		Glob_SPI2_Config = *SPI_Cfg;
 80011e2:	4a56      	ldr	r2, [pc, #344]	; (800133c <MCAL_SPI_Init+0x1a4>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4614      	mov	r4, r2
 80011e8:	461d      	mov	r5, r3
 80011ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Glob_SPI_Config[SPI1_Index] = &Glob_SPI2_Config;
 80011f6:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <MCAL_SPI_Init+0x198>)
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <MCAL_SPI_Init+0x1a4>)
 80011fa:	601a      	str	r2, [r3, #0]
		RCC_SPI2_CLK_EN();
 80011fc:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <MCAL_SPI_Init+0x19c>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <MCAL_SPI_Init+0x19c>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001206:	61d3      	str	r3, [r2, #28]
	}

	/* Set SPI Configurations */
	//1. Set BaudRate Prescaler
	TempCR1 |= SPI_Cfg->Baudrate_Prescaler;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	8a5b      	ldrh	r3, [r3, #18]
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

	//2. Set CLK Phase
	TempCR1 |= SPI_Cfg->Phase;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	899b      	ldrh	r3, [r3, #12]
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

	//3. Set CLK Polarity
	TempCR1 |= SPI_Cfg->Polarity;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	895b      	ldrh	r3, [r3, #10]
 8001224:	461a      	mov	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

	//4. Set Data Size
	TempCR1 |= SPI_Cfg->Data_Size;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	88db      	ldrh	r3, [r3, #6]
 8001230:	461a      	mov	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

	//5. Set Frame Format
	TempCR1 |= SPI_Cfg->Frame_Format;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	461a      	mov	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]

	//6. Set NSS
	if(SPI_Cfg->NSS == SPI_NSS_Hardware_Master_SS_ENABLE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	891b      	ldrh	r3, [r3, #8]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d106      	bne.n	800125a <MCAL_SPI_Init+0xc2>
	{
		TempCR2 |= SPI_Cfg->NSS;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	891b      	ldrh	r3, [r3, #8]
 8001250:	461a      	mov	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	4313      	orrs	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	e025      	b.n	80012a6 <MCAL_SPI_Init+0x10e>
	}
	else if (SPI_Cfg->NSS == SPI_NSS_Hardware_Master_SS_DISABLE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	891b      	ldrh	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d106      	bne.n	8001270 <MCAL_SPI_Init+0xd8>
	{
		TempCR2 &= SPI_Cfg->NSS;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	891b      	ldrh	r3, [r3, #8]
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4013      	ands	r3, r2
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	e01a      	b.n	80012a6 <MCAL_SPI_Init+0x10e>
		//todo if you got unknown error check this step
	}
	else if (SPI_Cfg->NSS == SPI_NSS_Software_Slave_SET || SPI_Cfg->NSS == SPI_NSS_Software_Slave_RESET)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	891b      	ldrh	r3, [r3, #8]
 8001274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001278:	d004      	beq.n	8001284 <MCAL_SPI_Init+0xec>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	891b      	ldrh	r3, [r3, #8]
 800127e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001282:	d106      	bne.n	8001292 <MCAL_SPI_Init+0xfa>
	{
		TempCR1 |= SPI_Cfg->NSS;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	891b      	ldrh	r3, [r3, #8]
 8001288:	461a      	mov	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	e009      	b.n	80012a6 <MCAL_SPI_Init+0x10e>
	}
	else if (SPI_Cfg->NSS == SPI_NSS_Hardware_Slave)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	891b      	ldrh	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d105      	bne.n	80012a6 <MCAL_SPI_Init+0x10e>
	{
		TempCR2 &= SPI_Cfg->NSS;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	891b      	ldrh	r3, [r3, #8]
 800129e:	461a      	mov	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4013      	ands	r3, r2
 80012a4:	60bb      	str	r3, [r7, #8]
	}

	//7. Set Communication Mode
	TempCR1 |= SPI_Cfg->Comm_Mode;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	885b      	ldrh	r3, [r3, #2]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

	//8. Set Mode - Master/Slave
	TempCR1 |= SPI_Cfg->Mode;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]

	//9. Enable SPI - SPE Bit in CR1
	TempCR1 |= (1 << 6);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c4:	60fb      	str	r3, [r7, #12]

	//10. Set IRQ & Enable NVIC
	if(SPI_Cfg->IRQ_Enable != SPI_IRQ_NONE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	8a9b      	ldrh	r3, [r3, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01b      	beq.n	8001306 <MCAL_SPI_Init+0x16e>
	{
		TempCR2 |= SPI_Cfg->IRQ_Enable;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	8a9b      	ldrh	r3, [r3, #20]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
		if(SPIx == SPI1){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MCAL_SPI_Init+0x190>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d106      	bne.n	80012f0 <MCAL_SPI_Init+0x158>
			NVIC_SPI1_IRQ35_Enable();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MCAL_SPI_Init+0x1a8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MCAL_SPI_Init+0x1a8>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e010      	b.n	8001312 <MCAL_SPI_Init+0x17a>
		}
		else if(SPIx == SPI2){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <MCAL_SPI_Init+0x1a0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d10c      	bne.n	8001312 <MCAL_SPI_Init+0x17a>
			NVIC_SPI2_IRQ36_Enable();
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MCAL_SPI_Init+0x1a8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a10      	ldr	r2, [pc, #64]	; (8001340 <MCAL_SPI_Init+0x1a8>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e005      	b.n	8001312 <MCAL_SPI_Init+0x17a>
		}
	}
	else
	{
		TempCR2 &= SPI_Cfg->IRQ_Enable;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	8a9b      	ldrh	r3, [r3, #20]
 800130a:	461a      	mov	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4013      	ands	r3, r2
 8001310:	60bb      	str	r3, [r7, #8]
	}

	/* Add values to the real resigter */
	SPIx->CR1 = TempCR1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = TempCR2;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	605a      	str	r2, [r3, #4]

}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bcb0      	pop	{r4, r5, r7}
 8001326:	4770      	bx	lr
 8001328:	40013000 	.word	0x40013000
 800132c:	20000120 	.word	0x20000120
 8001330:	200000a8 	.word	0x200000a8
 8001334:	40021000 	.word	0x40021000
 8001338:	40003800 	.word	0x40003800
 800133c:	20000104 	.word	0x20000104
 8001340:	e000e104 	.word	0xe000e104

08001344 <MCAL_SPI_TxRx>:
 * @param [in]	- pRxBuffer: includes the data to recieve
 * @param [in]	- PollingEn: define if the pooling is enable or not
 * @retval 		- none
 */
void MCAL_SPI_TxRx(SPI_t* SPIx, u16 *pTxBuffer, enum SPI_Polling_mechanism PollingEn)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	4613      	mov	r3, r2
 8001350:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == PollingEnable)
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d106      	bne.n	8001366 <MCAL_SPI_TxRx+0x22>
		while(!(SPIx->SR & 1 << 1));
 8001358:	bf00      	nop
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f9      	beq.n	800135a <MCAL_SPI_TxRx+0x16>
	SPIx->DR = *pTxBuffer;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	60da      	str	r2, [r3, #12]

	if(PollingEn == PollingEnable)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <MCAL_SPI_TxRx+0x40>
		while(!(SPIx->SR & 1 ));
 8001376:	bf00      	nop
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f9      	beq.n	8001378 <MCAL_SPI_TxRx+0x34>
	*pTxBuffer = (SPIx->DR);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	b29a      	uxth	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	801a      	strh	r2, [r3, #0]
	//(*pTxBuffer)++;
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SPI1_IRQHandler>:
/***************************************************************
------------------------ ISR Functions  ------------------------
 ****************************************************************/

void SPI1_IRQHandler()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	/*check What's causing the IRQ */
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI1->SR & (1<<1)) >> 1);
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <SPI1_IRQHandler+0x54>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	793b      	ldrb	r3, [r7, #4]
 80013ac:	f362 0300 	bfi	r3, r2, #0, #1
 80013b0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <SPI1_IRQHandler+0x54>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	793b      	ldrb	r3, [r7, #4]
 80013be:	f362 0341 	bfi	r3, r2, #1, #1
 80013c2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <SPI1_IRQHandler+0x54>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	793b      	ldrb	r3, [r7, #4]
 80013d2:	f362 0382 	bfi	r3, r2, #2, #1
 80013d6:	713b      	strb	r3, [r7, #4]

	/* Call ISR Function */
	Glob_SPI_Config[SPI1_Index]->P_ISR_CallBack(irq_src);
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <SPI1_IRQHandler+0x58>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	7938      	ldrb	r0, [r7, #4]
 80013e0:	4798      	blx	r3
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40013000 	.word	0x40013000
 80013f0:	200000a8 	.word	0x200000a8

080013f4 <SPI2_IRQHandler>:

void SPI2_IRQHandler()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	/*check What's causing the IRQ */
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI2->SR & (1<<1)) >> 1);
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <SPI2_IRQHandler+0x54>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	085b      	lsrs	r3, r3, #1
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	793b      	ldrb	r3, [r7, #4]
 8001408:	f362 0300 	bfi	r3, r2, #0, #1
 800140c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <SPI2_IRQHandler+0x54>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	793b      	ldrb	r3, [r7, #4]
 800141a:	f362 0341 	bfi	r3, r2, #1, #1
 800141e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <SPI2_IRQHandler+0x54>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	793b      	ldrb	r3, [r7, #4]
 800142e:	f362 0382 	bfi	r3, r2, #2, #1
 8001432:	713b      	strb	r3, [r7, #4]

	/* Call ISR Function */
	Glob_SPI_Config[SPI2_Index]->P_ISR_CallBack(irq_src);
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SPI2_IRQHandler+0x58>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	7938      	ldrb	r0, [r7, #4]
 800143c:	4798      	blx	r3
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40003800 	.word	0x40003800
 800144c:	200000a8 	.word	0x200000a8

08001450 <MCAL_UART_Init>:
 * @param [in]	- UART_Cfg: All UART configuration
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Cfg)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	//0- save uart config in global variable
	if(USARTx == USART1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a61      	ldr	r2, [pc, #388]	; (80015e4 <MCAL_UART_Init+0x194>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d103      	bne.n	800146a <MCAL_UART_Init+0x1a>
		GLOBAL_UART1_Config = UART_Cfg;
 8001462:	4a61      	ldr	r2, [pc, #388]	; (80015e8 <MCAL_UART_Init+0x198>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e00a      	b.n	8001480 <MCAL_UART_Init+0x30>
	else if(USARTx == USART2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a5f      	ldr	r2, [pc, #380]	; (80015ec <MCAL_UART_Init+0x19c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d103      	bne.n	800147a <MCAL_UART_Init+0x2a>
		GLOBAL_UART2_Config = UART_Cfg;
 8001472:	4a5f      	ldr	r2, [pc, #380]	; (80015f0 <MCAL_UART_Init+0x1a0>)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e002      	b.n	8001480 <MCAL_UART_Init+0x30>
	else
		GLOBAL_UART3_Config = UART_Cfg;
 800147a:	4a5e      	ldr	r2, [pc, #376]	; (80015f4 <MCAL_UART_Init+0x1a4>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6013      	str	r3, [r2, #0]

	//1- enable UART peripheral
	if(USARTx == USART1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <MCAL_UART_Init+0x194>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d106      	bne.n	8001496 <MCAL_UART_Init+0x46>
		RCC_USART1_CLK_EN();
 8001488:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <MCAL_UART_Init+0x1a8>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <MCAL_UART_Init+0x1a8>)
 800148e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	e014      	b.n	80014c0 <MCAL_UART_Init+0x70>
	else if(USARTx == USART2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a54      	ldr	r2, [pc, #336]	; (80015ec <MCAL_UART_Init+0x19c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d106      	bne.n	80014ac <MCAL_UART_Init+0x5c>
		RCC_USART2_CLK_EN();
 800149e:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <MCAL_UART_Init+0x1a8>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a55      	ldr	r2, [pc, #340]	; (80015f8 <MCAL_UART_Init+0x1a8>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	e009      	b.n	80014c0 <MCAL_UART_Init+0x70>
	else if(USARTx == USART3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a53      	ldr	r2, [pc, #332]	; (80015fc <MCAL_UART_Init+0x1ac>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d105      	bne.n	80014c0 <MCAL_UART_Init+0x70>
		RCC_USART3_CLK_EN();
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <MCAL_UART_Init+0x1a8>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <MCAL_UART_Init+0x1a8>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014be:	61d3      	str	r3, [r2, #28]

	//2- enable UART_CR module
	USARTx->CR1 |= (1 << 13);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]

	//3- enable UART_CR mode
	USARTx->CR1 |= UART_Cfg->USART_Mode;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60da      	str	r2, [r3, #12]

	//4- enable UART_CR payload
	USARTx->CR1 |= UART_Cfg->PayLoad;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	7a12      	ldrb	r2, [r2, #8]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	60da      	str	r2, [r3, #12]

	//5- enable UART_CR parity
	USARTx->CR1 |= UART_Cfg->Parity;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	7a52      	ldrb	r2, [r2, #9]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60da      	str	r2, [r3, #12]

	//6- enable UART_CR2 stop bits
	USARTx->CR2 |= UART_Cfg->StopBit;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	7a92      	ldrb	r2, [r2, #10]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	611a      	str	r2, [r3, #16]

	//7- enable UART_CR3 flow ctrl
	USARTx->CR3 |= UART_Cfg->HW_Flow_CTRL;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	7ad2      	ldrb	r2, [r2, #11]
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	615a      	str	r2, [r3, #20]

	//8- Configure BRR value
	if(USARTx == USART1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <MCAL_UART_Init+0x194>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d105      	bne.n	8001526 <MCAL_UART_Init+0xd6>
	{
		Pclk = MCAL_RCC_GetPCLK2Freq();
 800151a:	f7ff fcf1 	bl	8000f00 <MCAL_RCC_GetPCLK2Freq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MCAL_UART_Init+0x1b0>)
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e004      	b.n	8001530 <MCAL_UART_Init+0xe0>
	}
	else
	{
		Pclk = MCAL_RCC_GetPCLK1Freq();
 8001526:	f7ff fcd5 	bl	8000ed4 <MCAL_RCC_GetPCLK1Freq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MCAL_UART_Init+0x1b0>)
 800152e:	601a      	str	r2, [r3, #0]
	}
	USARTx->BRR = USART_BRR_Register(Pclk, UART_Cfg->BaudRate);
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <MCAL_UART_Init+0x1b0>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	0119      	lsls	r1, r3, #4
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MCAL_UART_Init+0x1b0>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009a      	lsls	r2, r3, #2
 800154c:	441a      	add	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	fbb2 f2f3 	udiv	r2, r2, r3
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MCAL_UART_Init+0x1b0>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	fbb0 f3f3 	udiv	r3, r0, r3
 8001566:	2064      	movs	r0, #100	; 0x64
 8001568:	fb00 f303 	mul.w	r3, r0, r3
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4a24      	ldr	r2, [pc, #144]	; (8001604 <MCAL_UART_Init+0x1b4>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	ea41 0203 	orr.w	r2, r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]

	//9- enable UART interrupt and NVIC
	if(UART_Cfg->IRQ_EN != USART_IRQ__EN_NONE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7b1b      	ldrb	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d026      	beq.n	80015da <MCAL_UART_Init+0x18a>
	{
		USARTx->CR1 |= UART_Cfg->IRQ_EN;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	7b12      	ldrb	r2, [r2, #12]
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60da      	str	r2, [r3, #12]

		if(USARTx == USART1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <MCAL_UART_Init+0x194>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d106      	bne.n	80015b0 <MCAL_UART_Init+0x160>
			NVIC_USART1_IRQ37_Enable();
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MCAL_UART_Init+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <MCAL_UART_Init+0x1b8>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2)
			NVIC_USART2_IRQ38_Enable();
		else if(USARTx == USART3)
			NVIC_USART3_IRQ39_Enable();
	}
}
 80015ae:	e014      	b.n	80015da <MCAL_UART_Init+0x18a>
		else if(USARTx == USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <MCAL_UART_Init+0x19c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d106      	bne.n	80015c6 <MCAL_UART_Init+0x176>
			NVIC_USART2_IRQ38_Enable();
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MCAL_UART_Init+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MCAL_UART_Init+0x1b8>)
 80015be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	e009      	b.n	80015da <MCAL_UART_Init+0x18a>
		else if(USARTx == USART3)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <MCAL_UART_Init+0x1ac>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d105      	bne.n	80015da <MCAL_UART_Init+0x18a>
			NVIC_USART3_IRQ39_Enable();
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MCAL_UART_Init+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <MCAL_UART_Init+0x1b8>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6013      	str	r3, [r2, #0]
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40013800 	.word	0x40013800
 80015e8:	200000b0 	.word	0x200000b0
 80015ec:	40004400 	.word	0x40004400
 80015f0:	200000b4 	.word	0x200000b4
 80015f4:	200000b8 	.word	0x200000b8
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40004800 	.word	0x40004800
 8001600:	20000140 	.word	0x20000140
 8001604:	51eb851f 	.word	0x51eb851f
 8001608:	e000e104 	.word	0xe000e104

0800160c <MCAL_UART_GPIO_SetPins>:
 * @param [in]	- USARTx: where x can be (1..3 depending on device used)
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_GPIO_SetPins(USART_t* USARTx)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a2b      	ldr	r2, [pc, #172]	; (80016c4 <MCAL_UART_GPIO_SetPins+0xb8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d118      	bne.n	800164e <MCAL_UART_GPIO_SetPins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800161c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001620:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8001622:	2306      	movs	r3, #6
 8001624:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4619      	mov	r1, r3
 8001630:	4825      	ldr	r0, [pc, #148]	; (80016c8 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001632:	f7ff fb98 	bl	8000d66 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 800163c:	2301      	movs	r3, #1
 800163e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	4619      	mov	r1, r3
 8001646:	4820      	ldr	r0, [pc, #128]	; (80016c8 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001648:	f7ff fb8d 	bl	8000d66 <MCAL_GPIO_Init>
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 800164c:	e036      	b.n	80016bc <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <MCAL_UART_GPIO_SetPins+0xc0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d116      	bne.n	8001684 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8001656:	2304      	movs	r3, #4
 8001658:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800165a:	2306      	movs	r3, #6
 800165c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <MCAL_UART_GPIO_SetPins+0xbc>)
 800166a:	f7ff fb7c 	bl	8000d66 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800166e:	2308      	movs	r3, #8
 8001670:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8001672:	2301      	movs	r3, #1
 8001674:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	4812      	ldr	r0, [pc, #72]	; (80016c8 <MCAL_UART_GPIO_SetPins+0xbc>)
 800167e:	f7ff fb72 	bl	8000d66 <MCAL_GPIO_Init>
}
 8001682:	e01b      	b.n	80016bc <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <MCAL_UART_GPIO_SetPins+0xc4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d117      	bne.n	80016bc <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800168c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001690:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8001692:	2306      	movs	r3, #6
 8001694:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <MCAL_UART_GPIO_SetPins+0xc8>)
 80016a2:	f7ff fb60 	bl	8000d66 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80016a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016aa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MCAL_UART_GPIO_SetPins+0xc8>)
 80016b8:	f7ff fb55 	bl	8000d66 <MCAL_GPIO_Init>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40004800 	.word	0x40004800
 80016d4:	40010c00 	.word	0x40010c00

080016d8 <MCAL_UART_SendData>:
 * @param [in]	- PollingEn: define if the pooling is enable or not
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4613      	mov	r3, r2
 80016e4:	71fb      	strb	r3, [r7, #7]

	//1. wait TXE flag in SR until to be set
	if(PollingEn == enable)
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 80016ec:	bf00      	nop
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f9      	beq.n	80016ee <MCAL_UART_SendData+0x16>

	//0. select which USARTx
	UART_Config_t* USARTx_Config = NULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <MCAL_UART_SendData+0x68>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d103      	bne.n	800170e <MCAL_UART_SendData+0x36>
		USARTx_Config = GLOBAL_UART1_Config;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MCAL_UART_SendData+0x6c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00e      	b.n	800172c <MCAL_UART_SendData+0x54>
	else if(USARTx == USART2)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <MCAL_UART_SendData+0x70>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d103      	bne.n	800171e <MCAL_UART_SendData+0x46>
		USARTx_Config = GLOBAL_UART2_Config;
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <MCAL_UART_SendData+0x74>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e006      	b.n	800172c <MCAL_UART_SendData+0x54>
	else if(USARTx == USART3)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <MCAL_UART_SendData+0x78>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d102      	bne.n	800172c <MCAL_UART_SendData+0x54>
		USARTx_Config = GLOBAL_UART3_Config;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MCAL_UART_SendData+0x7c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	617b      	str	r3, [r7, #20]
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0x01FF);
	}
	else //8 bit word length
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0xFF);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	605a      	str	r2, [r3, #4]
	}
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40013800 	.word	0x40013800
 8001744:	200000b0 	.word	0x200000b0
 8001748:	40004400 	.word	0x40004400
 800174c:	200000b4 	.word	0x200000b4
 8001750:	40004800 	.word	0x40004800
 8001754:	200000b8 	.word	0x200000b8

08001758 <MCAL_UART_SendString>:

void MCAL_UART_SendString(USART_t* USARTx, uint8_t* pTxString, uint16_t Delimiter)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	80fb      	strh	r3, [r7, #6]
	uint16_t LOC_Counter = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	82fb      	strh	r3, [r7, #22]
	while(pTxString[LOC_Counter] != Delimiter)
 800176a:	e00a      	b.n	8001782 <MCAL_UART_SendString+0x2a>
	{
		MCAL_UART_SendData(USARTx,(uint16_t *) &pTxString[LOC_Counter], enable);
 800176c:	8afb      	ldrh	r3, [r7, #22]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4413      	add	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff ffae 	bl	80016d8 <MCAL_UART_SendData>
		LOC_Counter++;
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	3301      	adds	r3, #1
 8001780:	82fb      	strh	r3, [r7, #22]
	while(pTxString[LOC_Counter] != Delimiter)
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	88fa      	ldrh	r2, [r7, #6]
 800178e:	429a      	cmp	r2, r3
 8001790:	d1ec      	bne.n	800176c <MCAL_UART_SendString+0x14>
	}
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <MCAL_UART_ReceiveData>:

void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	4613      	mov	r3, r2
 80017a8:	71fb      	strb	r3, [r7, #7]
	//0. wait TXE flag in SR until to be set
	if(PollingEn == enable)
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 80017b0:	bf00      	nop
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f9      	beq.n	80017b2 <MCAL_UART_ReceiveData+0x16>

	//1. select which USARTx
	UART_Config_t* USARTx_Config = NULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a17      	ldr	r2, [pc, #92]	; (8001824 <MCAL_UART_ReceiveData+0x88>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d103      	bne.n	80017d2 <MCAL_UART_ReceiveData+0x36>
		USARTx_Config = GLOBAL_UART1_Config;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MCAL_UART_ReceiveData+0x8c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e00e      	b.n	80017f0 <MCAL_UART_ReceiveData+0x54>
	else if(USARTx == USART2)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a15      	ldr	r2, [pc, #84]	; (800182c <MCAL_UART_ReceiveData+0x90>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d103      	bne.n	80017e2 <MCAL_UART_ReceiveData+0x46>
		USARTx_Config = GLOBAL_UART2_Config;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MCAL_UART_ReceiveData+0x94>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e006      	b.n	80017f0 <MCAL_UART_ReceiveData+0x54>
	else if(USARTx == USART3)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <MCAL_UART_ReceiveData+0x98>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d102      	bne.n	80017f0 <MCAL_UART_ReceiveData+0x54>
		USARTx_Config = GLOBAL_UART3_Config;
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <MCAL_UART_ReceiveData+0x9c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF);
	}

	else //8 bit word length
	{
		if(USARTx_Config->Parity == USART_PARITY_NONE)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	7a5b      	ldrb	r3, [r3, #9]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d107      	bne.n	8001808 <MCAL_UART_ReceiveData+0x6c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	801a      	strh	r2, [r3, #0]

		else //parity ON
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F);
	}

}
 8001806:	e007      	b.n	8001818 <MCAL_UART_ReceiveData+0x7c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	b29b      	uxth	r3, r3
 800180e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001812:	b29a      	uxth	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	801a      	strh	r2, [r3, #0]
}
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40013800 	.word	0x40013800
 8001828:	200000b0 	.word	0x200000b0
 800182c:	40004400 	.word	0x40004400
 8001830:	200000b4 	.word	0x200000b4
 8001834:	40004800 	.word	0x40004800
 8001838:	200000b8 	.word	0x200000b8

0800183c <USART1_IRQHandler>:
 * 								ISR Functions
 * =========================================================================
 */

void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	GLOBAL_UART1_Config->IRQ_CallBack();
 8001840:	4b02      	ldr	r3, [pc, #8]	; (800184c <USART1_IRQHandler+0x10>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	4798      	blx	r3
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000b0 	.word	0x200000b0

08001850 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	GLOBAL_UART2_Config->IRQ_CallBack();
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <USART2_IRQHandler+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	4798      	blx	r3
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000b4 	.word	0x200000b4

08001864 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	GLOBAL_UART3_Config->IRQ_CallBack();
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <USART3_IRQHandler+0x10>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	4798      	blx	r3
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200000b8 	.word	0x200000b8

08001878 <APP_CLK_init>:

/* ==============================================
 * 		Initialization  & Start FCNs
 * ==============================================*/
static void APP_CLK_init(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	//1. GPIO port A clock enable
	RCC_GPIOA_CLK_EN();
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <APP_CLK_init+0x30>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <APP_CLK_init+0x30>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
	//2. GPIO port B clock enable
	RCC_GPIOB_CLK_EN();
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <APP_CLK_init+0x30>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <APP_CLK_init+0x30>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6193      	str	r3, [r2, #24]
	//3. AFIO clock enable
	RCC_AFIO_CLK_EN();
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <APP_CLK_init+0x30>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <APP_CLK_init+0x30>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6193      	str	r3, [r2, #24]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000

080018ac <APP_UART_init>:
{

}

static void APP_UART_init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

	uartCfg.BaudRate = USART_BAUDRATE_115200;
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <APP_UART_init+0x54>)
 80018b2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b6:	605a      	str	r2, [r3, #4]
	uartCfg.HW_Flow_CTRL = HW_FLOW_CTRL_CTS_NONE;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <APP_UART_init+0x54>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	72da      	strb	r2, [r3, #11]
	//	uartCfg.IRQ_EN = USART_IRQ__EN_NONE;
	//	uartCfg.IRQ_CallBack = NULL;
	uartCfg.IRQ_EN = USART_IRQ__EN_RXNEIE;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <APP_UART_init+0x54>)
 80018c0:	2220      	movs	r2, #32
 80018c2:	731a      	strb	r2, [r3, #12]
	uartCfg.IRQ_CallBack = ECU2_UART_IRQ_CallBack;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <APP_UART_init+0x54>)
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <APP_UART_init+0x58>)
 80018c8:	611a      	str	r2, [r3, #16]
	uartCfg.Parity = USART_PARITY_NONE;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <APP_UART_init+0x54>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	725a      	strb	r2, [r3, #9]
	uartCfg.PayLoad = USART_PAYLOAD_8B;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <APP_UART_init+0x54>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	721a      	strb	r2, [r3, #8]
	uartCfg.StopBit = UASRT_STOPBIT_1;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <APP_UART_init+0x54>)
 80018d8:	2200      	movs	r2, #0
 80018da:	729a      	strb	r2, [r3, #10]
	uartCfg.USART_Mode = USART_MODE_Tx_Rx;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <APP_UART_init+0x54>)
 80018de:	220c      	movs	r2, #12
 80018e0:	701a      	strb	r2, [r3, #0]

	MCAL_UART_Init(USART1, &uartCfg);
 80018e2:	4907      	ldr	r1, [pc, #28]	; (8001900 <APP_UART_init+0x54>)
 80018e4:	4808      	ldr	r0, [pc, #32]	; (8001908 <APP_UART_init+0x5c>)
 80018e6:	f7ff fdb3 	bl	8001450 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <APP_UART_init+0x5c>)
 80018ec:	f7ff fe8e 	bl	800160c <MCAL_UART_GPIO_SetPins>

	//LCD_clear_screen();
	//HAL_LCD_Send_String("UART READY");
	MCAL_UART_SendString(USART1, addString("***************************** ADMIN DASHBOARD *****************************\r\n"), '\0');
 80018f0:	2200      	movs	r2, #0
 80018f2:	4906      	ldr	r1, [pc, #24]	; (800190c <APP_UART_init+0x60>)
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <APP_UART_init+0x5c>)
 80018f6:	f7ff ff2f 	bl	8001758 <MCAL_UART_SendString>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000144 	.word	0x20000144
 8001904:	08002fc1 	.word	0x08002fc1
 8001908:	40013800 	.word	0x40013800
 800190c:	08003208 	.word	0x08003208

08001910 <APP_SPI_init>:

static void APP_SPI_init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
	//PA7 : MOSI

	SPI_Config_t spi1Cfg;

	/* Common Configuration */
	spi1Cfg.Phase = SPI_PHASE_Second_Edge;
 8001916:	2301      	movs	r3, #1
 8001918:	823b      	strh	r3, [r7, #16]
	spi1Cfg.Polarity = SPI_IDEAL_High;
 800191a:	2302      	movs	r3, #2
 800191c:	81fb      	strh	r3, [r7, #14]
	spi1Cfg.Frame_Format = SPI_FRAME_MSB;
 800191e:	2300      	movs	r3, #0
 8001920:	813b      	strh	r3, [r7, #8]
	spi1Cfg.Data_Size = SPI_DATA_8_Bit;
 8001922:	2300      	movs	r3, #0
 8001924:	817b      	strh	r3, [r7, #10]
	spi1Cfg.Baudrate_Prescaler = SPI_BAUDRATEPRESCALER_4;
 8001926:	2308      	movs	r3, #8
 8001928:	82fb      	strh	r3, [r7, #22]
	spi1Cfg.Comm_Mode = SPI_COMM_2Lines_FD;
 800192a:	2300      	movs	r3, #0
 800192c:	80fb      	strh	r3, [r7, #6]

#ifdef ECU2_Act_As_Master
	spi1Cfg.Mode = SPI_MODE_Master;
 800192e:	2304      	movs	r3, #4
 8001930:	80bb      	strh	r3, [r7, #4]
	spi1Cfg.IRQ_Enable = SPI_IRQ_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	833b      	strh	r3, [r7, #24]
	spi1Cfg.P_ISR_CallBack = NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
	spi1Cfg.NSS = SPI_NSS_Software_Slave_RESET;
 800193a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193e:	81bb      	strh	r3, [r7, #12]

	/* Initialize SPI Reg & pin */
	MCAL_SPI_Init(SPI1, &spi1Cfg);
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <APP_SPI_init+0x98>)
 8001946:	f7ff fc27 	bl	8001198 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_SetPins(SPI1);
 800194a:	4817      	ldr	r0, [pc, #92]	; (80019a8 <APP_SPI_init+0x98>)
 800194c:	f7ff faee 	bl	8000f2c <MCAL_SPI_GPIO_SetPins>

	/*------ Configure SS Pins ------*/
	GPIO_PinConfig_t pinCfg;

	/* Configure SS1 for ECU1 on PA3 by GPIO */
	pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001950:	2308      	movs	r3, #8
 8001952:	803b      	strh	r3, [r7, #0]
	pinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2304      	movs	r3, #4
 8001956:	70bb      	strb	r3, [r7, #2]
	pinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001958:	2301      	movs	r3, #1
 800195a:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOA, &pinCfg);
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4812      	ldr	r0, [pc, #72]	; (80019ac <APP_SPI_init+0x9c>)
 8001962:	f7ff fa00 	bl	8000d66 <MCAL_GPIO_Init>
	/* Force the SS to high idle Mode */
	MCAL_GPIO_WritePin(GPIOA, pinCfg.GPIO_PinNumber, GPIO_PIN_SET);
 8001966:	883b      	ldrh	r3, [r7, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4619      	mov	r1, r3
 800196c:	480f      	ldr	r0, [pc, #60]	; (80019ac <APP_SPI_init+0x9c>)
 800196e:	f7ff fa62 	bl	8000e36 <MCAL_GPIO_WritePin>


	/* Configure SS2 for ECU3 on PA1 by GPIO */
	pinCfg.GPIO_PinNumber = Exit_SS;
 8001972:	2302      	movs	r3, #2
 8001974:	803b      	strh	r3, [r7, #0]
	pinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2304      	movs	r3, #4
 8001978:	70bb      	strb	r3, [r7, #2]
	pinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800197a:	2301      	movs	r3, #1
 800197c:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(SS_Port, &pinCfg);
 800197e:	463b      	mov	r3, r7
 8001980:	4619      	mov	r1, r3
 8001982:	480a      	ldr	r0, [pc, #40]	; (80019ac <APP_SPI_init+0x9c>)
 8001984:	f7ff f9ef 	bl	8000d66 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(SS_Port, &pinCfg, GPIO_PIN_SET);
 8001988:	463b      	mov	r3, r7
 800198a:	2201      	movs	r2, #1
 800198c:	4619      	mov	r1, r3
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <APP_SPI_init+0x9c>)
 8001990:	f7ff fa51 	bl	8000e36 <MCAL_GPIO_WritePin>

	/* Force the SS to high idle Mode */
	MCAL_GPIO_WritePin(GPIOA, pinCfg.GPIO_PinNumber, GPIO_PIN_SET);
 8001994:	883b      	ldrh	r3, [r7, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	4619      	mov	r1, r3
 800199a:	4804      	ldr	r0, [pc, #16]	; (80019ac <APP_SPI_init+0x9c>)
 800199c:	f7ff fa4b 	bl	8000e36 <MCAL_GPIO_WritePin>

	//	LCD_clear_screen();
	//	HAL_LCD_Send_String("SPI READY       MODE: Master    ");
	//	HAL_LCD_Send_String("SS1: PA3        SS2: PA1");
	//	delay_ms(500);
}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013000 	.word	0x40013000
 80019ac:	40010800 	.word	0x40010800

080019b0 <APP_EXTI_init>:

static void APP_EXTI_init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
	EXTI_PinConfig_t EXTI_cfg;

	/*------ Entrance EXTI Configure ------*/
	EXTI_cfg.EXTI_PIN = Entrance_Pin;
 80019b6:	4a11      	ldr	r2, [pc, #68]	; (80019fc <APP_EXTI_init+0x4c>)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80019bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger_Case = EXTI_TRIGGER_RISING;
 80019c0:	2300      	movs	r3, #0
 80019c2:	743b      	strb	r3, [r7, #16]
	EXTI_cfg.IRQ_EN = EXTI_IRQ_ENABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	747b      	strb	r3, [r7, #17]
	EXTI_cfg.P_IRQ_CallBack = ECU2_Entrance_EXT_IRQ_Callback;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <APP_EXTI_init+0x50>)
 80019ca:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_GPIO_Init(&EXTI_cfg);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f84a 	bl	8000a68 <MCAL_EXTI_GPIO_Init>

	/*------ Exit EXTI Configure ------*/
	EXTI_cfg.EXTI_PIN = Exit_Pin;
 80019d4:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <APP_EXTI_init+0x54>)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger_Case = EXTI_TRIGGER_RISING;
 80019de:	2300      	movs	r3, #0
 80019e0:	743b      	strb	r3, [r7, #16]
	EXTI_cfg.IRQ_EN = EXTI_IRQ_ENABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	747b      	strb	r3, [r7, #17]
	EXTI_cfg.P_IRQ_CallBack = ECU2_Exit_EXT_IRQ_Callback;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <APP_EXTI_init+0x58>)
 80019e8:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_GPIO_Init(&EXTI_cfg);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f83b 	bl	8000a68 <MCAL_EXTI_GPIO_Init>

	//	LCD_clear_screen();
	//	HAL_LCD_Send_String("Entrance EXTI   Exit EXTI       Both READY");
	//	delay_ms(500);
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	08003258 	.word	0x08003258
 8001a00:	08003021 	.word	0x08003021
 8001a04:	08003264 	.word	0x08003264
 8001a08:	080030a9 	.word	0x080030a9

08001a0c <APP_Start_Tringer_init>:

static void APP_Start_Tringer_init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t pinCfg;
	pinCfg.GPIO_PinNumber = Start_Trigger_Pin;
 8001a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a16:	80bb      	strh	r3, [r7, #4]
	pinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	71bb      	strb	r3, [r7, #6]
	pinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <APP_Start_Tringer_init+0x28>)
 8001a26:	f7ff f99e 	bl	8000d66 <MCAL_GPIO_Init>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40010800 	.word	0x40010800

08001a38 <APP_Start_Tringer_Run>:

static void APP_Start_Tringer_Run(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, Start_Trigger_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a42:	4802      	ldr	r0, [pc, #8]	; (8001a4c <APP_Start_Tringer_Run+0x14>)
 8001a44:	f7ff f9f7 	bl	8000e36 <MCAL_GPIO_WritePin>
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40010800 	.word	0x40010800

08001a50 <LCD_Start>:

/* ==============================================
 * 					LCD FCNs
 * ==============================================*/
void LCD_Start(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	LCD_clear_screen();
 8001a54:	f7fe fcb6 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String(Welcome_Message);
 8001a58:	4806      	ldr	r0, [pc, #24]	; (8001a74 <LCD_Start+0x24>)
 8001a5a:	f7fe fe36 	bl	80006ca <HAL_LCD_Send_String>
	HAL_LCD_Send_Number(Glob_Available_Slots);
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <LCD_Start+0x28>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fe1e 	bl	80006a4 <HAL_LCD_Send_Number>
	delay_ms(1000);
 8001a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a6c:	f7fe fcd8 	bl	8000420 <delay_ms>
	//			HAL_LCD_Send_Data(sGlobDriverArr[Glob_ArrIndex].ID[j]);
	//		}
	//	}

	//PrintAllDrivers();
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	08003270 	.word	0x08003270
 8001a78:	20000085 	.word	0x20000085

08001a7c <LCD_Access_Accepted>:

void LCD_Access_Accepted(uint8_t adminIndex)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	LCD_clear_screen();
 8001a86:	f7fe fc9d 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("Hello ");
 8001a8a:	481b      	ldr	r0, [pc, #108]	; (8001af8 <LCD_Access_Accepted+0x7c>)
 8001a8c:	f7fe fe1d 	bl	80006ca <HAL_LCD_Send_String>

	/*	print admin name	*/
	for(int j=0; j<NAME_MAX_SIZE; j++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e019      	b.n	8001aca <LCD_Access_Accepted+0x4e>
	{
		if(sGlobAdminArr[adminIndex].name[j] == '\0')
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <LCD_Access_Accepted+0x80>)
 8001a9a:	2116      	movs	r1, #22
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	441a      	add	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d012      	beq.n	8001ad2 <LCD_Access_Accepted+0x56>
			break;
		else
			HAL_LCD_Send_Data(sGlobAdminArr[adminIndex].name[j]);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <LCD_Access_Accepted+0x80>)
 8001ab0:	2116      	movs	r1, #22
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	441a      	add	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd84 	bl	80005cc <HAL_LCD_Send_Data>
	for(int j=0; j<NAME_MAX_SIZE; j++)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	dde2      	ble.n	8001a96 <LCD_Access_Accepted+0x1a>
 8001ad0:	e000      	b.n	8001ad4 <LCD_Access_Accepted+0x58>
			break;
 8001ad2:	bf00      	nop
	}
	HAL_LCD_Set_Courser(3, 1);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f7fe fc16 	bl	8000308 <HAL_LCD_Set_Courser>
	HAL_LCD_Send_String("Wellcome Back!");
 8001adc:	4808      	ldr	r0, [pc, #32]	; (8001b00 <LCD_Access_Accepted+0x84>)
 8001ade:	f7fe fdf4 	bl	80006ca <HAL_LCD_Send_String>
	delay_ms(1000);
 8001ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae6:	f7fe fc9b 	bl	8000420 <delay_ms>
	LCD_clear_screen();
 8001aea:	f7fe fc6b 	bl	80003c4 <LCD_clear_screen>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	080032b0 	.word	0x080032b0
 8001afc:	20000164 	.word	0x20000164
 8001b00:	080032b8 	.word	0x080032b8

08001b04 <LCD_Access_Denied>:

void LCD_Access_Denied(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	LCD_clear_screen();
 8001b08:	f7fe fc5c 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("Access Denied...");
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <LCD_Access_Denied+0x20>)
 8001b0e:	f7fe fddc 	bl	80006ca <HAL_LCD_Send_String>
	delay_ms(750);
 8001b12:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001b16:	f7fe fc83 	bl	8000420 <delay_ms>
	LCD_clear_screen();
 8001b1a:	f7fe fc53 	bl	80003c4 <LCD_clear_screen>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	080032c8 	.word	0x080032c8

08001b28 <LCD_Option_Menu>:

void LCD_Option_Menu(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DISP_ON);
 8001b2c:	200c      	movs	r0, #12
 8001b2e:	f7fe fced 	bl	800050c <HAL_LCD_Send_Command>
	LCD_clear_screen();
 8001b32:	f7fe fc47 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("ADMIN OPTIONS:");
 8001b36:	480f      	ldr	r0, [pc, #60]	; (8001b74 <LCD_Option_Menu+0x4c>)
 8001b38:	f7fe fdc7 	bl	80006ca <HAL_LCD_Send_String>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 8001b3c:	20c0      	movs	r0, #192	; 0xc0
 8001b3e:	f7fe fce5 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_String("  1- Add Driver");
 8001b42:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LCD_Option_Menu+0x50>)
 8001b44:	f7fe fdc1 	bl	80006ca <HAL_LCD_Send_String>
	delay_ms(500);
 8001b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b4c:	f7fe fc68 	bl	8000420 <delay_ms>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 8001b50:	2090      	movs	r0, #144	; 0x90
 8001b52:	f7fe fcdb 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_String("  2- Delete Driver");
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <LCD_Option_Menu+0x54>)
 8001b58:	f7fe fdb7 	bl	80006ca <HAL_LCD_Send_String>
	delay_ms(500);
 8001b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b60:	f7fe fc5e 	bl	8000420 <delay_ms>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8001b64:	20d0      	movs	r0, #208	; 0xd0
 8001b66:	f7fe fcd1 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_String("  3- Edit Driver");
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <LCD_Option_Menu+0x58>)
 8001b6c:	f7fe fdad 	bl	80006ca <HAL_LCD_Send_String>

	/*delay_ms(3000);
	HAL_LCD_Send_Command(LCD_DISP_ON);
	LCD_clear_screen();
	HAL_LCD_Send_String("To exit press #");*/
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	080032dc 	.word	0x080032dc
 8001b78:	080032ec 	.word	0x080032ec
 8001b7c:	080032fc 	.word	0x080032fc
 8001b80:	08003310 	.word	0x08003310

08001b84 <LCD_Delete_Menu>:

void LCD_Delete_Menu(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DISP_ON);
 8001b88:	200c      	movs	r0, #12
 8001b8a:	f7fe fcbf 	bl	800050c <HAL_LCD_Send_Command>
	LCD_clear_screen();
 8001b8e:	f7fe fc19 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("DELETE OPTIONS:");
 8001b92:	4812      	ldr	r0, [pc, #72]	; (8001bdc <LCD_Delete_Menu+0x58>)
 8001b94:	f7fe fd99 	bl	80006ca <HAL_LCD_Send_String>
	HAL_LCD_Set_Courser(2, 0);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f7fe fbb4 	bl	8000308 <HAL_LCD_Set_Courser>
	HAL_LCD_Send_String("1- Delete Driver");
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <LCD_Delete_Menu+0x5c>)
 8001ba2:	f7fe fd92 	bl	80006ca <HAL_LCD_Send_String>
	HAL_LCD_Set_Courser(3, 0);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f7fe fbad 	bl	8000308 <HAL_LCD_Set_Courser>
	HAL_LCD_Send_String("2- Delete All");
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LCD_Delete_Menu+0x60>)
 8001bb0:	f7fe fd8b 	bl	80006ca <HAL_LCD_Send_String>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8001bb4:	20d0      	movs	r0, #208	; 0xd0
 8001bb6:	f7fe fca9 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_String("3- MAIN SCREEN");
 8001bba:	480b      	ldr	r0, [pc, #44]	; (8001be8 <LCD_Delete_Menu+0x64>)
 8001bbc:	f7fe fd85 	bl	80006ca <HAL_LCD_Send_String>

	delay_ms(1000);
 8001bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc4:	f7fe fc2c 	bl	8000420 <delay_ms>
	HAL_LCD_Send_Command(LCD_DISP_ON);
 8001bc8:	200c      	movs	r0, #12
 8001bca:	f7fe fc9f 	bl	800050c <HAL_LCD_Send_Command>
	LCD_clear_screen();
 8001bce:	f7fe fbf9 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("To exit press #");
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <LCD_Delete_Menu+0x68>)
 8001bd4:	f7fe fd79 	bl	80006ca <HAL_LCD_Send_String>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	08003324 	.word	0x08003324
 8001be0:	08003334 	.word	0x08003334
 8001be4:	08003348 	.word	0x08003348
 8001be8:	08003358 	.word	0x08003358
 8001bec:	08003368 	.word	0x08003368

08001bf0 <LCD_Delete_Process>:

void LCD_Delete_Process(uint8_t status)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	HAL_LCD_Send_Command(LCD_DISP_ON);
 8001bfa:	200c      	movs	r0, #12
 8001bfc:	f7fe fc86 	bl	800050c <HAL_LCD_Send_Command>
	LCD_clear_screen();
 8001c00:	f7fe fbe0 	bl	80003c4 <LCD_clear_screen>
	if(status == SUCCESSFUL_OPERATION)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b53      	cmp	r3, #83	; 0x53
 8001c08:	d118      	bne.n	8001c3c <LCD_Delete_Process+0x4c>
	{
		HAL_LCD_Send_String("SUCCESSFUL");
 8001c0a:	481c      	ldr	r0, [pc, #112]	; (8001c7c <LCD_Delete_Process+0x8c>)
 8001c0c:	f7fe fd5d 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 8001c10:	20c0      	movs	r0, #192	; 0xc0
 8001c12:	f7fe fc7b 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("DELETE");
 8001c16:	481a      	ldr	r0, [pc, #104]	; (8001c80 <LCD_Delete_Process+0x90>)
 8001c18:	f7fe fd57 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 8001c1c:	2090      	movs	r0, #144	; 0x90
 8001c1e:	f7fe fc75 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("PROCESS");
 8001c22:	4818      	ldr	r0, [pc, #96]	; (8001c84 <LCD_Delete_Process+0x94>)
 8001c24:	f7fe fd51 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8001c28:	20d0      	movs	r0, #208	; 0xd0
 8001c2a:	f7fe fc6f 	bl	800050c <HAL_LCD_Send_Command>
		delay_ms(750);
 8001c2e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001c32:	f7fe fbf5 	bl	8000420 <delay_ms>
		LCD_clear_screen();
 8001c36:	f7fe fbc5 	bl	80003c4 <LCD_clear_screen>
		HAL_LCD_Send_String("PROCESS");
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
		delay_ms(750);
		LCD_clear_screen();
	}
}
 8001c3a:	e01a      	b.n	8001c72 <LCD_Delete_Process+0x82>
	else if (status == FAILED_OPERATION)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b46      	cmp	r3, #70	; 0x46
 8001c40:	d117      	bne.n	8001c72 <LCD_Delete_Process+0x82>
		HAL_LCD_Send_String("FAAILED");
 8001c42:	4811      	ldr	r0, [pc, #68]	; (8001c88 <LCD_Delete_Process+0x98>)
 8001c44:	f7fe fd41 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 8001c48:	20c0      	movs	r0, #192	; 0xc0
 8001c4a:	f7fe fc5f 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("DELETE");
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <LCD_Delete_Process+0x90>)
 8001c50:	f7fe fd3b 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 8001c54:	2090      	movs	r0, #144	; 0x90
 8001c56:	f7fe fc59 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("PROCESS");
 8001c5a:	480a      	ldr	r0, [pc, #40]	; (8001c84 <LCD_Delete_Process+0x94>)
 8001c5c:	f7fe fd35 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8001c60:	20d0      	movs	r0, #208	; 0xd0
 8001c62:	f7fe fc53 	bl	800050c <HAL_LCD_Send_Command>
		delay_ms(750);
 8001c66:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001c6a:	f7fe fbd9 	bl	8000420 <delay_ms>
		LCD_clear_screen();
 8001c6e:	f7fe fba9 	bl	80003c4 <LCD_clear_screen>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	08003378 	.word	0x08003378
 8001c80:	08003384 	.word	0x08003384
 8001c84:	0800338c 	.word	0x0800338c
 8001c88:	08003394 	.word	0x08003394

08001c8c <LCD_Edit_Process>:

void LCD_Edit_Process(uint8_t status)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	HAL_LCD_Send_Command(LCD_DISP_ON);
 8001c96:	200c      	movs	r0, #12
 8001c98:	f7fe fc38 	bl	800050c <HAL_LCD_Send_Command>
	LCD_clear_screen();
 8001c9c:	f7fe fb92 	bl	80003c4 <LCD_clear_screen>
	if(status == SUCCESSFUL_OPERATION)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b53      	cmp	r3, #83	; 0x53
 8001ca4:	d118      	bne.n	8001cd8 <LCD_Edit_Process+0x4c>
	{
		HAL_LCD_Send_String("SUCCESSFUL");
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <LCD_Edit_Process+0x8c>)
 8001ca8:	f7fe fd0f 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 8001cac:	20c0      	movs	r0, #192	; 0xc0
 8001cae:	f7fe fc2d 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("EDIT");
 8001cb2:	481a      	ldr	r0, [pc, #104]	; (8001d1c <LCD_Edit_Process+0x90>)
 8001cb4:	f7fe fd09 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 8001cb8:	2090      	movs	r0, #144	; 0x90
 8001cba:	f7fe fc27 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("PROCESS");
 8001cbe:	4818      	ldr	r0, [pc, #96]	; (8001d20 <LCD_Edit_Process+0x94>)
 8001cc0:	f7fe fd03 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8001cc4:	20d0      	movs	r0, #208	; 0xd0
 8001cc6:	f7fe fc21 	bl	800050c <HAL_LCD_Send_Command>
		delay_ms(750);
 8001cca:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001cce:	f7fe fba7 	bl	8000420 <delay_ms>
		LCD_clear_screen();
 8001cd2:	f7fe fb77 	bl	80003c4 <LCD_clear_screen>
		HAL_LCD_Send_String("PROCESS");
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
		delay_ms(750);
		LCD_clear_screen();
	}
}
 8001cd6:	e01a      	b.n	8001d0e <LCD_Edit_Process+0x82>
	else if (status == FAILED_OPERATION)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b46      	cmp	r3, #70	; 0x46
 8001cdc:	d117      	bne.n	8001d0e <LCD_Edit_Process+0x82>
		HAL_LCD_Send_String("FAAILED");
 8001cde:	4811      	ldr	r0, [pc, #68]	; (8001d24 <LCD_Edit_Process+0x98>)
 8001ce0:	f7fe fcf3 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 8001ce4:	20c0      	movs	r0, #192	; 0xc0
 8001ce6:	f7fe fc11 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("EDIT");
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <LCD_Edit_Process+0x90>)
 8001cec:	f7fe fced 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 8001cf0:	2090      	movs	r0, #144	; 0x90
 8001cf2:	f7fe fc0b 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("PROCESS");
 8001cf6:	480a      	ldr	r0, [pc, #40]	; (8001d20 <LCD_Edit_Process+0x94>)
 8001cf8:	f7fe fce7 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8001cfc:	20d0      	movs	r0, #208	; 0xd0
 8001cfe:	f7fe fc05 	bl	800050c <HAL_LCD_Send_Command>
		delay_ms(750);
 8001d02:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001d06:	f7fe fb8b 	bl	8000420 <delay_ms>
		LCD_clear_screen();
 8001d0a:	f7fe fb5b 	bl	80003c4 <LCD_clear_screen>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	08003378 	.word	0x08003378
 8001d1c:	0800339c 	.word	0x0800339c
 8001d20:	0800338c 	.word	0x0800338c
 8001d24:	08003394 	.word	0x08003394

08001d28 <Fill_Admins_Data>:

/* ==============================================
 * 					SYSTEM FCNs
 * ==============================================*/
static void Fill_Admins_Data(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

	// 1st Admin name
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e019      	b.n	8001d68 <Fill_Admins_Data+0x40>
	{
		if(admin1[i] != '\0')
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <Fill_Admins_Data+0x138>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <Fill_Admins_Data+0x2a>
			sGlobAdminArr[0].name[i] = admin1[i];
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4945      	ldr	r1, [pc, #276]	; (8001e60 <Fill_Admins_Data+0x138>)
 8001d4a:	5c89      	ldrb	r1, [r1, r2]
 8001d4c:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001d4e:	54d1      	strb	r1, [r2, r3]
 8001d50:	e005      	b.n	8001d5e <Fill_Admins_Data+0x36>
		else
		{
			sGlobAdminArr[0].name[i] = '\0';
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a43      	ldr	r2, [pc, #268]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	54d1      	strb	r1, [r2, r3]
			break;
 8001d5c:	e008      	b.n	8001d70 <Fill_Admins_Data+0x48>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b09      	cmp	r3, #9
 8001d6e:	dde1      	ble.n	8001d34 <Fill_Admins_Data+0xc>
		}
	}
	// 1st Admin password
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e01c      	b.n	8001db2 <Fill_Admins_Data+0x8a>
	{
		if(pasword1[i] != '\0')
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3a      	ldr	r2, [pc, #232]	; (8001e68 <Fill_Admins_Data+0x140>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00a      	beq.n	8001d9a <Fill_Admins_Data+0x72>
			sGlobAdminArr[0].password[i] = pasword1[i];
 8001d84:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4936      	ldr	r1, [pc, #216]	; (8001e68 <Fill_Admins_Data+0x140>)
 8001d8e:	5c89      	ldrb	r1, [r1, r2]
 8001d90:	4a34      	ldr	r2, [pc, #208]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001d92:	4413      	add	r3, r2
 8001d94:	460a      	mov	r2, r1
 8001d96:	72da      	strb	r2, [r3, #11]
 8001d98:	e006      	b.n	8001da8 <Fill_Admins_Data+0x80>
		else
		{
			sGlobAdminArr[0].password[i] = '\0';
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001da0:	4413      	add	r3, r2
 8001da2:	2200      	movs	r2, #0
 8001da4:	72da      	strb	r2, [r3, #11]
			break;
 8001da6:	e008      	b.n	8001dba <Fill_Admins_Data+0x92>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	ddde      	ble.n	8001d78 <Fill_Admins_Data+0x50>
		}
	}

	//	2st Admin name
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e01c      	b.n	8001dfc <Fill_Admins_Data+0xd4>
	{
		if(admin2[i] != '\0')
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <Fill_Admins_Data+0x144>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <Fill_Admins_Data+0xbc>
			sGlobAdminArr[1].name[i] = admin2[i];
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4925      	ldr	r1, [pc, #148]	; (8001e6c <Fill_Admins_Data+0x144>)
 8001dd8:	5c89      	ldrb	r1, [r1, r2]
 8001dda:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001ddc:	4413      	add	r3, r2
 8001dde:	460a      	mov	r2, r1
 8001de0:	759a      	strb	r2, [r3, #22]
 8001de2:	e006      	b.n	8001df2 <Fill_Admins_Data+0xca>
		else
		{
			sGlobAdminArr[1].name[i] = '\0';
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001dea:	4413      	add	r3, r2
 8001dec:	2200      	movs	r2, #0
 8001dee:	759a      	strb	r2, [r3, #22]
			break;
 8001df0:	e008      	b.n	8001e04 <Fill_Admins_Data+0xdc>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	ddde      	ble.n	8001dc2 <Fill_Admins_Data+0x9a>
		}
	}
	//	2st Admin password
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e01e      	b.n	8001e4a <Fill_Admins_Data+0x122>
	{
		if(pasword2[i] != '\0')
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <Fill_Admins_Data+0x148>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <Fill_Admins_Data+0x108>
			sGlobAdminArr[1].password[i] = pasword2[i];
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4913      	ldr	r1, [pc, #76]	; (8001e70 <Fill_Admins_Data+0x148>)
 8001e22:	5c89      	ldrb	r1, [r1, r2]
 8001e24:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001e26:	4413      	add	r3, r2
 8001e28:	460a      	mov	r2, r1
 8001e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001e2e:	e007      	b.n	8001e40 <Fill_Admins_Data+0x118>
		else
		{
			sGlobAdminArr[1].password[i] = '\0';
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <Fill_Admins_Data+0x13c>)
 8001e36:	4413      	add	r3, r2
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 8001e3e:	e008      	b.n	8001e52 <Fill_Admins_Data+0x12a>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <Fill_Admins_Data+0x134>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	dddc      	ble.n	8001e0c <Fill_Admins_Data+0xe4>
		}
	}
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200000c0 	.word	0x200000c0
 8001e60:	2000002c 	.word	0x2000002c
 8001e64:	20000164 	.word	0x20000164
 8001e68:	20000034 	.word	0x20000034
 8001e6c:	2000003c 	.word	0x2000003c
 8001e70:	20000048 	.word	0x20000048

08001e74 <Fill_Drivers_Data>:

static void Fill_Drivers_Data(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

	// 1st Driver
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e019      	b.n	8001eb4 <Fill_Drivers_Data+0x40>
	{
		if(driver1[i] != '\0')
 8001e80:	4b77      	ldr	r3, [pc, #476]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a77      	ldr	r2, [pc, #476]	; (8002064 <Fill_Drivers_Data+0x1f0>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <Fill_Drivers_Data+0x2a>
			sGlobDriverArr[0].name[i] = driver1[i];
 8001e8c:	4b74      	ldr	r3, [pc, #464]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b73      	ldr	r3, [pc, #460]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4973      	ldr	r1, [pc, #460]	; (8002064 <Fill_Drivers_Data+0x1f0>)
 8001e96:	5c89      	ldrb	r1, [r1, r2]
 8001e98:	4a73      	ldr	r2, [pc, #460]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001e9a:	54d1      	strb	r1, [r2, r3]
 8001e9c:	e005      	b.n	8001eaa <Fill_Drivers_Data+0x36>
		else
		{
			sGlobDriverArr[0].name[i] = '\0';
 8001e9e:	4b70      	ldr	r3, [pc, #448]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a71      	ldr	r2, [pc, #452]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	54d1      	strb	r1, [r2, r3]
			break;
 8001ea8:	e008      	b.n	8001ebc <Fill_Drivers_Data+0x48>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	dde1      	ble.n	8001e80 <Fill_Drivers_Data+0xc>
		}
	}
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e01c      	b.n	8001efe <Fill_Drivers_Data+0x8a>
	{
		if(ID1[i] != '\0')
 8001ec4:	4b66      	ldr	r3, [pc, #408]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a68      	ldr	r2, [pc, #416]	; (800206c <Fill_Drivers_Data+0x1f8>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <Fill_Drivers_Data+0x72>
			sGlobDriverArr[0].ID[i] = ID1[i];
 8001ed0:	4b63      	ldr	r3, [pc, #396]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b62      	ldr	r3, [pc, #392]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4964      	ldr	r1, [pc, #400]	; (800206c <Fill_Drivers_Data+0x1f8>)
 8001eda:	5c89      	ldrb	r1, [r1, r2]
 8001edc:	4a62      	ldr	r2, [pc, #392]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	72da      	strb	r2, [r3, #11]
 8001ee4:	e006      	b.n	8001ef4 <Fill_Drivers_Data+0x80>
		else
		{
			sGlobDriverArr[0].ID[i] = '\0';
 8001ee6:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001eec:	4413      	add	r3, r2
 8001eee:	2200      	movs	r2, #0
 8001ef0:	72da      	strb	r2, [r3, #11]
			break;
 8001ef2:	e008      	b.n	8001f06 <Fill_Drivers_Data+0x92>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001ef4:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4a59      	ldr	r2, [pc, #356]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	ddde      	ble.n	8001ec4 <Fill_Drivers_Data+0x50>
		}
	}
	sGlobDriverArr[0].Free_Index = 0;
 8001f06:	4b58      	ldr	r3, [pc, #352]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	759a      	strb	r2, [r3, #22]


	// 2nd Driver
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001f0c:	4b54      	ldr	r3, [pc, #336]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e01c      	b.n	8001f4e <Fill_Drivers_Data+0xda>
	{
		if(driver2[i] != '\0')
 8001f14:	4b52      	ldr	r3, [pc, #328]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a55      	ldr	r2, [pc, #340]	; (8002070 <Fill_Drivers_Data+0x1fc>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <Fill_Drivers_Data+0xc2>
			sGlobDriverArr[1].name[i] = driver2[i];
 8001f20:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4951      	ldr	r1, [pc, #324]	; (8002070 <Fill_Drivers_Data+0x1fc>)
 8001f2a:	5c89      	ldrb	r1, [r1, r2]
 8001f2c:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	460a      	mov	r2, r1
 8001f32:	75da      	strb	r2, [r3, #23]
 8001f34:	e006      	b.n	8001f44 <Fill_Drivers_Data+0xd0>
		else
		{
			sGlobDriverArr[1].name[i] = '\0';
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	2200      	movs	r2, #0
 8001f40:	75da      	strb	r2, [r3, #23]
			break;
 8001f42:	e008      	b.n	8001f56 <Fill_Drivers_Data+0xe2>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a45      	ldr	r2, [pc, #276]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	ddde      	ble.n	8001f14 <Fill_Drivers_Data+0xa0>
		}
	}
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001f56:	4b42      	ldr	r3, [pc, #264]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e01e      	b.n	8001f9c <Fill_Drivers_Data+0x128>
	{
		if(ID2[i] != '\0')
 8001f5e:	4b40      	ldr	r3, [pc, #256]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a44      	ldr	r2, [pc, #272]	; (8002074 <Fill_Drivers_Data+0x200>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <Fill_Drivers_Data+0x10e>
			sGlobDriverArr[1].ID[i] = ID2[i];
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4940      	ldr	r1, [pc, #256]	; (8002074 <Fill_Drivers_Data+0x200>)
 8001f74:	5c89      	ldrb	r1, [r1, r2]
 8001f76:	4a3c      	ldr	r2, [pc, #240]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001f80:	e007      	b.n	8001f92 <Fill_Drivers_Data+0x11e>
		else
		{
			sGlobDriverArr[1].ID[i] = '\0';
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a38      	ldr	r2, [pc, #224]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			break;
 8001f90:	e008      	b.n	8001fa4 <Fill_Drivers_Data+0x130>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	4a31      	ldr	r2, [pc, #196]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b09      	cmp	r3, #9
 8001fa2:	dddc      	ble.n	8001f5e <Fill_Drivers_Data+0xea>
		}
	}
	sGlobDriverArr[1].Free_Index = 0;
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	// 3rd Driver
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e01e      	b.n	8001ff2 <Fill_Drivers_Data+0x17e>
	{
		if(driver3[i] != '\0')
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <Fill_Drivers_Data+0x204>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <Fill_Drivers_Data+0x164>
			sGlobDriverArr[2].name[i] = driver3[i];
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	492b      	ldr	r1, [pc, #172]	; (8002078 <Fill_Drivers_Data+0x204>)
 8001fca:	5c89      	ldrb	r1, [r1, r2]
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001fd6:	e007      	b.n	8001fe8 <Fill_Drivers_Data+0x174>
		else
		{
			sGlobDriverArr[2].name[i] = '\0';
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a22      	ldr	r2, [pc, #136]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 8001fe6:	e008      	b.n	8001ffa <Fill_Drivers_Data+0x186>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	dddc      	ble.n	8001fb4 <Fill_Drivers_Data+0x140>
		}
	}
	for(i=0; i<NAME_MAX_SIZE; i++)
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e01e      	b.n	8002040 <Fill_Drivers_Data+0x1cc>
	{
		if(ID3[i] != '\0')
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1d      	ldr	r2, [pc, #116]	; (800207c <Fill_Drivers_Data+0x208>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <Fill_Drivers_Data+0x1b2>
			sGlobDriverArr[2].ID[i] = ID3[i];
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4919      	ldr	r1, [pc, #100]	; (800207c <Fill_Drivers_Data+0x208>)
 8002018:	5c89      	ldrb	r1, [r1, r2]
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 800201c:	4413      	add	r3, r2
 800201e:	460a      	mov	r2, r1
 8002020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002024:	e007      	b.n	8002036 <Fill_Drivers_Data+0x1c2>
		else
		{
			sGlobDriverArr[2].ID[i] = '\0';
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 800202c:	4413      	add	r3, r2
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8002034:	e008      	b.n	8002048 <Fill_Drivers_Data+0x1d4>
	for(i=0; i<NAME_MAX_SIZE; i++)
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <Fill_Drivers_Data+0x1ec>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b09      	cmp	r3, #9
 8002046:	dddc      	ble.n	8002002 <Fill_Drivers_Data+0x18e>
		}
	}
	sGlobDriverArr[2].Free_Index = 0;
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <Fill_Drivers_Data+0x1f4>)
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	/*	Store number of users	*/
	Glob_NumberOfCurrentUsers = 3;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <Fill_Drivers_Data+0x20c>)
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200000c0 	.word	0x200000c0
 8002064:	20000050 	.word	0x20000050
 8002068:	200001a0 	.word	0x200001a0
 800206c:	20000058 	.word	0x20000058
 8002070:	20000064 	.word	0x20000064
 8002074:	2000006c 	.word	0x2000006c
 8002078:	20000078 	.word	0x20000078
 800207c:	2000007c 	.word	0x2000007c
 8002080:	200000c5 	.word	0x200000c5

08002084 <AdminAccessRequest>:

static uint8_t AdminAccessRequest(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
	/*		Local variables		*/
	uint16_t LOC_RecivedData = 0, LOC_Counter = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	837b      	strh	r3, [r7, #26]
 800208e:	2300      	movs	r3, #0
 8002090:	83fb      	strh	r3, [r7, #30]
	uint8_t LOC_Name[NAME_MAX_SIZE+1] = {0};
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t LOC_Password[NAME_MAX_SIZE+1] = {0};
 80020a0:	463b      	mov	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t LOC_result = 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	777b      	strb	r3, [r7, #29]
	uint8_t adminIndex = 10;
 80020b0:	230a      	movs	r3, #10
 80020b2:	773b      	strb	r3, [r7, #28]

	/*		Get name		*/
	MCAL_UART_SendString(USART1, addString("NAME: \0"), '\0');
 80020b4:	2200      	movs	r2, #0
 80020b6:	4958      	ldr	r1, [pc, #352]	; (8002218 <AdminAccessRequest+0x194>)
 80020b8:	4858      	ldr	r0, [pc, #352]	; (800221c <AdminAccessRequest+0x198>)
 80020ba:	f7ff fb4d 	bl	8001758 <MCAL_UART_SendString>

	/* 		LCD Message		*/
	LCD_clear_screen();
 80020be:	f7fe f981 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("Welcome to      Dashboard       Please, Enter   Required Data");
 80020c2:	4857      	ldr	r0, [pc, #348]	; (8002220 <AdminAccessRequest+0x19c>)
 80020c4:	f7fe fb01 	bl	80006ca <HAL_LCD_Send_String>


	/*		Store name		*/
	do{
		MCAL_UART_ReceiveData(USART1, &LOC_RecivedData, enable);
 80020c8:	f107 031a 	add.w	r3, r7, #26
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	4852      	ldr	r0, [pc, #328]	; (800221c <AdminAccessRequest+0x198>)
 80020d2:	f7ff fb63 	bl	800179c <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &LOC_RecivedData, enable);
 80020d6:	f107 031a 	add.w	r3, r7, #26
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	484f      	ldr	r0, [pc, #316]	; (800221c <AdminAccessRequest+0x198>)
 80020e0:	f7ff fafa 	bl	80016d8 <MCAL_UART_SendData>
		LOC_Name[LOC_Counter] = (uint8_t) LOC_RecivedData;
 80020e4:	8b7a      	ldrh	r2, [r7, #26]
 80020e6:	8bfb      	ldrh	r3, [r7, #30]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f107 0120 	add.w	r1, r7, #32
 80020ee:	440b      	add	r3, r1
 80020f0:	f803 2c14 	strb.w	r2, [r3, #-20]
		LOC_Counter++;
 80020f4:	8bfb      	ldrh	r3, [r7, #30]
 80020f6:	3301      	adds	r3, #1
 80020f8:	83fb      	strh	r3, [r7, #30]
	}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_RecivedData != UART_TERMINATE_CHAR));
 80020fa:	8bfb      	ldrh	r3, [r7, #30]
 80020fc:	2b0a      	cmp	r3, #10
 80020fe:	d802      	bhi.n	8002106 <AdminAccessRequest+0x82>
 8002100:	8b7b      	ldrh	r3, [r7, #26]
 8002102:	2b0d      	cmp	r3, #13
 8002104:	d1e0      	bne.n	80020c8 <AdminAccessRequest+0x44>
	LOC_Name[LOC_Counter-1] = '\0';
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	3b01      	subs	r3, #1
 800210a:	f107 0220 	add.w	r2, r7, #32
 800210e:	4413      	add	r3, r2
 8002110:	2200      	movs	r2, #0
 8002112:	f803 2c14 	strb.w	r2, [r3, #-20]
	LOC_Counter=0;
 8002116:	2300      	movs	r3, #0
 8002118:	83fb      	strh	r3, [r7, #30]

	/* 		Get Password		*/
	MCAL_UART_SendString(USART1, addString("\r\nPASSWORD: \0"), '\0');
 800211a:	2200      	movs	r2, #0
 800211c:	4941      	ldr	r1, [pc, #260]	; (8002224 <AdminAccessRequest+0x1a0>)
 800211e:	483f      	ldr	r0, [pc, #252]	; (800221c <AdminAccessRequest+0x198>)
 8002120:	f7ff fb1a 	bl	8001758 <MCAL_UART_SendString>
	/*		Store Password		*/
	do{
		MCAL_UART_ReceiveData(USART1, &LOC_RecivedData, enable);
 8002124:	f107 031a 	add.w	r3, r7, #26
 8002128:	2200      	movs	r2, #0
 800212a:	4619      	mov	r1, r3
 800212c:	483b      	ldr	r0, [pc, #236]	; (800221c <AdminAccessRequest+0x198>)
 800212e:	f7ff fb35 	bl	800179c <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &LOC_RecivedData, enable);
 8002132:	f107 031a 	add.w	r3, r7, #26
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	4838      	ldr	r0, [pc, #224]	; (800221c <AdminAccessRequest+0x198>)
 800213c:	f7ff facc 	bl	80016d8 <MCAL_UART_SendData>
		LOC_Password[LOC_Counter] = (uint8_t) LOC_RecivedData;
 8002140:	8b7a      	ldrh	r2, [r7, #26]
 8002142:	8bfb      	ldrh	r3, [r7, #30]
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f107 0120 	add.w	r1, r7, #32
 800214a:	440b      	add	r3, r1
 800214c:	f803 2c20 	strb.w	r2, [r3, #-32]
		LOC_Counter++;
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	3301      	adds	r3, #1
 8002154:	83fb      	strh	r3, [r7, #30]
	}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_RecivedData != UART_TERMINATE_CHAR));
 8002156:	8bfb      	ldrh	r3, [r7, #30]
 8002158:	2b0a      	cmp	r3, #10
 800215a:	d802      	bhi.n	8002162 <AdminAccessRequest+0xde>
 800215c:	8b7b      	ldrh	r3, [r7, #26]
 800215e:	2b0d      	cmp	r3, #13
 8002160:	d1e0      	bne.n	8002124 <AdminAccessRequest+0xa0>
	LOC_Password[LOC_Counter-1] = '\0';
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	3b01      	subs	r3, #1
 8002166:	f107 0220 	add.w	r2, r7, #32
 800216a:	4413      	add	r3, r2
 800216c:	2200      	movs	r2, #0
 800216e:	f803 2c20 	strb.w	r2, [r3, #-32]
	LOC_Counter=0;
 8002172:	2300      	movs	r3, #0
 8002174:	83fb      	strh	r3, [r7, #30]

	/*		validate access		*/
	for(LOC_Counter =0; LOC_Counter < NUMBER_OF_ADMINS; LOC_Counter++)
 8002176:	2300      	movs	r3, #0
 8002178:	83fb      	strh	r3, [r7, #30]
 800217a:	e016      	b.n	80021aa <AdminAccessRequest+0x126>
	{
		/*	Search by name	*/
		LOC_result = CompareStrings(LOC_Name, sGlobAdminArr[LOC_Counter].name);
 800217c:	8bfb      	ldrh	r3, [r7, #30]
 800217e:	2216      	movs	r2, #22
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <AdminAccessRequest+0x1a4>)
 8002186:	441a      	add	r2, r3
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fe60 	bl	8002e54 <CompareStrings>
 8002194:	4603      	mov	r3, r0
 8002196:	777b      	strb	r3, [r7, #29]
		if(LOC_result == 0)
 8002198:	7f7b      	ldrb	r3, [r7, #29]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <AdminAccessRequest+0x120>
		{
			adminIndex = LOC_Counter;
 800219e:	8bfb      	ldrh	r3, [r7, #30]
 80021a0:	773b      	strb	r3, [r7, #28]
			break;
 80021a2:	e005      	b.n	80021b0 <AdminAccessRequest+0x12c>
	for(LOC_Counter =0; LOC_Counter < NUMBER_OF_ADMINS; LOC_Counter++)
 80021a4:	8bfb      	ldrh	r3, [r7, #30]
 80021a6:	3301      	adds	r3, #1
 80021a8:	83fb      	strh	r3, [r7, #30]
 80021aa:	8bfb      	ldrh	r3, [r7, #30]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d9e5      	bls.n	800217c <AdminAccessRequest+0xf8>
		}
	}

	/*	Check password	if name exists*/
	if(LOC_result == 0 && adminIndex <= NUMBER_OF_ADMINS)
 80021b0:	7f7b      	ldrb	r3, [r7, #29]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d114      	bne.n	80021e0 <AdminAccessRequest+0x15c>
 80021b6:	7f3b      	ldrb	r3, [r7, #28]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d811      	bhi.n	80021e0 <AdminAccessRequest+0x15c>
	{
		LOC_result = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	777b      	strb	r3, [r7, #29]
		LOC_result = CompareStrings(LOC_Password, sGlobAdminArr[adminIndex].password);
 80021c0:	7f3b      	ldrb	r3, [r7, #28]
 80021c2:	2216      	movs	r2, #22
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	3308      	adds	r3, #8
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <AdminAccessRequest+0x1a4>)
 80021cc:	4413      	add	r3, r2
 80021ce:	1cda      	adds	r2, r3, #3
 80021d0:	463b      	mov	r3, r7
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fe3d 	bl	8002e54 <CompareStrings>
 80021da:	4603      	mov	r3, r0
 80021dc:	777b      	strb	r3, [r7, #29]
 80021de:	e001      	b.n	80021e4 <AdminAccessRequest+0x160>
	}
	else
		LOC_result = 1;
 80021e0:	2301      	movs	r3, #1
 80021e2:	777b      	strb	r3, [r7, #29]

	if(LOC_result == 0)
 80021e4:	7f7b      	ldrb	r3, [r7, #29]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <AdminAccessRequest+0x17c>
	{
		/*	We has Valid Access	*/
		MCAL_UART_SendString(USART1, addString("\r\n********************* SUCCESSFUL LOGIN *********************\r\n\0"), '\0');
 80021ea:	2200      	movs	r2, #0
 80021ec:	490f      	ldr	r1, [pc, #60]	; (800222c <AdminAccessRequest+0x1a8>)
 80021ee:	480b      	ldr	r0, [pc, #44]	; (800221c <AdminAccessRequest+0x198>)
 80021f0:	f7ff fab2 	bl	8001758 <MCAL_UART_SendString>
		LCD_Access_Accepted(adminIndex);
 80021f4:	7f3b      	ldrb	r3, [r7, #28]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fc40 	bl	8001a7c <LCD_Access_Accepted>
		return ADMIN_VALID_ACCESS;
 80021fc:	2328      	movs	r3, #40	; 0x28
 80021fe:	e007      	b.n	8002210 <AdminAccessRequest+0x18c>
	}
	else
	{
		/*	We has invalid Access	*/
		MCAL_UART_SendString(USART1, addString("\r\n********************* UNSUCCESSFUL LOGIN *********************\r\n\0"), '\0');
 8002200:	2200      	movs	r2, #0
 8002202:	490b      	ldr	r1, [pc, #44]	; (8002230 <AdminAccessRequest+0x1ac>)
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <AdminAccessRequest+0x198>)
 8002206:	f7ff faa7 	bl	8001758 <MCAL_UART_SendString>
		LCD_Access_Denied();
 800220a:	f7ff fc7b 	bl	8001b04 <LCD_Access_Denied>
		return ADMIN_INVALID_ACCESS;
 800220e:	2332      	movs	r3, #50	; 0x32
	}
}
 8002210:	4618      	mov	r0, r3
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	080033a4 	.word	0x080033a4
 800221c:	40013800 	.word	0x40013800
 8002220:	080033ac 	.word	0x080033ac
 8002224:	080033ec 	.word	0x080033ec
 8002228:	20000164 	.word	0x20000164
 800222c:	080033fc 	.word	0x080033fc
 8002230:	08003440 	.word	0x08003440

08002234 <SystemAdd>:
	HAL_LCD_Send_Data(Glob_Available_Slots);
	delay_ms(1500);
}

uint8_t SystemAdd(void)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
	if(Glob_NumberOfCurrentUsers < NUMBER_OF_DRIVERS)
 800223a:	4b77      	ldr	r3, [pc, #476]	; (8002418 <SystemAdd+0x1e4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b04      	cmp	r3, #4
 8002240:	f200 80d0 	bhi.w	80023e4 <SystemAdd+0x1b0>
	{
		/*	1. Init needed local variables	*/
		uint16_t LOC_ReceivedData = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	80bb      	strh	r3, [r7, #4]
		uint8_t LOC_ArrIndex, LOC_Counter = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	71bb      	strb	r3, [r7, #6]

		/*	Find Free array index in Driver Array	*/
		for(LOC_Counter = 0; LOC_Counter < MAX_SLOTS_IN_GARAGE; LOC_Counter++)
 800224c:	2300      	movs	r3, #0
 800224e:	71bb      	strb	r3, [r7, #6]
 8002250:	e01e      	b.n	8002290 <SystemAdd+0x5c>
		{
			if(sGlobDriverArr[LOC_Counter].Free_Index != 0)
 8002252:	79ba      	ldrb	r2, [r7, #6]
 8002254:	4971      	ldr	r1, [pc, #452]	; (800241c <SystemAdd+0x1e8>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	440b      	add	r3, r1
 8002262:	3316      	adds	r3, #22
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00f      	beq.n	800228a <SystemAdd+0x56>
			{
				LOC_ArrIndex = LOC_Counter;
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	71fb      	strb	r3, [r7, #7]
				sGlobDriverArr[LOC_Counter].Free_Index = 0;
 800226e:	79ba      	ldrb	r2, [r7, #6]
 8002270:	496a      	ldr	r1, [pc, #424]	; (800241c <SystemAdd+0x1e8>)
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	440b      	add	r3, r1
 800227e:	3316      	adds	r3, #22
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
				LOC_Counter = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	71bb      	strb	r3, [r7, #6]
				break;
 8002288:	e005      	b.n	8002296 <SystemAdd+0x62>
		for(LOC_Counter = 0; LOC_Counter < MAX_SLOTS_IN_GARAGE; LOC_Counter++)
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	3301      	adds	r3, #1
 800228e:	71bb      	strb	r3, [r7, #6]
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d9dd      	bls.n	8002252 <SystemAdd+0x1e>
			}
		}
		LOC_Counter=0;
 8002296:	2300      	movs	r3, #0
 8002298:	71bb      	strb	r3, [r7, #6]

		/*	UART & LCD Add name message	*/
		MCAL_UART_SendString(USART1, addString("\r\n****************** Adding Driver Data ****************** \r\n\0"), '\0');
 800229a:	2200      	movs	r2, #0
 800229c:	4960      	ldr	r1, [pc, #384]	; (8002420 <SystemAdd+0x1ec>)
 800229e:	4861      	ldr	r0, [pc, #388]	; (8002424 <SystemAdd+0x1f0>)
 80022a0:	f7ff fa5a 	bl	8001758 <MCAL_UART_SendString>
		MCAL_UART_SendString(USART1, addString("NAME: \0"), '\0');
 80022a4:	2200      	movs	r2, #0
 80022a6:	4960      	ldr	r1, [pc, #384]	; (8002428 <SystemAdd+0x1f4>)
 80022a8:	485e      	ldr	r0, [pc, #376]	; (8002424 <SystemAdd+0x1f0>)
 80022aa:	f7ff fa55 	bl	8001758 <MCAL_UART_SendString>
		HAL_LCD_Send_Command(LCD_DISP_ON);
 80022ae:	200c      	movs	r0, #12
 80022b0:	f7fe f92c 	bl	800050c <HAL_LCD_Send_Command>
		LCD_clear_screen();
 80022b4:	f7fe f886 	bl	80003c4 <LCD_clear_screen>
		HAL_LCD_Send_String("Driver Username");
 80022b8:	485c      	ldr	r0, [pc, #368]	; (800242c <SystemAdd+0x1f8>)
 80022ba:	f7fe fa06 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Set_Courser(2, 0);
 80022be:	2100      	movs	r1, #0
 80022c0:	2002      	movs	r0, #2
 80022c2:	f7fe f821 	bl	8000308 <HAL_LCD_Set_Courser>
		HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 80022c6:	200f      	movs	r0, #15
 80022c8:	f7fe f920 	bl	800050c <HAL_LCD_Send_Command>

		/*	Store Name	*/
		do{
			MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2200      	movs	r2, #0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4854      	ldr	r0, [pc, #336]	; (8002424 <SystemAdd+0x1f0>)
 80022d4:	f7ff fa62 	bl	800179c <MCAL_UART_ReceiveData>
			MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	2200      	movs	r2, #0
 80022dc:	4619      	mov	r1, r3
 80022de:	4851      	ldr	r0, [pc, #324]	; (8002424 <SystemAdd+0x1f0>)
 80022e0:	f7ff f9fa 	bl	80016d8 <MCAL_UART_SendData>
			sGlobDriverArr[LOC_ArrIndex].name[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 80022e4:	88bb      	ldrh	r3, [r7, #4]
 80022e6:	79fa      	ldrb	r2, [r7, #7]
 80022e8:	79b9      	ldrb	r1, [r7, #6]
 80022ea:	b2dc      	uxtb	r4, r3
 80022ec:	484b      	ldr	r0, [pc, #300]	; (800241c <SystemAdd+0x1e8>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	4403      	add	r3, r0
 80022fa:	440b      	add	r3, r1
 80022fc:	4622      	mov	r2, r4
 80022fe:	701a      	strb	r2, [r3, #0]
			LOC_Counter++;
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	3301      	adds	r3, #1
 8002304:	71bb      	strb	r3, [r7, #6]
		}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	2b0a      	cmp	r3, #10
 800230a:	d802      	bhi.n	8002312 <SystemAdd+0xde>
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	2b0d      	cmp	r3, #13
 8002310:	d1dc      	bne.n	80022cc <SystemAdd+0x98>
		sGlobDriverArr[LOC_ArrIndex].ID[LOC_Counter] = '\0';
 8002312:	79fa      	ldrb	r2, [r7, #7]
 8002314:	79b9      	ldrb	r1, [r7, #6]
 8002316:	4841      	ldr	r0, [pc, #260]	; (800241c <SystemAdd+0x1e8>)
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	4403      	add	r3, r0
 8002324:	440b      	add	r3, r1
 8002326:	330b      	adds	r3, #11
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
		LOC_Counter=0;
 800232c:	2300      	movs	r3, #0
 800232e:	71bb      	strb	r3, [r7, #6]
		LOC_ReceivedData = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	80bb      	strh	r3, [r7, #4]

		/*	UART & LCD Add ID message	*/
		MCAL_UART_SendString(USART1, addString("\r\nID: \0"), '\0');
 8002334:	2200      	movs	r2, #0
 8002336:	493e      	ldr	r1, [pc, #248]	; (8002430 <SystemAdd+0x1fc>)
 8002338:	483a      	ldr	r0, [pc, #232]	; (8002424 <SystemAdd+0x1f0>)
 800233a:	f7ff fa0d 	bl	8001758 <MCAL_UART_SendString>
		HAL_LCD_Send_Command(LCD_DISP_ON);
 800233e:	200c      	movs	r0, #12
 8002340:	f7fe f8e4 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Set_Courser(3, 0);
 8002344:	2100      	movs	r1, #0
 8002346:	2003      	movs	r0, #3
 8002348:	f7fd ffde 	bl	8000308 <HAL_LCD_Set_Courser>
		HAL_LCD_Send_String("Driver ID");
 800234c:	4839      	ldr	r0, [pc, #228]	; (8002434 <SystemAdd+0x200>)
 800234e:	f7fe f9bc 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8002352:	20d0      	movs	r0, #208	; 0xd0
 8002354:	f7fe f8da 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 8002358:	200f      	movs	r0, #15
 800235a:	f7fe f8d7 	bl	800050c <HAL_LCD_Send_Command>

		/*	Store ID	*/
		do{
			MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	482f      	ldr	r0, [pc, #188]	; (8002424 <SystemAdd+0x1f0>)
 8002366:	f7ff fa19 	bl	800179c <MCAL_UART_ReceiveData>
			MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	4619      	mov	r1, r3
 8002370:	482c      	ldr	r0, [pc, #176]	; (8002424 <SystemAdd+0x1f0>)
 8002372:	f7ff f9b1 	bl	80016d8 <MCAL_UART_SendData>
			sGlobDriverArr[LOC_ArrIndex].ID[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	79b9      	ldrb	r1, [r7, #6]
 800237c:	b2dc      	uxtb	r4, r3
 800237e:	4827      	ldr	r0, [pc, #156]	; (800241c <SystemAdd+0x1e8>)
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	4403      	add	r3, r0
 800238c:	440b      	add	r3, r1
 800238e:	330b      	adds	r3, #11
 8002390:	4622      	mov	r2, r4
 8002392:	701a      	strb	r2, [r3, #0]
			LOC_Counter++;
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	3301      	adds	r3, #1
 8002398:	71bb      	strb	r3, [r7, #6]
		}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	2b0a      	cmp	r3, #10
 800239e:	d802      	bhi.n	80023a6 <SystemAdd+0x172>
 80023a0:	88bb      	ldrh	r3, [r7, #4]
 80023a2:	2b0d      	cmp	r3, #13
 80023a4:	d1db      	bne.n	800235e <SystemAdd+0x12a>
		sGlobDriverArr[LOC_ArrIndex].ID[LOC_Counter] = '\0';
 80023a6:	79fa      	ldrb	r2, [r7, #7]
 80023a8:	79b9      	ldrb	r1, [r7, #6]
 80023aa:	481c      	ldr	r0, [pc, #112]	; (800241c <SystemAdd+0x1e8>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	4403      	add	r3, r0
 80023b8:	440b      	add	r3, r1
 80023ba:	330b      	adds	r3, #11
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
		LOC_Counter=0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	71bb      	strb	r3, [r7, #6]
		Glob_ArrIndex = LOC_ArrIndex;
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <SystemAdd+0x204>)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	7013      	strb	r3, [r2, #0]

		Glob_NumberOfCurrentUsers++;
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <SystemAdd+0x1e4>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <SystemAdd+0x1e4>)
 80023d4:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendString(USART1, addString("\r\n****************** SUCCESSFUL ADD ****************** \r\n\0"), '\0');
 80023d6:	2200      	movs	r2, #0
 80023d8:	4918      	ldr	r1, [pc, #96]	; (800243c <SystemAdd+0x208>)
 80023da:	4812      	ldr	r0, [pc, #72]	; (8002424 <SystemAdd+0x1f0>)
 80023dc:	f7ff f9bc 	bl	8001758 <MCAL_UART_SendString>
		return SUCCESSFUL_OPERATION;
 80023e0:	2353      	movs	r3, #83	; 0x53
 80023e2:	e015      	b.n	8002410 <SystemAdd+0x1dc>
	}
	else
	{
		/*	FULL ARRAY	*/
		HAL_LCD_Send_Command(LCD_DISP_ON);
 80023e4:	200c      	movs	r0, #12
 80023e6:	f7fe f891 	bl	800050c <HAL_LCD_Send_Command>
		LCD_clear_screen();
 80023ea:	f7fd ffeb 	bl	80003c4 <LCD_clear_screen>
		HAL_LCD_Send_String("PARKING GARAGE");
 80023ee:	4814      	ldr	r0, [pc, #80]	; (8002440 <SystemAdd+0x20c>)
 80023f0:	f7fe f96b 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Set_Courser(2, 0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	2002      	movs	r0, #2
 80023f8:	f7fd ff86 	bl	8000308 <HAL_LCD_Set_Courser>
		HAL_LCD_Send_String("FULL CAPACITY");
 80023fc:	4811      	ldr	r0, [pc, #68]	; (8002444 <SystemAdd+0x210>)
 80023fe:	f7fe f964 	bl	80006ca <HAL_LCD_Send_String>
		delay_ms(350);
 8002402:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002406:	f7fe f80b 	bl	8000420 <delay_ms>
		LCD_clear_screen();
 800240a:	f7fd ffdb 	bl	80003c4 <LCD_clear_screen>
		//Come back to menu loop
		//todo ECU2_Dashboard_APP();

		return FAILED_OPERATION;
 800240e:	2346      	movs	r3, #70	; 0x46
	}
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	200000c5 	.word	0x200000c5
 800241c:	200001a0 	.word	0x200001a0
 8002420:	080034a8 	.word	0x080034a8
 8002424:	40013800 	.word	0x40013800
 8002428:	080033a4 	.word	0x080033a4
 800242c:	080034e8 	.word	0x080034e8
 8002430:	080034f8 	.word	0x080034f8
 8002434:	08003500 	.word	0x08003500
 8002438:	20000190 	.word	0x20000190
 800243c:	0800350c 	.word	0x0800350c
 8002440:	08003548 	.word	0x08003548
 8002444:	08003558 	.word	0x08003558

08002448 <SystemDelete>:

uint8_t SystemDelete(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	Glob_key_pressed = NULL;
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <SystemDelete+0x6c>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
	LCD_Delete_Menu();
 8002452:	f7ff fb97 	bl	8001b84 <LCD_Delete_Menu>
	while(!((Glob_key_pressed>= '1' && Glob_key_pressed <= '2' ) || (Glob_key_pressed == (uint8_t)UART_TERMINATE_CHAR )))
 8002456:	e009      	b.n	800246c <SystemDelete+0x24>
	{
		MCAL_UART_ReceiveData(USART1, &Glob_key_pressed, enable);
 8002458:	2200      	movs	r2, #0
 800245a:	4916      	ldr	r1, [pc, #88]	; (80024b4 <SystemDelete+0x6c>)
 800245c:	4816      	ldr	r0, [pc, #88]	; (80024b8 <SystemDelete+0x70>)
 800245e:	f7ff f99d 	bl	800179c <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &Glob_key_pressed, enable);
 8002462:	2200      	movs	r2, #0
 8002464:	4913      	ldr	r1, [pc, #76]	; (80024b4 <SystemDelete+0x6c>)
 8002466:	4814      	ldr	r0, [pc, #80]	; (80024b8 <SystemDelete+0x70>)
 8002468:	f7ff f936 	bl	80016d8 <MCAL_UART_SendData>
	while(!((Glob_key_pressed>= '1' && Glob_key_pressed <= '2' ) || (Glob_key_pressed == (uint8_t)UART_TERMINATE_CHAR )))
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <SystemDelete+0x6c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d903      	bls.n	800247c <SystemDelete+0x34>
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <SystemDelete+0x6c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b32      	cmp	r3, #50	; 0x32
 800247a:	d903      	bls.n	8002484 <SystemDelete+0x3c>
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <SystemDelete+0x6c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b0d      	cmp	r3, #13
 8002482:	d1e9      	bne.n	8002458 <SystemDelete+0x10>
	}
	if(Glob_key_pressed == OPTION_DELETE_USER)
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <SystemDelete+0x6c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b31      	cmp	r3, #49	; 0x31
 800248a:	d104      	bne.n	8002496 <SystemDelete+0x4e>
		return DeleteProcess(DELT_ONE_DRIVER);
 800248c:	2000      	movs	r0, #0
 800248e:	f000 fb63 	bl	8002b58 <DeleteProcess>
 8002492:	4603      	mov	r3, r0
 8002494:	e00b      	b.n	80024ae <SystemDelete+0x66>
	else if (Glob_key_pressed == OPTION_DELETE_USER)
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <SystemDelete+0x6c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b31      	cmp	r3, #49	; 0x31
 800249c:	d104      	bne.n	80024a8 <SystemDelete+0x60>
		return DeleteProcess(DELT_ALL_DRIVERS);
 800249e:	2001      	movs	r0, #1
 80024a0:	f000 fb5a 	bl	8002b58 <DeleteProcess>
 80024a4:	4603      	mov	r3, r0
 80024a6:	e002      	b.n	80024ae <SystemDelete+0x66>
	else
		return SystemDelete();
 80024a8:	f7ff ffce 	bl	8002448 <SystemDelete>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200000bc 	.word	0x200000bc
 80024b8:	40013800 	.word	0x40013800

080024bc <SystemEdit>:

uint8_t SystemEdit(void)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
	/*	 variables	*/
	uint8_t LOC_Counter = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	77fb      	strb	r3, [r7, #31]
	uint8_t LOC_Username[NAME_MAX_SIZE+1];
	uint8_t LOC_ID[ID_SIZE+1];
	uint8_t LOC_ReceivedData = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]
	uint8_t LOC_DriverIndex = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	77bb      	strb	r3, [r7, #30]
	uint8_t LOC_Result = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	777b      	strb	r3, [r7, #29]

	/* UART & LCD Display name message	*/
	MCAL_UART_SendString(USART1, addString("\r\n****************** Edit Driver ****************** \r\n\0"), '\0');
 80024d2:	2200      	movs	r2, #0
 80024d4:	49c4      	ldr	r1, [pc, #784]	; (80027e8 <SystemEdit+0x32c>)
 80024d6:	48c5      	ldr	r0, [pc, #788]	; (80027ec <SystemEdit+0x330>)
 80024d8:	f7ff f93e 	bl	8001758 <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, addString("NAME: \0"), '\0');
 80024dc:	2200      	movs	r2, #0
 80024de:	49c4      	ldr	r1, [pc, #784]	; (80027f0 <SystemEdit+0x334>)
 80024e0:	48c2      	ldr	r0, [pc, #776]	; (80027ec <SystemEdit+0x330>)
 80024e2:	f7ff f939 	bl	8001758 <MCAL_UART_SendString>
	HAL_LCD_Send_Command(LCD_DISP_ON);
 80024e6:	200c      	movs	r0, #12
 80024e8:	f7fe f810 	bl	800050c <HAL_LCD_Send_Command>
	LCD_clear_screen();
 80024ec:	f7fd ff6a 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("EDIT DRIVER");
 80024f0:	48c0      	ldr	r0, [pc, #768]	; (80027f4 <SystemEdit+0x338>)
 80024f2:	f7fe f8ea 	bl	80006ca <HAL_LCD_Send_String>
	delay_ms(750);
 80024f6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80024fa:	f7fd ff91 	bl	8000420 <delay_ms>
	LCD_clear_screen();
 80024fe:	f7fd ff61 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("Driver Name:");
 8002502:	48bd      	ldr	r0, [pc, #756]	; (80027f8 <SystemEdit+0x33c>)
 8002504:	f7fe f8e1 	bl	80006ca <HAL_LCD_Send_String>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 8002508:	20c0      	movs	r0, #192	; 0xc0
 800250a:	f7fd ffff 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 800250e:	200f      	movs	r0, #15
 8002510:	f7fd fffc 	bl	800050c <HAL_LCD_Send_Command>

	/*	get name */
	do
	{
		MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	2200      	movs	r2, #0
 8002518:	4619      	mov	r1, r3
 800251a:	48b4      	ldr	r0, [pc, #720]	; (80027ec <SystemEdit+0x330>)
 800251c:	f7ff f93e 	bl	800179c <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	2200      	movs	r2, #0
 8002524:	4619      	mov	r1, r3
 8002526:	48b1      	ldr	r0, [pc, #708]	; (80027ec <SystemEdit+0x330>)
 8002528:	f7ff f8d6 	bl	80016d8 <MCAL_UART_SendData>
		HAL_LCD_Send_Data(LOC_ReceivedData);
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f84c 	bl	80005cc <HAL_LCD_Send_Data>
		LOC_Username[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 8002534:	7ffb      	ldrb	r3, [r7, #31]
 8002536:	79fa      	ldrb	r2, [r7, #7]
 8002538:	f107 0120 	add.w	r1, r7, #32
 800253c:	440b      	add	r3, r1
 800253e:	f803 2c10 	strb.w	r2, [r3, #-16]
		LOC_Counter++;
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	3301      	adds	r3, #1
 8002546:	77fb      	strb	r3, [r7, #31]
	}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 8002548:	7ffb      	ldrb	r3, [r7, #31]
 800254a:	2b0a      	cmp	r3, #10
 800254c:	d802      	bhi.n	8002554 <SystemEdit+0x98>
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b0d      	cmp	r3, #13
 8002552:	d1df      	bne.n	8002514 <SystemEdit+0x58>
	LOC_Username[LOC_Counter] = '\0';
 8002554:	7ffb      	ldrb	r3, [r7, #31]
 8002556:	f107 0220 	add.w	r2, r7, #32
 800255a:	4413      	add	r3, r2
 800255c:	2200      	movs	r2, #0
 800255e:	f803 2c10 	strb.w	r2, [r3, #-16]
	LOC_Counter = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	77fb      	strb	r3, [r7, #31]
	LOC_ReceivedData = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	71fb      	strb	r3, [r7, #7]

	/*	searching	*/
	for(LOC_Counter = 0; LOC_Counter < Glob_NumberOfCurrentUsers; LOC_Counter++)
 800256a:	2300      	movs	r3, #0
 800256c:	77fb      	strb	r3, [r7, #31]
 800256e:	e01a      	b.n	80025a6 <SystemEdit+0xea>
	{
		/*	Name Search	*/
		LOC_Result = CompareStrings(LOC_Username, sGlobDriverArr[LOC_Counter].name);
 8002570:	7ffa      	ldrb	r2, [r7, #31]
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	4a9f      	ldr	r2, [pc, #636]	; (80027fc <SystemEdit+0x340>)
 800257e:	441a      	add	r2, r3
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fc64 	bl	8002e54 <CompareStrings>
 800258c:	4603      	mov	r3, r0
 800258e:	777b      	strb	r3, [r7, #29]
		if(LOC_Result == 0)
 8002590:	7f7b      	ldrb	r3, [r7, #29]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <SystemEdit+0xe0>
		{
			LOC_DriverIndex = LOC_Counter;
 8002596:	7ffb      	ldrb	r3, [r7, #31]
 8002598:	77bb      	strb	r3, [r7, #30]
			break;
 800259a:	e009      	b.n	80025b0 <SystemEdit+0xf4>
		}
		else
			LOC_Result = 1;
 800259c:	2301      	movs	r3, #1
 800259e:	777b      	strb	r3, [r7, #29]
	for(LOC_Counter = 0; LOC_Counter < Glob_NumberOfCurrentUsers; LOC_Counter++)
 80025a0:	7ffb      	ldrb	r3, [r7, #31]
 80025a2:	3301      	adds	r3, #1
 80025a4:	77fb      	strb	r3, [r7, #31]
 80025a6:	4b96      	ldr	r3, [pc, #600]	; (8002800 <SystemEdit+0x344>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	7ffa      	ldrb	r2, [r7, #31]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3df      	bcc.n	8002570 <SystemEdit+0xb4>
	}
	if(LOC_Result == 1)
 80025b0:	7f7b      	ldrb	r3, [r7, #29]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d109      	bne.n	80025ca <SystemEdit+0x10e>
	{
		MCAL_UART_SendString(USART1, addString("\r\n****************** Driver Not Found ****************** \r\n\0"), '\0');
 80025b6:	2200      	movs	r2, #0
 80025b8:	4992      	ldr	r1, [pc, #584]	; (8002804 <SystemEdit+0x348>)
 80025ba:	488c      	ldr	r0, [pc, #560]	; (80027ec <SystemEdit+0x330>)
 80025bc:	f7ff f8cc 	bl	8001758 <MCAL_UART_SendString>
		LCD_Edit_Process(FAILED_OPERATION);
 80025c0:	2046      	movs	r0, #70	; 0x46
 80025c2:	f7ff fb63 	bl	8001c8c <LCD_Edit_Process>
		return FAILED_OPERATION;
 80025c6:	2346      	movs	r3, #70	; 0x46
 80025c8:	e109      	b.n	80027de <SystemEdit+0x322>
	}

	/* UART & LCD Display ID message	*/
	MCAL_UART_SendString(USART1, addString("\r\nDriver ID: \0"), '\0');
 80025ca:	2200      	movs	r2, #0
 80025cc:	498e      	ldr	r1, [pc, #568]	; (8002808 <SystemEdit+0x34c>)
 80025ce:	4887      	ldr	r0, [pc, #540]	; (80027ec <SystemEdit+0x330>)
 80025d0:	f7ff f8c2 	bl	8001758 <MCAL_UART_SendString>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 80025d4:	2090      	movs	r0, #144	; 0x90
 80025d6:	f7fd ff99 	bl	800050c <HAL_LCD_Send_Command>
	HAL_LCD_Send_String("Driver ID:");
 80025da:	488c      	ldr	r0, [pc, #560]	; (800280c <SystemEdit+0x350>)
 80025dc:	f7fe f875 	bl	80006ca <HAL_LCD_Send_String>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 80025e0:	20d0      	movs	r0, #208	; 0xd0
 80025e2:	f7fd ff93 	bl	800050c <HAL_LCD_Send_Command>

	/*	get ID	*/
	do
	{
		MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	487f      	ldr	r0, [pc, #508]	; (80027ec <SystemEdit+0x330>)
 80025ee:	f7ff f8d5 	bl	800179c <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	487c      	ldr	r0, [pc, #496]	; (80027ec <SystemEdit+0x330>)
 80025fa:	f7ff f86d 	bl	80016d8 <MCAL_UART_SendData>
		HAL_LCD_Send_Data(LOC_ReceivedData);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ffe3 	bl	80005cc <HAL_LCD_Send_Data>
		LOC_ID[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 8002606:	7ffb      	ldrb	r3, [r7, #31]
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	f107 0120 	add.w	r1, r7, #32
 800260e:	440b      	add	r3, r1
 8002610:	f803 2c18 	strb.w	r2, [r3, #-24]
		LOC_Counter++;
 8002614:	7ffb      	ldrb	r3, [r7, #31]
 8002616:	3301      	adds	r3, #1
 8002618:	77fb      	strb	r3, [r7, #31]
	}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	2b0a      	cmp	r3, #10
 800261e:	d802      	bhi.n	8002626 <SystemEdit+0x16a>
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b0d      	cmp	r3, #13
 8002624:	d1df      	bne.n	80025e6 <SystemEdit+0x12a>
	LOC_ID[LOC_Counter] = '\0';
 8002626:	7ffb      	ldrb	r3, [r7, #31]
 8002628:	f107 0220 	add.w	r2, r7, #32
 800262c:	4413      	add	r3, r2
 800262e:	2200      	movs	r2, #0
 8002630:	f803 2c18 	strb.w	r2, [r3, #-24]
	LOC_Counter = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	77fb      	strb	r3, [r7, #31]
	LOC_ReceivedData = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	71fb      	strb	r3, [r7, #7]


	/*	Check ID	*/
	if(LOC_Result == 0 && LOC_DriverIndex <= Glob_NumberOfCurrentUsers && sGlobDriverArr[LOC_DriverIndex].Free_Index == 0)
 800263c:	7f7b      	ldrb	r3, [r7, #29]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d125      	bne.n	800268e <SystemEdit+0x1d2>
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <SystemEdit+0x344>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	7fba      	ldrb	r2, [r7, #30]
 8002648:	429a      	cmp	r2, r3
 800264a:	d820      	bhi.n	800268e <SystemEdit+0x1d2>
 800264c:	7fba      	ldrb	r2, [r7, #30]
 800264e:	496b      	ldr	r1, [pc, #428]	; (80027fc <SystemEdit+0x340>)
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	440b      	add	r3, r1
 800265c:	3316      	adds	r3, #22
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d114      	bne.n	800268e <SystemEdit+0x1d2>
	{
		LOC_Result = 1;
 8002664:	2301      	movs	r3, #1
 8002666:	777b      	strb	r3, [r7, #29]
		LOC_Result = CompareStrings(LOC_ID, &sGlobDriverArr[LOC_DriverIndex].ID);
 8002668:	7fba      	ldrb	r2, [r7, #30]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	3308      	adds	r3, #8
 8002676:	4a61      	ldr	r2, [pc, #388]	; (80027fc <SystemEdit+0x340>)
 8002678:	4413      	add	r3, r2
 800267a:	1cda      	adds	r2, r3, #3
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fbe6 	bl	8002e54 <CompareStrings>
 8002688:	4603      	mov	r3, r0
 800268a:	777b      	strb	r3, [r7, #29]
 800268c:	e001      	b.n	8002692 <SystemEdit+0x1d6>
	}
	else
	{
		LOC_Result = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	777b      	strb	r3, [r7, #29]
	}

	/*	Valid Name & ID	*/
	if(LOC_Result == 0)
 8002692:	7f7b      	ldrb	r3, [r7, #29]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 8099 	bne.w	80027cc <SystemEdit+0x310>
	{

		MCAL_UART_SendString(USART1, addString("\r\n****************** Driver Found ****************** \r\n\0"), '\0');
 800269a:	2200      	movs	r2, #0
 800269c:	495c      	ldr	r1, [pc, #368]	; (8002810 <SystemEdit+0x354>)
 800269e:	4853      	ldr	r0, [pc, #332]	; (80027ec <SystemEdit+0x330>)
 80026a0:	f7ff f85a 	bl	8001758 <MCAL_UART_SendString>
		/* update name	*/
		MCAL_UART_SendString(USART1, addString("UPDATE NAME: \0"), '\0');
 80026a4:	2200      	movs	r2, #0
 80026a6:	495b      	ldr	r1, [pc, #364]	; (8002814 <SystemEdit+0x358>)
 80026a8:	4850      	ldr	r0, [pc, #320]	; (80027ec <SystemEdit+0x330>)
 80026aa:	f7ff f855 	bl	8001758 <MCAL_UART_SendString>
		HAL_LCD_Send_Command(LCD_DISP_ON);
 80026ae:	200c      	movs	r0, #12
 80026b0:	f7fd ff2c 	bl	800050c <HAL_LCD_Send_Command>
		LCD_clear_screen();
 80026b4:	f7fd fe86 	bl	80003c4 <LCD_clear_screen>
		HAL_LCD_Send_String("Driver Username");
 80026b8:	4857      	ldr	r0, [pc, #348]	; (8002818 <SystemEdit+0x35c>)
 80026ba:	f7fe f806 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Set_Courser(2, 0);
 80026be:	2100      	movs	r1, #0
 80026c0:	2002      	movs	r0, #2
 80026c2:	f7fd fe21 	bl	8000308 <HAL_LCD_Set_Courser>
		HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 80026c6:	200f      	movs	r0, #15
 80026c8:	f7fd ff20 	bl	800050c <HAL_LCD_Send_Command>

		/*	Store Name	*/
		do{
			MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	2200      	movs	r2, #0
 80026d0:	4619      	mov	r1, r3
 80026d2:	4846      	ldr	r0, [pc, #280]	; (80027ec <SystemEdit+0x330>)
 80026d4:	f7ff f862 	bl	800179c <MCAL_UART_ReceiveData>
			MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	2200      	movs	r2, #0
 80026dc:	4619      	mov	r1, r3
 80026de:	4843      	ldr	r0, [pc, #268]	; (80027ec <SystemEdit+0x330>)
 80026e0:	f7fe fffa 	bl	80016d8 <MCAL_UART_SendData>
			sGlobDriverArr[LOC_DriverIndex].name[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 80026e4:	7fba      	ldrb	r2, [r7, #30]
 80026e6:	7ff9      	ldrb	r1, [r7, #31]
 80026e8:	79fc      	ldrb	r4, [r7, #7]
 80026ea:	4844      	ldr	r0, [pc, #272]	; (80027fc <SystemEdit+0x340>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	4403      	add	r3, r0
 80026f8:	440b      	add	r3, r1
 80026fa:	4622      	mov	r2, r4
 80026fc:	701a      	strb	r2, [r3, #0]
			LOC_Counter++;
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	3301      	adds	r3, #1
 8002702:	77fb      	strb	r3, [r7, #31]
		}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 8002704:	7ffb      	ldrb	r3, [r7, #31]
 8002706:	2b0a      	cmp	r3, #10
 8002708:	d802      	bhi.n	8002710 <SystemEdit+0x254>
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b0d      	cmp	r3, #13
 800270e:	d1dd      	bne.n	80026cc <SystemEdit+0x210>
		sGlobDriverArr[LOC_DriverIndex].ID[LOC_Counter] = '\0';
 8002710:	7fba      	ldrb	r2, [r7, #30]
 8002712:	7ff9      	ldrb	r1, [r7, #31]
 8002714:	4839      	ldr	r0, [pc, #228]	; (80027fc <SystemEdit+0x340>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	4403      	add	r3, r0
 8002722:	440b      	add	r3, r1
 8002724:	330b      	adds	r3, #11
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
		LOC_Counter=0;
 800272a:	2300      	movs	r3, #0
 800272c:	77fb      	strb	r3, [r7, #31]
		LOC_ReceivedData = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	71fb      	strb	r3, [r7, #7]

		/*	UART & LCD Add ID message	*/
		MCAL_UART_SendString(USART1, addString("\r\nUPDATE ID: \0"), '\0');
 8002732:	2200      	movs	r2, #0
 8002734:	4939      	ldr	r1, [pc, #228]	; (800281c <SystemEdit+0x360>)
 8002736:	482d      	ldr	r0, [pc, #180]	; (80027ec <SystemEdit+0x330>)
 8002738:	f7ff f80e 	bl	8001758 <MCAL_UART_SendString>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 800273c:	2090      	movs	r0, #144	; 0x90
 800273e:	f7fd fee5 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_String("Driver ID");
 8002742:	4837      	ldr	r0, [pc, #220]	; (8002820 <SystemEdit+0x364>)
 8002744:	f7fd ffc1 	bl	80006ca <HAL_LCD_Send_String>
		HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8002748:	20d0      	movs	r0, #208	; 0xd0
 800274a:	f7fd fedf 	bl	800050c <HAL_LCD_Send_Command>
		HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 800274e:	200f      	movs	r0, #15
 8002750:	f7fd fedc 	bl	800050c <HAL_LCD_Send_Command>

		/*	Store ID	*/
		do{
			MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 8002754:	1dfb      	adds	r3, r7, #7
 8002756:	2200      	movs	r2, #0
 8002758:	4619      	mov	r1, r3
 800275a:	4824      	ldr	r0, [pc, #144]	; (80027ec <SystemEdit+0x330>)
 800275c:	f7ff f81e 	bl	800179c <MCAL_UART_ReceiveData>
			MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	2200      	movs	r2, #0
 8002764:	4619      	mov	r1, r3
 8002766:	4821      	ldr	r0, [pc, #132]	; (80027ec <SystemEdit+0x330>)
 8002768:	f7fe ffb6 	bl	80016d8 <MCAL_UART_SendData>
			sGlobDriverArr[LOC_DriverIndex].ID[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 800276c:	7fba      	ldrb	r2, [r7, #30]
 800276e:	7ff9      	ldrb	r1, [r7, #31]
 8002770:	79fc      	ldrb	r4, [r7, #7]
 8002772:	4822      	ldr	r0, [pc, #136]	; (80027fc <SystemEdit+0x340>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	4403      	add	r3, r0
 8002780:	440b      	add	r3, r1
 8002782:	330b      	adds	r3, #11
 8002784:	4622      	mov	r2, r4
 8002786:	701a      	strb	r2, [r3, #0]
			LOC_Counter++;
 8002788:	7ffb      	ldrb	r3, [r7, #31]
 800278a:	3301      	adds	r3, #1
 800278c:	77fb      	strb	r3, [r7, #31]
		}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 800278e:	7ffb      	ldrb	r3, [r7, #31]
 8002790:	2b0a      	cmp	r3, #10
 8002792:	d802      	bhi.n	800279a <SystemEdit+0x2de>
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b0d      	cmp	r3, #13
 8002798:	d1dc      	bne.n	8002754 <SystemEdit+0x298>
		sGlobDriverArr[LOC_DriverIndex].ID[LOC_Counter] = '\0';
 800279a:	7fba      	ldrb	r2, [r7, #30]
 800279c:	7ff9      	ldrb	r1, [r7, #31]
 800279e:	4817      	ldr	r0, [pc, #92]	; (80027fc <SystemEdit+0x340>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	4403      	add	r3, r0
 80027ac:	440b      	add	r3, r1
 80027ae:	330b      	adds	r3, #11
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
		LOC_Counter=0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	77fb      	strb	r3, [r7, #31]

		/*	Successful Edit	*/
		MCAL_UART_SendString(USART1, addString("\r\n****************** SUCCESSFUL EDIT ****************** \r\n\0"), '\0');
 80027b8:	2200      	movs	r2, #0
 80027ba:	491a      	ldr	r1, [pc, #104]	; (8002824 <SystemEdit+0x368>)
 80027bc:	480b      	ldr	r0, [pc, #44]	; (80027ec <SystemEdit+0x330>)
 80027be:	f7fe ffcb 	bl	8001758 <MCAL_UART_SendString>
		LCD_Edit_Process(SUCCESSFUL_OPERATION);
 80027c2:	2053      	movs	r0, #83	; 0x53
 80027c4:	f7ff fa62 	bl	8001c8c <LCD_Edit_Process>
		return SUCCESSFUL_OPERATION;
 80027c8:	2353      	movs	r3, #83	; 0x53
 80027ca:	e008      	b.n	80027de <SystemEdit+0x322>
	}
	else
	{
		MCAL_UART_SendString(USART1, addString("\r\n****************** UNSUCCESSFUL EDIT ****************** \r\n\0"), '\0');
 80027cc:	2200      	movs	r2, #0
 80027ce:	4916      	ldr	r1, [pc, #88]	; (8002828 <SystemEdit+0x36c>)
 80027d0:	4806      	ldr	r0, [pc, #24]	; (80027ec <SystemEdit+0x330>)
 80027d2:	f7fe ffc1 	bl	8001758 <MCAL_UART_SendString>
		LCD_Edit_Process(FAILED_OPERATION);
 80027d6:	2046      	movs	r0, #70	; 0x46
 80027d8:	f7ff fa58 	bl	8001c8c <LCD_Edit_Process>
		return FAILED_OPERATION;
 80027dc:	2346      	movs	r3, #70	; 0x46
	}
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	08003568 	.word	0x08003568
 80027ec:	40013800 	.word	0x40013800
 80027f0:	080033a4 	.word	0x080033a4
 80027f4:	080035a0 	.word	0x080035a0
 80027f8:	080035ac 	.word	0x080035ac
 80027fc:	200001a0 	.word	0x200001a0
 8002800:	200000c5 	.word	0x200000c5
 8002804:	080035bc 	.word	0x080035bc
 8002808:	080035fc 	.word	0x080035fc
 800280c:	0800360c 	.word	0x0800360c
 8002810:	08003618 	.word	0x08003618
 8002814:	08003654 	.word	0x08003654
 8002818:	080034e8 	.word	0x080034e8
 800281c:	08003664 	.word	0x08003664
 8002820:	08003500 	.word	0x08003500
 8002824:	08003674 	.word	0x08003674
 8002828:	080036b0 	.word	0x080036b0

0800282c <SystemSearchDriver>:

uint8_t SystemSearchDriver(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
	uint8_t LOC_Counter = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	71fb      	strb	r3, [r7, #7]
	uint8_t LOC_result = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	71bb      	strb	r3, [r7, #6]
	/*		validate access		*/
	for(LOC_Counter =0; LOC_Counter < NUMBER_OF_DRIVERS; LOC_Counter++)
 800283a:	2300      	movs	r3, #0
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	e015      	b.n	800286c <SystemSearchDriver+0x40>
	{
		/*	Search by ID	*/
		LOC_result = strcmp(sGlobDriverArr[LOC_Counter].ID, ID_arr);
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	3308      	adds	r3, #8
 800284e:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <SystemSearchDriver+0x54>)
 8002850:	4413      	add	r3, r2
 8002852:	3303      	adds	r3, #3
 8002854:	490b      	ldr	r1, [pc, #44]	; (8002884 <SystemSearchDriver+0x58>)
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fc8a 	bl	8000170 <strcmp>
 800285c:	4603      	mov	r3, r0
 800285e:	71bb      	strb	r3, [r7, #6]
		if(LOC_result == 0)
 8002860:	79bb      	ldrb	r3, [r7, #6]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <SystemSearchDriver+0x48>
	for(LOC_Counter =0; LOC_Counter < NUMBER_OF_DRIVERS; LOC_Counter++)
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	3301      	adds	r3, #1
 800286a:	71fb      	strb	r3, [r7, #7]
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d9e6      	bls.n	8002840 <SystemSearchDriver+0x14>
 8002872:	e000      	b.n	8002876 <SystemSearchDriver+0x4a>
			break;
 8002874:	bf00      	nop
	}
	return LOC_result;
 8002876:	79bb      	ldrb	r3, [r7, #6]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200001a0 	.word	0x200001a0
 8002884:	20000194 	.word	0x20000194

08002888 <EntranceSendTrue>:

void EntranceSendTrue(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	Master_Response = 'T';
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <EntranceSendTrue+0x48>)
 800288e:	2254      	movs	r2, #84	; 0x54
 8002890:	701a      	strb	r2, [r3, #0]

	//1. Set SS Low
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	2108      	movs	r1, #8
 8002896:	480f      	ldr	r0, [pc, #60]	; (80028d4 <EntranceSendTrue+0x4c>)
 8002898:	f7fe facd 	bl	8000e36 <MCAL_GPIO_WritePin>

	//2. Send data and receive through SPI
	MCAL_SPI_TxRx(SPI1, &Master_Response, PollingEnable);
 800289c:	2200      	movs	r2, #0
 800289e:	490c      	ldr	r1, [pc, #48]	; (80028d0 <EntranceSendTrue+0x48>)
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <EntranceSendTrue+0x50>)
 80028a2:	f7fe fd4f 	bl	8001344 <MCAL_SPI_TxRx>

	//3. Send ACK to Admin through UART
	MCAL_UART_SendString(USART1, "Valid Request *********\r\n\r\n", '\0');
 80028a6:	2200      	movs	r2, #0
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <EntranceSendTrue+0x54>)
 80028aa:	480d      	ldr	r0, [pc, #52]	; (80028e0 <EntranceSendTrue+0x58>)
 80028ac:	f7fe ff54 	bl	8001758 <MCAL_UART_SendString>

	//4. Reset SS to idle (High)
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_SET);
 80028b0:	2201      	movs	r2, #1
 80028b2:	2108      	movs	r1, #8
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <EntranceSendTrue+0x4c>)
 80028b6:	f7fe fabe 	bl	8000e36 <MCAL_GPIO_WritePin>

	//5. Decrease availabe slots
	Glob_Available_Slots--;
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <EntranceSendTrue+0x5c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	3b01      	subs	r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <EntranceSendTrue+0x5c>)
 80028c4:	701a      	strb	r2, [r3, #0]

	Master_Response = 'w';
 80028c6:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <EntranceSendTrue+0x48>)
 80028c8:	2277      	movs	r2, #119	; 0x77
 80028ca:	701a      	strb	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000028 	.word	0x20000028
 80028d4:	40010800 	.word	0x40010800
 80028d8:	40013000 	.word	0x40013000
 80028dc:	080036f0 	.word	0x080036f0
 80028e0:	40013800 	.word	0x40013800
 80028e4:	20000085 	.word	0x20000085

080028e8 <EntranceSendFalse>:

void EntranceSendFalse(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	Master_Response = 'F';
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <EntranceSendFalse+0x3c>)
 80028ee:	2246      	movs	r2, #70	; 0x46
 80028f0:	701a      	strb	r2, [r3, #0]

	//1. Set SS Low
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2108      	movs	r1, #8
 80028f6:	480c      	ldr	r0, [pc, #48]	; (8002928 <EntranceSendFalse+0x40>)
 80028f8:	f7fe fa9d 	bl	8000e36 <MCAL_GPIO_WritePin>

	//2. Send data and receive through SPI
	MCAL_SPI_TxRx(SPI1, &Master_Response, PollingEnable);
 80028fc:	2200      	movs	r2, #0
 80028fe:	4909      	ldr	r1, [pc, #36]	; (8002924 <EntranceSendFalse+0x3c>)
 8002900:	480a      	ldr	r0, [pc, #40]	; (800292c <EntranceSendFalse+0x44>)
 8002902:	f7fe fd1f 	bl	8001344 <MCAL_SPI_TxRx>

	MCAL_UART_SendString(USART1, "InValid Request *********\r\n\r\n", '\0');
 8002906:	2200      	movs	r2, #0
 8002908:	4909      	ldr	r1, [pc, #36]	; (8002930 <EntranceSendFalse+0x48>)
 800290a:	480a      	ldr	r0, [pc, #40]	; (8002934 <EntranceSendFalse+0x4c>)
 800290c:	f7fe ff24 	bl	8001758 <MCAL_UART_SendString>

	//3. Reset SS to idle (High)
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	2108      	movs	r1, #8
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <EntranceSendFalse+0x40>)
 8002916:	f7fe fa8e 	bl	8000e36 <MCAL_GPIO_WritePin>

	Master_Response = 'w';
 800291a:	4b02      	ldr	r3, [pc, #8]	; (8002924 <EntranceSendFalse+0x3c>)
 800291c:	2277      	movs	r2, #119	; 0x77
 800291e:	701a      	strb	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000028 	.word	0x20000028
 8002928:	40010800 	.word	0x40010800
 800292c:	40013000 	.word	0x40013000
 8002930:	0800370c 	.word	0x0800370c
 8002934:	40013800 	.word	0x40013800

08002938 <EntranceCheckID>:

void EntranceCheckID(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
	uint8_t LOC_result = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	71fb      	strb	r3, [r7, #7]
	LOC_result = SystemSearchDriver();
 8002942:	f7ff ff73 	bl	800282c <SystemSearchDriver>
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]

	MCAL_UART_SendString(USART1, addString("********* ENTRANCE Request || ID: \0"), '\0');
 800294a:	2200      	movs	r2, #0
 800294c:	4921      	ldr	r1, [pc, #132]	; (80029d4 <EntranceCheckID+0x9c>)
 800294e:	4822      	ldr	r0, [pc, #136]	; (80029d8 <EntranceCheckID+0xa0>)
 8002950:	f7fe ff02 	bl	8001758 <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, ID_arr, '\0');
 8002954:	2200      	movs	r2, #0
 8002956:	4921      	ldr	r1, [pc, #132]	; (80029dc <EntranceCheckID+0xa4>)
 8002958:	481f      	ldr	r0, [pc, #124]	; (80029d8 <EntranceCheckID+0xa0>)
 800295a:	f7fe fefd 	bl	8001758 <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, " || ", '\0');
 800295e:	2200      	movs	r2, #0
 8002960:	491f      	ldr	r1, [pc, #124]	; (80029e0 <EntranceCheckID+0xa8>)
 8002962:	481d      	ldr	r0, [pc, #116]	; (80029d8 <EntranceCheckID+0xa0>)
 8002964:	f7fe fef8 	bl	8001758 <MCAL_UART_SendString>

	/* Inform Admin with request */
	LCD_clear_screen();
 8002968:	f7fd fd2c 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("----ENTRACE---------Request-----ID: ");
 800296c:	481d      	ldr	r0, [pc, #116]	; (80029e4 <EntranceCheckID+0xac>)
 800296e:	f7fd feac 	bl	80006ca <HAL_LCD_Send_String>

	for(int i=0; i<10; i++)
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e009      	b.n	800298c <EntranceCheckID+0x54>
		HAL_LCD_Send_Data(ID_arr[i]);
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <EntranceCheckID+0xa4>)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fe23 	bl	80005cc <HAL_LCD_Send_Data>
	for(int i=0; i<10; i++)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3301      	adds	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b09      	cmp	r3, #9
 8002990:	ddf2      	ble.n	8002978 <EntranceCheckID+0x40>

	HAL_LCD_Send_String("     ");
 8002992:	4815      	ldr	r0, [pc, #84]	; (80029e8 <EntranceCheckID+0xb0>)
 8002994:	f7fd fe99 	bl	80006ca <HAL_LCD_Send_String>

	if(LOC_result == 0)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <EntranceCheckID+0x6c>
		EntranceSendTrue();
 800299e:	f7ff ff73 	bl	8002888 <EntranceSendTrue>
 80029a2:	e001      	b.n	80029a8 <EntranceCheckID+0x70>
	else
		EntranceSendFalse();
 80029a4:	f7ff ffa0 	bl	80028e8 <EntranceSendFalse>

	for(int i=0; i<10; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e007      	b.n	80029be <EntranceCheckID+0x86>
		ID_arr[i] = '\0';
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <EntranceCheckID+0xa4>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4413      	add	r3, r2
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<10; i++)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3301      	adds	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	ddf4      	ble.n	80029ae <EntranceCheckID+0x76>

	ID_Counter = 0;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <EntranceCheckID+0xb4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	0800372c 	.word	0x0800372c
 80029d8:	40013800 	.word	0x40013800
 80029dc:	20000194 	.word	0x20000194
 80029e0:	08003750 	.word	0x08003750
 80029e4:	08003758 	.word	0x08003758
 80029e8:	08003780 	.word	0x08003780
 80029ec:	200000c4 	.word	0x200000c4

080029f0 <ExitSendTrue>:

void ExitSendTrue(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	Master_Response = 'T';
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <ExitSendTrue+0x48>)
 80029f6:	2254      	movs	r2, #84	; 0x54
 80029f8:	701a      	strb	r2, [r3, #0]

	//1. Set SS Low
	MCAL_GPIO_WritePin(SS_Port, Exit_SS, GPIO_PIN_RESET);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2102      	movs	r1, #2
 80029fe:	480f      	ldr	r0, [pc, #60]	; (8002a3c <ExitSendTrue+0x4c>)
 8002a00:	f7fe fa19 	bl	8000e36 <MCAL_GPIO_WritePin>

	//2. Send data and receive through SPI
	MCAL_SPI_TxRx(SPI1, &Master_Response, PollingEnable);
 8002a04:	2200      	movs	r2, #0
 8002a06:	490c      	ldr	r1, [pc, #48]	; (8002a38 <ExitSendTrue+0x48>)
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <ExitSendTrue+0x50>)
 8002a0a:	f7fe fc9b 	bl	8001344 <MCAL_SPI_TxRx>

	//3. Send ACK to Admin through UART
	MCAL_UART_SendString(USART1, "Valid Request *********\r\n\r\n", '\0');
 8002a0e:	2200      	movs	r2, #0
 8002a10:	490c      	ldr	r1, [pc, #48]	; (8002a44 <ExitSendTrue+0x54>)
 8002a12:	480d      	ldr	r0, [pc, #52]	; (8002a48 <ExitSendTrue+0x58>)
 8002a14:	f7fe fea0 	bl	8001758 <MCAL_UART_SendString>


	//4. Reset SS to idle (High)
	MCAL_GPIO_WritePin(SS_Port, Exit_SS, GPIO_PIN_SET);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4807      	ldr	r0, [pc, #28]	; (8002a3c <ExitSendTrue+0x4c>)
 8002a1e:	f7fe fa0a 	bl	8000e36 <MCAL_GPIO_WritePin>

	//5. Decrease availabe slots
	Glob_Available_Slots++;
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <ExitSendTrue+0x5c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <ExitSendTrue+0x5c>)
 8002a2c:	701a      	strb	r2, [r3, #0]

	Master_Response = 'w';
 8002a2e:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <ExitSendTrue+0x48>)
 8002a30:	2277      	movs	r2, #119	; 0x77
 8002a32:	701a      	strb	r2, [r3, #0]
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000028 	.word	0x20000028
 8002a3c:	40010800 	.word	0x40010800
 8002a40:	40013000 	.word	0x40013000
 8002a44:	080036f0 	.word	0x080036f0
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	20000085 	.word	0x20000085

08002a50 <ExitSendFalse>:

void ExitSendFalse(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	Master_Response = 'F';
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <ExitSendFalse+0x3c>)
 8002a56:	2246      	movs	r2, #70	; 0x46
 8002a58:	701a      	strb	r2, [r3, #0]

	//1. Set SS Low
	MCAL_GPIO_WritePin(SS_Port, Exit_SS, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	480c      	ldr	r0, [pc, #48]	; (8002a90 <ExitSendFalse+0x40>)
 8002a60:	f7fe f9e9 	bl	8000e36 <MCAL_GPIO_WritePin>

	//2. Send data and receive through SPI
	MCAL_SPI_TxRx(SPI1, &Master_Response, PollingEnable);
 8002a64:	2200      	movs	r2, #0
 8002a66:	4909      	ldr	r1, [pc, #36]	; (8002a8c <ExitSendFalse+0x3c>)
 8002a68:	480a      	ldr	r0, [pc, #40]	; (8002a94 <ExitSendFalse+0x44>)
 8002a6a:	f7fe fc6b 	bl	8001344 <MCAL_SPI_TxRx>

	MCAL_UART_SendString(USART1, "InValid Request *********\r\n\r\n", '\0');
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <ExitSendFalse+0x48>)
 8002a72:	480a      	ldr	r0, [pc, #40]	; (8002a9c <ExitSendFalse+0x4c>)
 8002a74:	f7fe fe70 	bl	8001758 <MCAL_UART_SendString>

	//3. Reset SS to idle (High)
	MCAL_GPIO_WritePin(SS_Port, Exit_SS, GPIO_PIN_SET);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4804      	ldr	r0, [pc, #16]	; (8002a90 <ExitSendFalse+0x40>)
 8002a7e:	f7fe f9da 	bl	8000e36 <MCAL_GPIO_WritePin>

	Master_Response = 'w';
 8002a82:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <ExitSendFalse+0x3c>)
 8002a84:	2277      	movs	r2, #119	; 0x77
 8002a86:	701a      	strb	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000028 	.word	0x20000028
 8002a90:	40010800 	.word	0x40010800
 8002a94:	40013000 	.word	0x40013000
 8002a98:	0800370c 	.word	0x0800370c
 8002a9c:	40013800 	.word	0x40013800

08002aa0 <ExitCheckID>:

void ExitCheckID(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
	uint8_t LOC_result = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	71fb      	strb	r3, [r7, #7]
	LOC_result = SystemSearchDriver();
 8002aaa:	f7ff febf 	bl	800282c <SystemSearchDriver>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]

	MCAL_UART_SendString(USART1, addString("********* EXIT   Request   || ID: \0"), '\0');
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4921      	ldr	r1, [pc, #132]	; (8002b3c <ExitCheckID+0x9c>)
 8002ab6:	4822      	ldr	r0, [pc, #136]	; (8002b40 <ExitCheckID+0xa0>)
 8002ab8:	f7fe fe4e 	bl	8001758 <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, ID_arr, '\0');
 8002abc:	2200      	movs	r2, #0
 8002abe:	4921      	ldr	r1, [pc, #132]	; (8002b44 <ExitCheckID+0xa4>)
 8002ac0:	481f      	ldr	r0, [pc, #124]	; (8002b40 <ExitCheckID+0xa0>)
 8002ac2:	f7fe fe49 	bl	8001758 <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, " || ", '\0');
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	491f      	ldr	r1, [pc, #124]	; (8002b48 <ExitCheckID+0xa8>)
 8002aca:	481d      	ldr	r0, [pc, #116]	; (8002b40 <ExitCheckID+0xa0>)
 8002acc:	f7fe fe44 	bl	8001758 <MCAL_UART_SendString>

	/* Inform Admin with request */
	LCD_clear_screen();
 8002ad0:	f7fd fc78 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String("----- EXIT ---------Request-----ID: ");
 8002ad4:	481d      	ldr	r0, [pc, #116]	; (8002b4c <ExitCheckID+0xac>)
 8002ad6:	f7fd fdf8 	bl	80006ca <HAL_LCD_Send_String>
	for(int i=0; i<10; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e009      	b.n	8002af4 <ExitCheckID+0x54>
	{
		HAL_LCD_Send_Data(ID_arr[i]);
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <ExitCheckID+0xa4>)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd6f 	bl	80005cc <HAL_LCD_Send_Data>
	for(int i=0; i<10; i++)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	ddf2      	ble.n	8002ae0 <ExitCheckID+0x40>
	}


	HAL_LCD_Send_String("     ");
 8002afa:	4815      	ldr	r0, [pc, #84]	; (8002b50 <ExitCheckID+0xb0>)
 8002afc:	f7fd fde5 	bl	80006ca <HAL_LCD_Send_String>

	if(LOC_result == 0)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <ExitCheckID+0x6c>
		ExitSendTrue();
 8002b06:	f7ff ff73 	bl	80029f0 <ExitSendTrue>
 8002b0a:	e001      	b.n	8002b10 <ExitCheckID+0x70>
	else
		ExitSendFalse();
 8002b0c:	f7ff ffa0 	bl	8002a50 <ExitSendFalse>

	for(int i=0; i<10; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	e007      	b.n	8002b26 <ExitCheckID+0x86>
		ID_arr[i] = '\0';
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <ExitCheckID+0xa4>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<10; i++)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	3301      	adds	r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	ddf4      	ble.n	8002b16 <ExitCheckID+0x76>

	ID_Counter = 0;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <ExitCheckID+0xb4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08003788 	.word	0x08003788
 8002b40:	40013800 	.word	0x40013800
 8002b44:	20000194 	.word	0x20000194
 8002b48:	08003750 	.word	0x08003750
 8002b4c:	080037ac 	.word	0x080037ac
 8002b50:	08003780 	.word	0x08003780
 8002b54:	200000c4 	.word	0x200000c4

08002b58 <DeleteProcess>:

/* ==============================================
 * 					GENERIC FCNs
 * ==============================================*/
uint8_t DeleteProcess(DeletingDrivers_t DeleteType)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	/*	check if we got users	*/
	if(Glob_NumberOfCurrentUsers != 0)
 8002b62:	4bb2      	ldr	r3, [pc, #712]	; (8002e2c <DeleteProcess+0x2d4>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 815b 	beq.w	8002e22 <DeleteProcess+0x2ca>
	{
		uint8_t LOC_Counter = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(DeleteType == DELT_ONE_DRIVER)
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 812b 	bne.w	8002dd0 <DeleteProcess+0x278>
		{
			/*	 variables	*/
			uint8_t LOC_Username[NAME_MAX_SIZE+1];
			uint8_t LOC_ID[ID_SIZE+1];
			uint8_t LOC_ReceivedData = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
			uint8_t LOC_DriverIndex = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uint8_t LOC_Result = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			/* UART & LCD Display name message	*/
			MCAL_UART_SendString(USART1, addString("\r\n****************** Delete Driver ****************** \r\n\0"), '\0');
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	49a8      	ldr	r1, [pc, #672]	; (8002e30 <DeleteProcess+0x2d8>)
 8002b8e:	48a9      	ldr	r0, [pc, #676]	; (8002e34 <DeleteProcess+0x2dc>)
 8002b90:	f7fe fde2 	bl	8001758 <MCAL_UART_SendString>
			MCAL_UART_SendString(USART1, addString("NAME: \0"), '\0');
 8002b94:	2200      	movs	r2, #0
 8002b96:	49a8      	ldr	r1, [pc, #672]	; (8002e38 <DeleteProcess+0x2e0>)
 8002b98:	48a6      	ldr	r0, [pc, #664]	; (8002e34 <DeleteProcess+0x2dc>)
 8002b9a:	f7fe fddd 	bl	8001758 <MCAL_UART_SendString>
			HAL_LCD_Send_Command(LCD_DISP_ON);
 8002b9e:	200c      	movs	r0, #12
 8002ba0:	f7fd fcb4 	bl	800050c <HAL_LCD_Send_Command>
			LCD_clear_screen();
 8002ba4:	f7fd fc0e 	bl	80003c4 <LCD_clear_screen>
			HAL_LCD_Send_String("Driver Name:");
 8002ba8:	48a4      	ldr	r0, [pc, #656]	; (8002e3c <DeleteProcess+0x2e4>)
 8002baa:	f7fd fd8e 	bl	80006ca <HAL_LCD_Send_String>
			HAL_LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW);
 8002bae:	20c0      	movs	r0, #192	; 0xc0
 8002bb0:	f7fd fcac 	bl	800050c <HAL_LCD_Send_Command>
			HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 8002bb4:	200f      	movs	r0, #15
 8002bb6:	f7fd fca9 	bl	800050c <HAL_LCD_Send_Command>

			/*	get name */
			do
			{
				MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 8002bba:	f107 030f 	add.w	r3, r7, #15
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	489c      	ldr	r0, [pc, #624]	; (8002e34 <DeleteProcess+0x2dc>)
 8002bc4:	f7fe fdea 	bl	800179c <MCAL_UART_ReceiveData>
				MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 8002bc8:	f107 030f 	add.w	r3, r7, #15
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4898      	ldr	r0, [pc, #608]	; (8002e34 <DeleteProcess+0x2dc>)
 8002bd2:	f7fe fd81 	bl	80016d8 <MCAL_UART_SendData>
				HAL_LCD_Send_Data(LOC_ReceivedData);
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fcf7 	bl	80005cc <HAL_LCD_Send_Data>
				LOC_Username[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 8002bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002be8:	440b      	add	r3, r1
 8002bea:	f803 2c10 	strb.w	r2, [r3, #-16]
				LOC_Counter++;
 8002bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfc:	2b0a      	cmp	r3, #10
 8002bfe:	d802      	bhi.n	8002c06 <DeleteProcess+0xae>
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b0d      	cmp	r3, #13
 8002c04:	d1d9      	bne.n	8002bba <DeleteProcess+0x62>
			LOC_Username[LOC_Counter] = '\0';
 8002c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c0e:	4413      	add	r3, r2
 8002c10:	2200      	movs	r2, #0
 8002c12:	f803 2c10 	strb.w	r2, [r3, #-16]
			LOC_Counter = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			LOC_ReceivedData = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]

			/*	searching	*/
			for(LOC_Counter = 0; LOC_Counter < Glob_NumberOfCurrentUsers; LOC_Counter++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c26:	e022      	b.n	8002c6e <DeleteProcess+0x116>
			{
				/*	Name Search	*/
				LOC_Result = CompareStrings(LOC_Username, sGlobDriverArr[LOC_Counter].name);
 8002c28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	4a82      	ldr	r2, [pc, #520]	; (8002e40 <DeleteProcess+0x2e8>)
 8002c38:	441a      	add	r2, r3
 8002c3a:	f107 0318 	add.w	r3, r7, #24
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f907 	bl	8002e54 <CompareStrings>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				if(LOC_Result == 0)
 8002c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <DeleteProcess+0x106>
				{
					LOC_DriverIndex = LOC_Counter;
 8002c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					break;
 8002c5c:	e00d      	b.n	8002c7a <DeleteProcess+0x122>
				}
				else
					LOC_Result = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			for(LOC_Counter = 0; LOC_Counter < Glob_NumberOfCurrentUsers; LOC_Counter++)
 8002c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c6e:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <DeleteProcess+0x2d4>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3d6      	bcc.n	8002c28 <DeleteProcess+0xd0>
			}
			if(LOC_Result == 1)
 8002c7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d109      	bne.n	8002c96 <DeleteProcess+0x13e>
			{
				MCAL_UART_SendString(USART1, addString("\r\n****************** UNSUCCESSFUL DELETE ****************** \r\n\0"), '\0');
 8002c82:	2200      	movs	r2, #0
 8002c84:	496f      	ldr	r1, [pc, #444]	; (8002e44 <DeleteProcess+0x2ec>)
 8002c86:	486b      	ldr	r0, [pc, #428]	; (8002e34 <DeleteProcess+0x2dc>)
 8002c88:	f7fe fd66 	bl	8001758 <MCAL_UART_SendString>
				LCD_Delete_Process(FAILED_OPERATION);
 8002c8c:	2046      	movs	r0, #70	; 0x46
 8002c8e:	f7fe ffaf 	bl	8001bf0 <LCD_Delete_Process>
				return FAILED_OPERATION;
 8002c92:	2346      	movs	r3, #70	; 0x46
 8002c94:	e0c5      	b.n	8002e22 <DeleteProcess+0x2ca>
			}

			/* UART & LCD Display ID message	*/
			MCAL_UART_SendString(USART1, addString("\r\nDriver ID: \0"), '\0');
 8002c96:	2200      	movs	r2, #0
 8002c98:	496b      	ldr	r1, [pc, #428]	; (8002e48 <DeleteProcess+0x2f0>)
 8002c9a:	4866      	ldr	r0, [pc, #408]	; (8002e34 <DeleteProcess+0x2dc>)
 8002c9c:	f7fe fd5c 	bl	8001758 <MCAL_UART_SendString>
			HAL_LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW);
 8002ca0:	2090      	movs	r0, #144	; 0x90
 8002ca2:	f7fd fc33 	bl	800050c <HAL_LCD_Send_Command>
			HAL_LCD_Send_String("Driver ID:");
 8002ca6:	4869      	ldr	r0, [pc, #420]	; (8002e4c <DeleteProcess+0x2f4>)
 8002ca8:	f7fd fd0f 	bl	80006ca <HAL_LCD_Send_String>
			HAL_LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW);
 8002cac:	20d0      	movs	r0, #208	; 0xd0
 8002cae:	f7fd fc2d 	bl	800050c <HAL_LCD_Send_Command>

			/*	get ID	*/
			do
			{
				MCAL_UART_ReceiveData(USART1, &LOC_ReceivedData, enable);
 8002cb2:	f107 030f 	add.w	r3, r7, #15
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4619      	mov	r1, r3
 8002cba:	485e      	ldr	r0, [pc, #376]	; (8002e34 <DeleteProcess+0x2dc>)
 8002cbc:	f7fe fd6e 	bl	800179c <MCAL_UART_ReceiveData>
				MCAL_UART_SendData(USART1, &LOC_ReceivedData, enable);
 8002cc0:	f107 030f 	add.w	r3, r7, #15
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	485a      	ldr	r0, [pc, #360]	; (8002e34 <DeleteProcess+0x2dc>)
 8002cca:	f7fe fd05 	bl	80016d8 <MCAL_UART_SendData>
				HAL_LCD_Send_Data(LOC_ReceivedData);
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc7b 	bl	80005cc <HAL_LCD_Send_Data>
				LOC_ID[LOC_Counter] = (uint8_t) LOC_ReceivedData;
 8002cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f803 2c18 	strb.w	r2, [r3, #-24]
				LOC_Counter++;
 8002ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cea:	3301      	adds	r3, #1
 8002cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}while((LOC_Counter <= NAME_MAX_SIZE) && (LOC_ReceivedData != UART_TERMINATE_CHAR));
 8002cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf4:	2b0a      	cmp	r3, #10
 8002cf6:	d802      	bhi.n	8002cfe <DeleteProcess+0x1a6>
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b0d      	cmp	r3, #13
 8002cfc:	d1d9      	bne.n	8002cb2 <DeleteProcess+0x15a>
			LOC_ID[LOC_Counter] = '\0';
 8002cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d06:	4413      	add	r3, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f803 2c18 	strb.w	r2, [r3, #-24]
			LOC_Counter = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			LOC_ReceivedData = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]


			/*	Check ID	*/
			if(LOC_Result == 0 && LOC_DriverIndex <= Glob_NumberOfCurrentUsers && sGlobDriverArr[LOC_DriverIndex].Free_Index == 0)
 8002d18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d12a      	bne.n	8002d76 <DeleteProcess+0x21e>
 8002d20:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <DeleteProcess+0x2d4>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d824      	bhi.n	8002d76 <DeleteProcess+0x21e>
 8002d2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d30:	4943      	ldr	r1, [pc, #268]	; (8002e40 <DeleteProcess+0x2e8>)
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3316      	adds	r3, #22
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d117      	bne.n	8002d76 <DeleteProcess+0x21e>
			{
				LOC_Result = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				LOC_Result = CompareStrings(LOC_ID, &sGlobDriverArr[LOC_DriverIndex].ID);
 8002d4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <DeleteProcess+0x2e8>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	1cda      	adds	r2, r3, #3
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f873 	bl	8002e54 <CompareStrings>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002d74:	e002      	b.n	8002d7c <DeleteProcess+0x224>
			}
			else
			{
				LOC_Result = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			}

			/*	Valid Name & ID	*/
			if(LOC_Result == 0)
 8002d7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d11b      	bne.n	8002dbc <DeleteProcess+0x264>
			{
				sGlobDriverArr[LOC_DriverIndex].Free_Index = 1;
 8002d84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d88:	492d      	ldr	r1, [pc, #180]	; (8002e40 <DeleteProcess+0x2e8>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	440b      	add	r3, r1
 8002d96:	3316      	adds	r3, #22
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
				Glob_NumberOfCurrentUsers--;
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <DeleteProcess+0x2d4>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <DeleteProcess+0x2d4>)
 8002da6:	701a      	strb	r2, [r3, #0]
				MCAL_UART_SendString(USART1, addString("\r\n****************** SUCCESSFUL DELETE ****************** \r\n\0"), '\0');
 8002da8:	2200      	movs	r2, #0
 8002daa:	4929      	ldr	r1, [pc, #164]	; (8002e50 <DeleteProcess+0x2f8>)
 8002dac:	4821      	ldr	r0, [pc, #132]	; (8002e34 <DeleteProcess+0x2dc>)
 8002dae:	f7fe fcd3 	bl	8001758 <MCAL_UART_SendString>
				LCD_Delete_Process(SUCCESSFUL_OPERATION);
 8002db2:	2053      	movs	r0, #83	; 0x53
 8002db4:	f7fe ff1c 	bl	8001bf0 <LCD_Delete_Process>
				return SUCCESSFUL_OPERATION;
 8002db8:	2353      	movs	r3, #83	; 0x53
 8002dba:	e032      	b.n	8002e22 <DeleteProcess+0x2ca>
			}
			else
			{
				MCAL_UART_SendString(USART1, addString("\r\n****************** UNSUCCESSFUL DELETE ****************** \r\n\0"), '\0');
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4921      	ldr	r1, [pc, #132]	; (8002e44 <DeleteProcess+0x2ec>)
 8002dc0:	481c      	ldr	r0, [pc, #112]	; (8002e34 <DeleteProcess+0x2dc>)
 8002dc2:	f7fe fcc9 	bl	8001758 <MCAL_UART_SendString>
				LCD_Delete_Process(FAILED_OPERATION);
 8002dc6:	2046      	movs	r0, #70	; 0x46
 8002dc8:	f7fe ff12 	bl	8001bf0 <LCD_Delete_Process>
				return FAILED_OPERATION;
 8002dcc:	2346      	movs	r3, #70	; 0x46
 8002dce:	e028      	b.n	8002e22 <DeleteProcess+0x2ca>
			}
		}
		/*	delete all users	*/
		else if (DeleteType == DELT_ALL_DRIVERS)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d125      	bne.n	8002e22 <DeleteProcess+0x2ca>
		{
			for(LOC_Counter = 0; LOC_Counter < NUMBER_OF_DRIVERS; LOC_Counter++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ddc:	e010      	b.n	8002e00 <DeleteProcess+0x2a8>
			{
				sGlobDriverArr[LOC_Counter].Free_Index = 1;
 8002dde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002de2:	4917      	ldr	r1, [pc, #92]	; (8002e40 <DeleteProcess+0x2e8>)
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	3316      	adds	r3, #22
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
			for(LOC_Counter = 0; LOC_Counter < NUMBER_OF_DRIVERS; LOC_Counter++)
 8002df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d9ea      	bls.n	8002dde <DeleteProcess+0x286>
			}
			Glob_NumberOfCurrentUsers = 0;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <DeleteProcess+0x2d4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
			MCAL_UART_SendString(USART1, addString("\r\n****************** SUCCESSFUL DELETE ****************** \r\n\0"), '\0');
 8002e0e:	2200      	movs	r2, #0
 8002e10:	490f      	ldr	r1, [pc, #60]	; (8002e50 <DeleteProcess+0x2f8>)
 8002e12:	4808      	ldr	r0, [pc, #32]	; (8002e34 <DeleteProcess+0x2dc>)
 8002e14:	f7fe fca0 	bl	8001758 <MCAL_UART_SendString>
			LCD_Delete_Process(SUCCESSFUL_OPERATION);
 8002e18:	2053      	movs	r0, #83	; 0x53
 8002e1a:	f7fe fee9 	bl	8001bf0 <LCD_Delete_Process>
			return SUCCESSFUL_OPERATION;
 8002e1e:	2353      	movs	r3, #83	; 0x53
 8002e20:	e7ff      	b.n	8002e22 <DeleteProcess+0x2ca>
		}
	}
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3728      	adds	r7, #40	; 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200000c5 	.word	0x200000c5
 8002e30:	080037d4 	.word	0x080037d4
 8002e34:	40013800 	.word	0x40013800
 8002e38:	080033a4 	.word	0x080033a4
 8002e3c:	080035ac 	.word	0x080035ac
 8002e40:	200001a0 	.word	0x200001a0
 8002e44:	08003810 	.word	0x08003810
 8002e48:	080035fc 	.word	0x080035fc
 8002e4c:	0800360c 	.word	0x0800360c
 8002e50:	08003850 	.word	0x08003850

08002e54 <CompareStrings>:
		LOC_DriverIndex++;
	}
}

uint8_t CompareStrings(uint8_t* S1, uint8_t* S2)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
	uint8_t LOC_Counter = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
	uint8_t LOC_Flag =0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73bb      	strb	r3, [r7, #14]
	while(S1[LOC_Counter] != '\0' && S2[LOC_Counter] != '\0')
 8002e66:	e00f      	b.n	8002e88 <CompareStrings+0x34>
	{
		if(S1[LOC_Counter] != S2[LOC_Counter])
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	6839      	ldr	r1, [r7, #0]
 8002e74:	440b      	add	r3, r1
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d002      	beq.n	8002e82 <CompareStrings+0x2e>
		{
			LOC_Flag =1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73bb      	strb	r3, [r7, #14]
			break;
 8002e80:	e00e      	b.n	8002ea0 <CompareStrings+0x4c>
		}
		LOC_Counter++;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	3301      	adds	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
	while(S1[LOC_Counter] != '\0' && S2[LOC_Counter] != '\0')
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <CompareStrings+0x4c>
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e3      	bne.n	8002e68 <CompareStrings+0x14>
	}
	return LOC_Flag;
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <First_SPI_Rx_Solution>:

void First_SPI_Rx_Solution(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
	uint8_t temp = '*';
 8002eb2:	232a      	movs	r3, #42	; 0x2a
 8002eb4:	71fb      	strb	r3, [r7, #7]

	//1. Set SS Low
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2108      	movs	r1, #8
 8002eba:	4809      	ldr	r0, [pc, #36]	; (8002ee0 <First_SPI_Rx_Solution+0x34>)
 8002ebc:	f7fd ffbb 	bl	8000e36 <MCAL_GPIO_WritePin>


	//2. Receive first data buffer (empty buffer) from slave
	MCAL_SPI_TxRx(SPI1, &temp, PollingEnable);
 8002ec0:	1dfb      	adds	r3, r7, #7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <First_SPI_Rx_Solution+0x38>)
 8002ec8:	f7fe fa3c 	bl	8001344 <MCAL_SPI_TxRx>

	//2. Reset SS to idle (High)
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_SET);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	2108      	movs	r1, #8
 8002ed0:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <First_SPI_Rx_Solution+0x34>)
 8002ed2:	f7fd ffb0 	bl	8000e36 <MCAL_GPIO_WritePin>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	40013000 	.word	0x40013000

08002ee8 <ECU2_ADMIN_Dashboard>:

/* =========================================================================
 * 							APIs Functions Definitions
 * =========================================================================*/
void ECU2_ADMIN_Dashboard(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
	uint8_t temp;

	/* Options menu	*/
	LCD_Option_Menu();
 8002eee:	f7fe fe1b 	bl	8001b28 <LCD_Option_Menu>
	/*do
	{
		Glob_key_pressed = HAL_keypad_get_key();
	}while((Glob_key_pressed != NULL) || (Glob_key_pressed == (uint8_t)KEYPAD_BACK_SYMBOL ));*/

	while((Glob_key_pressed != UART_TERMINATE_CHAR))
 8002ef2:	e023      	b.n	8002f3c <ECU2_ADMIN_Dashboard+0x54>
	{
		MCAL_UART_ReceiveData(USART1, &Glob_key_pressed, enable);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	491c      	ldr	r1, [pc, #112]	; (8002f68 <ECU2_ADMIN_Dashboard+0x80>)
 8002ef8:	481c      	ldr	r0, [pc, #112]	; (8002f6c <ECU2_ADMIN_Dashboard+0x84>)
 8002efa:	f7fe fc4f 	bl	800179c <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &Glob_key_pressed, enable);
 8002efe:	2200      	movs	r2, #0
 8002f00:	4919      	ldr	r1, [pc, #100]	; (8002f68 <ECU2_ADMIN_Dashboard+0x80>)
 8002f02:	481a      	ldr	r0, [pc, #104]	; (8002f6c <ECU2_ADMIN_Dashboard+0x84>)
 8002f04:	f7fe fbe8 	bl	80016d8 <MCAL_UART_SendData>
		if(Glob_key_pressed == OPTION_ADD)
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <ECU2_ADMIN_Dashboard+0x80>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b31      	cmp	r3, #49	; 0x31
 8002f0e:	d104      	bne.n	8002f1a <ECU2_ADMIN_Dashboard+0x32>
		{
			temp = SystemAdd();
 8002f10:	f7ff f990 	bl	8002234 <SystemAdd>
 8002f14:	4603      	mov	r3, r0
 8002f16:	71fb      	strb	r3, [r7, #7]
			break;
 8002f18:	e014      	b.n	8002f44 <ECU2_ADMIN_Dashboard+0x5c>
		}
		else if (Glob_key_pressed == OPTION_DELETE)
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <ECU2_ADMIN_Dashboard+0x80>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b32      	cmp	r3, #50	; 0x32
 8002f20:	d104      	bne.n	8002f2c <ECU2_ADMIN_Dashboard+0x44>
		{
			temp = SystemDelete();
 8002f22:	f7ff fa91 	bl	8002448 <SystemDelete>
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	e007      	b.n	8002f3c <ECU2_ADMIN_Dashboard+0x54>
		}
		else if (Glob_key_pressed == OPTION_EDIT)
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <ECU2_ADMIN_Dashboard+0x80>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b33      	cmp	r3, #51	; 0x33
 8002f32:	d103      	bne.n	8002f3c <ECU2_ADMIN_Dashboard+0x54>
		{
			temp = SystemEdit();
 8002f34:	f7ff fac2 	bl	80024bc <SystemEdit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	71fb      	strb	r3, [r7, #7]
	while((Glob_key_pressed != UART_TERMINATE_CHAR))
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <ECU2_ADMIN_Dashboard+0x80>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b0d      	cmp	r3, #13
 8002f42:	d1d7      	bne.n	8002ef4 <ECU2_ADMIN_Dashboard+0xc>
		EditUser();
		break;
	default:
		ECU2_Dashboard_APP();
	}*/
	HAL_LCD_Send_Data('(');
 8002f44:	2028      	movs	r0, #40	; 0x28
 8002f46:	f7fd fb41 	bl	80005cc <HAL_LCD_Send_Data>
	HAL_LCD_Send_Data(temp);
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fb3d 	bl	80005cc <HAL_LCD_Send_Data>
	HAL_LCD_Send_Data(')');
 8002f52:	2029      	movs	r0, #41	; 0x29
 8002f54:	f7fd fb3a 	bl	80005cc <HAL_LCD_Send_Data>
	delay_ms(1000);
 8002f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f5c:	f7fd fa60 	bl	8000420 <delay_ms>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	200000bc 	.word	0x200000bc
 8002f6c:	40013800 	.word	0x40013800

08002f70 <ECU2_Dashboard_APP_SETUP>:
 * @brief 		- This function is used to make MCAL & HAL initialization.
 * @param [in]	- none
 * @retval 		- none
 **************************************************************************/
void ECU2_Dashboard_APP_SETUP(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	APP_CLK_init();
 8002f74:	f7fe fc80 	bl	8001878 <APP_CLK_init>

	//HAL initialization
	HAL_LCD_Init();
 8002f78:	f7fd fa6e 	bl	8000458 <HAL_LCD_Init>
	HAL_keypad_init();
 8002f7c:	f7fd f902 	bl	8000184 <HAL_keypad_init>
	APP_Start_Tringer_init();
 8002f80:	f7fe fd44 	bl	8001a0c <APP_Start_Tringer_init>

	//MCAL initialization
	APP_UART_init();
 8002f84:	f7fe fc92 	bl	80018ac <APP_UART_init>
	APP_SPI_init();
 8002f88:	f7fe fcc2 	bl	8001910 <APP_SPI_init>
	APP_EXTI_init();
 8002f8c:	f7fe fd10 	bl	80019b0 <APP_EXTI_init>

	//Get data ready
	Fill_Admins_Data();
 8002f90:	f7fe feca 	bl	8001d28 <Fill_Admins_Data>
	Fill_Drivers_Data();
 8002f94:	f7fe ff6e 	bl	8001e74 <Fill_Drivers_Data>

	// Test SPI
	First_SPI_Rx_Solution();
 8002f98:	f7ff ff88 	bl	8002eac <First_SPI_Rx_Solution>

	LCD_clear_screen();
 8002f9c:	f7fd fa12 	bl	80003c4 <LCD_clear_screen>
	HAL_LCD_Send_String(Waiting_Message);
 8002fa0:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <ECU2_Dashboard_APP_SETUP+0x40>)
 8002fa2:	f7fd fb92 	bl	80006ca <HAL_LCD_Send_String>

	// Trigger System ECUs to start
	APP_Start_Tringer_Run();
 8002fa6:	f7fe fd47 	bl	8001a38 <APP_Start_Tringer_Run>
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	080038b0 	.word	0x080038b0

08002fb4 <ECU2_Dashboard_APP_RUN>:


void ECU2_Dashboard_APP_RUN(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	//	HAL_LCD_Send_String("Keypad is Ready");
	//	LCD_clear_screen();
	while(1)
	{
		//LCD Welcome window
		LCD_Start();
 8002fb8:	f7fe fd4a 	bl	8001a50 <LCD_Start>
 8002fbc:	e7fc      	b.n	8002fb8 <ECU2_Dashboard_APP_RUN+0x4>
	...

08002fc0 <ECU2_UART_IRQ_CallBack>:

/* =========================================================================
 * 								Callback Functions
 * =========================================================================*/
static void ECU2_UART_IRQ_CallBack(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
	uint16_t LOC_RecivedData = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	80fb      	strh	r3, [r7, #6]
	MCAL_UART_ReceiveData(USART1, &LOC_RecivedData, disable);
 8002fca:	1dbb      	adds	r3, r7, #6
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4810      	ldr	r0, [pc, #64]	; (8003014 <ECU2_UART_IRQ_CallBack+0x54>)
 8002fd2:	f7fe fbe3 	bl	800179c <MCAL_UART_ReceiveData>
	if(LOC_RecivedData == UART_TERMINATE_CHAR)
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b0d      	cmp	r3, #13
 8002fda:	d117      	bne.n	800300c <ECU2_UART_IRQ_CallBack+0x4c>
	{

		if(AdminAccessRequest() == ADMIN_VALID_ACCESS)
 8002fdc:	f7ff f852 	bl	8002084 <AdminAccessRequest>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b28      	cmp	r3, #40	; 0x28
 8002fe4:	d101      	bne.n	8002fea <ECU2_UART_IRQ_CallBack+0x2a>
		{
			ECU2_ADMIN_Dashboard();
 8002fe6:	f7ff ff7f 	bl	8002ee8 <ECU2_ADMIN_Dashboard>
		}

		MCAL_UART_SendString(USART1, addString("\r\n***************************** ADMIN DASHBOARD *****************************\r\n"), '\0');
 8002fea:	2200      	movs	r2, #0
 8002fec:	490a      	ldr	r1, [pc, #40]	; (8003018 <ECU2_UART_IRQ_CallBack+0x58>)
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <ECU2_UART_IRQ_CallBack+0x54>)
 8002ff0:	f7fe fbb2 	bl	8001758 <MCAL_UART_SendString>
		HAL_LCD_Send_Command(LCD_DISP_ON);
 8002ff4:	200c      	movs	r0, #12
 8002ff6:	f7fd fa89 	bl	800050c <HAL_LCD_Send_Command>
		LCD_clear_screen();
 8002ffa:	f7fd f9e3 	bl	80003c4 <LCD_clear_screen>
		HAL_LCD_Send_String("Thanks");
 8002ffe:	4807      	ldr	r0, [pc, #28]	; (800301c <ECU2_UART_IRQ_CallBack+0x5c>)
 8003000:	f7fd fb63 	bl	80006ca <HAL_LCD_Send_String>
		delay_ms(500);
 8003004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003008:	f7fd fa0a 	bl	8000420 <delay_ms>
	}
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40013800 	.word	0x40013800
 8003018:	080038e0 	.word	0x080038e0
 800301c:	08003930 	.word	0x08003930

08003020 <ECU2_Entrance_EXT_IRQ_Callback>:


static void ECU2_Entrance_EXT_IRQ_Callback(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	//	uint8_t 	LOC_RxData = 'm';
	//	uint8_t		LOC_ID[10];
	//	uint8_t 	LOC_Counter = 0;

	//1. Set SS Low
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	2108      	movs	r1, #8
 8003028:	481a      	ldr	r0, [pc, #104]	; (8003094 <ECU2_Entrance_EXT_IRQ_Callback+0x74>)
 800302a:	f7fd ff04 	bl	8000e36 <MCAL_GPIO_WritePin>

	//2. Read data
	MCAL_SPI_TxRx(SPI1, &Master_RxData, PollingEnable);
 800302e:	2200      	movs	r2, #0
 8003030:	4919      	ldr	r1, [pc, #100]	; (8003098 <ECU2_Entrance_EXT_IRQ_Callback+0x78>)
 8003032:	481a      	ldr	r0, [pc, #104]	; (800309c <ECU2_Entrance_EXT_IRQ_Callback+0x7c>)
 8003034:	f7fe f986 	bl	8001344 <MCAL_SPI_TxRx>
	if((Master_RxData >= '0' && Master_RxData <= '9') || (Master_RxData == 13))
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <ECU2_Entrance_EXT_IRQ_Callback+0x78>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b2f      	cmp	r3, #47	; 0x2f
 800303e:	d903      	bls.n	8003048 <ECU2_Entrance_EXT_IRQ_Callback+0x28>
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <ECU2_Entrance_EXT_IRQ_Callback+0x78>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b39      	cmp	r3, #57	; 0x39
 8003046:	d903      	bls.n	8003050 <ECU2_Entrance_EXT_IRQ_Callback+0x30>
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <ECU2_Entrance_EXT_IRQ_Callback+0x78>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b0d      	cmp	r3, #13
 800304e:	d119      	bne.n	8003084 <ECU2_Entrance_EXT_IRQ_Callback+0x64>
	{
		if(Master_RxData == 13)
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <ECU2_Entrance_EXT_IRQ_Callback+0x78>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b0d      	cmp	r3, #13
 8003056:	d108      	bne.n	800306a <ECU2_Entrance_EXT_IRQ_Callback+0x4a>
		{
			ID_arr[ID_Counter] = '\0';
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <ECU2_Entrance_EXT_IRQ_Callback+0x80>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <ECU2_Entrance_EXT_IRQ_Callback+0x84>)
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]
			EntranceCheckID();
 8003064:	f7ff fc68 	bl	8002938 <EntranceCheckID>
 8003068:	e00c      	b.n	8003084 <ECU2_Entrance_EXT_IRQ_Callback+0x64>
		}
		else
		{
			ID_arr[ID_Counter] = Master_RxData;
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <ECU2_Entrance_EXT_IRQ_Callback+0x80>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <ECU2_Entrance_EXT_IRQ_Callback+0x78>)
 8003072:	7819      	ldrb	r1, [r3, #0]
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <ECU2_Entrance_EXT_IRQ_Callback+0x84>)
 8003076:	5499      	strb	r1, [r3, r2]
			ID_Counter++;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <ECU2_Entrance_EXT_IRQ_Callback+0x80>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <ECU2_Entrance_EXT_IRQ_Callback+0x80>)
 8003082:	701a      	strb	r2, [r3, #0]
		}
	}

	//2. Set SS High
	MCAL_GPIO_WritePin(SS_Port, Entrance_SS, GPIO_PIN_SET);
 8003084:	2201      	movs	r2, #1
 8003086:	2108      	movs	r1, #8
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <ECU2_Entrance_EXT_IRQ_Callback+0x74>)
 800308a:	f7fd fed4 	bl	8000e36 <MCAL_GPIO_WritePin>
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40010800 	.word	0x40010800
 8003098:	20000029 	.word	0x20000029
 800309c:	40013000 	.word	0x40013000
 80030a0:	200000c4 	.word	0x200000c4
 80030a4:	20000194 	.word	0x20000194

080030a8 <ECU2_Exit_EXT_IRQ_Callback>:


static void ECU2_Exit_EXT_IRQ_Callback(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	//1. Set SS Low
	MCAL_GPIO_WritePin(SS_Port, Exit_SS, GPIO_PIN_RESET);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2102      	movs	r1, #2
 80030b0:	481a      	ldr	r0, [pc, #104]	; (800311c <ECU2_Exit_EXT_IRQ_Callback+0x74>)
 80030b2:	f7fd fec0 	bl	8000e36 <MCAL_GPIO_WritePin>

	//2. Read data
	MCAL_SPI_TxRx(SPI1, &Master_RxData, PollingEnable);
 80030b6:	2200      	movs	r2, #0
 80030b8:	4919      	ldr	r1, [pc, #100]	; (8003120 <ECU2_Exit_EXT_IRQ_Callback+0x78>)
 80030ba:	481a      	ldr	r0, [pc, #104]	; (8003124 <ECU2_Exit_EXT_IRQ_Callback+0x7c>)
 80030bc:	f7fe f942 	bl	8001344 <MCAL_SPI_TxRx>
	if((Master_RxData >= '0' && Master_RxData <= '9') || (Master_RxData == 13))
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <ECU2_Exit_EXT_IRQ_Callback+0x78>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b2f      	cmp	r3, #47	; 0x2f
 80030c6:	d903      	bls.n	80030d0 <ECU2_Exit_EXT_IRQ_Callback+0x28>
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <ECU2_Exit_EXT_IRQ_Callback+0x78>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b39      	cmp	r3, #57	; 0x39
 80030ce:	d903      	bls.n	80030d8 <ECU2_Exit_EXT_IRQ_Callback+0x30>
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <ECU2_Exit_EXT_IRQ_Callback+0x78>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b0d      	cmp	r3, #13
 80030d6:	d119      	bne.n	800310c <ECU2_Exit_EXT_IRQ_Callback+0x64>
	{
		if(Master_RxData == 13)
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <ECU2_Exit_EXT_IRQ_Callback+0x78>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b0d      	cmp	r3, #13
 80030de:	d108      	bne.n	80030f2 <ECU2_Exit_EXT_IRQ_Callback+0x4a>
		{
			ID_arr[ID_Counter] = '\0';
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <ECU2_Exit_EXT_IRQ_Callback+0x80>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <ECU2_Exit_EXT_IRQ_Callback+0x84>)
 80030e8:	2100      	movs	r1, #0
 80030ea:	5499      	strb	r1, [r3, r2]
			ExitCheckID();
 80030ec:	f7ff fcd8 	bl	8002aa0 <ExitCheckID>
 80030f0:	e00c      	b.n	800310c <ECU2_Exit_EXT_IRQ_Callback+0x64>
		}
		else
		{
			ID_arr[ID_Counter] = Master_RxData;
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <ECU2_Exit_EXT_IRQ_Callback+0x80>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <ECU2_Exit_EXT_IRQ_Callback+0x78>)
 80030fa:	7819      	ldrb	r1, [r3, #0]
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <ECU2_Exit_EXT_IRQ_Callback+0x84>)
 80030fe:	5499      	strb	r1, [r3, r2]
			ID_Counter++;
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <ECU2_Exit_EXT_IRQ_Callback+0x80>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <ECU2_Exit_EXT_IRQ_Callback+0x80>)
 800310a:	701a      	strb	r2, [r3, #0]
		}
	}

	//2. Set SS High
	MCAL_GPIO_WritePin(SS_Port, Exit_SS, GPIO_PIN_SET);
 800310c:	2201      	movs	r2, #1
 800310e:	2102      	movs	r1, #2
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <ECU2_Exit_EXT_IRQ_Callback+0x74>)
 8003112:	f7fd fe90 	bl	8000e36 <MCAL_GPIO_WritePin>
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40010800 	.word	0x40010800
 8003120:	20000029 	.word	0x20000029
 8003124:	40013000 	.word	0x40013000
 8003128:	200000c4 	.word	0x200000c4
 800312c:	20000194 	.word	0x20000194

08003130 <main>:
#endif

#include "MyAPP.h"

int main(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	ECU2_Dashboard_APP_SETUP();
 8003134:	f7ff ff1c 	bl	8002f70 <ECU2_Dashboard_APP_SETUP>

	ECU2_Dashboard_APP_RUN();
 8003138:	f7ff ff3c 	bl	8002fb4 <ECU2_Dashboard_APP_RUN>
 800313c:	2300      	movs	r3, #0
	/* Loop forever */
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003146:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003148:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800314c:	480c      	ldr	r0, [pc, #48]	; (8003180 <LoopForever+0x6>)
  ldr r1, =_edata
 800314e:	490d      	ldr	r1, [pc, #52]	; (8003184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003150:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <LoopForever+0xe>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003154:	e002      	b.n	800315c <LoopCopyDataInit>

08003156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315a:	3304      	adds	r3, #4

0800315c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800315c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003160:	d3f9      	bcc.n	8003156 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003164:	4c0a      	ldr	r4, [pc, #40]	; (8003190 <LoopForever+0x16>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003168:	e001      	b.n	800316e <LoopFillZerobss>

0800316a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800316c:	3204      	adds	r2, #4

0800316e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003170:	d3fb      	bcc.n	800316a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003172:	f000 f811 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003176:	f7ff ffdb 	bl	8003130 <main>

0800317a <LoopForever>:

LoopForever:
    b LoopForever
 800317a:	e7fe      	b.n	800317a <LoopForever>
  ldr   r0, =_estack
 800317c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8003180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003184:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003188:	08003940 	.word	0x08003940
  ldr r2, =_sbss
 800318c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003190:	20000214 	.word	0x20000214

08003194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC1_2_IRQHandler>
	...

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	2500      	movs	r5, #0
 800319c:	4e0c      	ldr	r6, [pc, #48]	; (80031d0 <__libc_init_array+0x38>)
 800319e:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 80031a0:	1ba4      	subs	r4, r4, r6
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	42a5      	cmp	r5, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	f000 f81a 	bl	80031e0 <_init>
 80031ac:	2500      	movs	r5, #0
 80031ae:	4e0a      	ldr	r6, [pc, #40]	; (80031d8 <__libc_init_array+0x40>)
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <__libc_init_array+0x44>)
 80031b2:	1ba4      	subs	r4, r4, r6
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	42a5      	cmp	r5, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c0:	4798      	blx	r3
 80031c2:	3501      	adds	r5, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ca:	4798      	blx	r3
 80031cc:	3501      	adds	r5, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	08003938 	.word	0x08003938
 80031d4:	08003938 	.word	0x08003938
 80031d8:	08003938 	.word	0x08003938
 80031dc:	0800393c 	.word	0x0800393c

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
