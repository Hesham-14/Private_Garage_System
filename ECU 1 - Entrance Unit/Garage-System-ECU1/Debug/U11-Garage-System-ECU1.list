
U11-Garage-System-ECU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018b0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080019e0  080019e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bd4  08001bd4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001bd4  08001bd4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bd4  08001bd4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bd8  08001bd8  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000024  08001c00  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08001c00  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009886  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ea  00000000  00000000  000298d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001954  00000000  00000000  0002b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000428  00000000  00000000  0002ca18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000360  00000000  00000000  0002ce40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000438b  00000000  00000000  0002d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00005a5e  00000000  00000000  0003152b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c750  00000000  00000000  00036f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000436d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d44  00000000  00000000  00043754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	080019c8 	.word	0x080019c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	080019c8 	.word	0x080019c8

08000170 <Buzzer_Start>:
	pinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(Buzzer_Port, &pinCfg);
}

void Buzzer_Start(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Start alarm */
	MCAL_GPIO_WritePin(Buzzer_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <Buzzer_Start+0x28>)
 800017c:	f000 fc49 	bl	8000a12 <MCAL_GPIO_WritePin>
	delay_ms(2000);
 8000180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000184:	f001 fb2a 	bl	80017dc <delay_ms>

	/* Stop alarm */
	MCAL_GPIO_WritePin(Buzzer_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018e:	4802      	ldr	r0, [pc, #8]	; (8000198 <Buzzer_Start+0x28>)
 8000190:	f000 fc3f 	bl	8000a12 <MCAL_GPIO_WritePin>
}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40010c00 	.word	0x40010c00

0800019c <Servo1_Entry_Gate_Init>:



//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_PinConfig_t PinCinfg;
	PinCinfg.GPIO_PinNumber=GPIO_PIN_8;
 80001a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001a6:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001a8:	2304      	movs	r3, #4
 80001aa:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_Output_Speed =GPIO_SPEED_10M;
 80001ac:	2301      	movs	r3, #1
 80001ae:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	4619      	mov	r1, r3
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <Servo1_Entry_Gate_Init+0x28>)
 80001b6:	f000 fbb0 	bl	800091a <MCAL_GPIO_Init>
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010c00 	.word	0x40010c00

080001c8 <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d10f      	bne.n	80001f8 <Servo1_Entry_Gate+0x30>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001de:	4812      	ldr	r0, [pc, #72]	; (8000228 <Servo1_Entry_Gate+0x60>)
 80001e0:	f000 fc17 	bl	8000a12 <MCAL_GPIO_WritePin>
		dus(500);
 80001e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e8:	f000 ff50 	bl	800108c <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f2:	480d      	ldr	r0, [pc, #52]	; (8000228 <Servo1_Entry_Gate+0x60>)
 80001f4:	f000 fc0d 	bl	8000a12 <MCAL_GPIO_WritePin>
	}
	if(Direction==DOWN)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d10f      	bne.n	800021e <Servo1_Entry_Gate+0x56>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000204:	4808      	ldr	r0, [pc, #32]	; (8000228 <Servo1_Entry_Gate+0x60>)
 8000206:	f000 fc04 	bl	8000a12 <MCAL_GPIO_WritePin>
		dus(1488);
 800020a:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 800020e:	f000 ff3d 	bl	800108c <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <Servo1_Entry_Gate+0x60>)
 800021a:	f000 fbfa 	bl	8000a12 <MCAL_GPIO_WritePin>
	}


}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40010c00 	.word	0x40010c00

0800022c <HAL_LCD_Set_Courser>:
	}
}


void HAL_LCD_Set_Courser(uint8_t Y_Axis,uint8_t X_Axis)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t Line_Select;
	switch (Y_Axis)
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	3b01      	subs	r3, #1
 8000240:	2b03      	cmp	r3, #3
 8000242:	d817      	bhi.n	8000274 <HAL_LCD_Set_Courser+0x48>
 8000244:	a201      	add	r2, pc, #4	; (adr r2, 800024c <HAL_LCD_Set_Courser+0x20>)
 8000246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024a:	bf00      	nop
 800024c:	0800025d 	.word	0x0800025d
 8000250:	08000263 	.word	0x08000263
 8000254:	08000269 	.word	0x08000269
 8000258:	0800026f 	.word	0x0800026f
	{
	case 1:
		Line_Select=LCD_BEGIN_AT_FIRST_ROW;break;
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e009      	b.n	8000276 <HAL_LCD_Set_Courser+0x4a>
	case 2:
		Line_Select=LCD_BEGIN_AT_SECOND_ROW;break;
 8000262:	23c0      	movs	r3, #192	; 0xc0
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e006      	b.n	8000276 <HAL_LCD_Set_Courser+0x4a>
	case 3:
		Line_Select=LCD_THIRD_LINE;break;
 8000268:	2390      	movs	r3, #144	; 0x90
 800026a:	73fb      	strb	r3, [r7, #15]
 800026c:	e003      	b.n	8000276 <HAL_LCD_Set_Courser+0x4a>
	case 4:
		Line_Select=LCD_FOURTH_LINE;break;
 800026e:	23d0      	movs	r3, #208	; 0xd0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e000      	b.n	8000276 <HAL_LCD_Set_Courser+0x4a>
	default:break;
 8000274:	bf00      	nop
	}
	HAL_LCD_Send_Command(Line_Select+X_Axis);
 8000276:	7bfa      	ldrb	r2, [r7, #15]
 8000278:	79bb      	ldrb	r3, [r7, #6]
 800027a:	4413      	add	r3, r2
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f8e9 	bl	8000454 <HAL_LCD_Send_Command>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop

0800028c <check_line>:

void check_line()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	if(count == 17)
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <check_line+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b11      	cmp	r3, #17
 8000296:	d104      	bne.n	80002a2 <check_line+0x16>
		HAL_LCD_Set_Courser(2,0);
 8000298:	2100      	movs	r1, #0
 800029a:	2002      	movs	r0, #2
 800029c:	f7ff ffc6 	bl	800022c <HAL_LCD_Set_Courser>
	{
		LCD_clear_screen();
		HAL_LCD_Set_Courser(1,0);
		count = 0;
	}
}
 80002a0:	e01e      	b.n	80002e0 <check_line+0x54>
	else if(count == 33)
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <check_line+0x58>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b21      	cmp	r3, #33	; 0x21
 80002a8:	d104      	bne.n	80002b4 <check_line+0x28>
		HAL_LCD_Set_Courser(3,0);
 80002aa:	2100      	movs	r1, #0
 80002ac:	2003      	movs	r0, #3
 80002ae:	f7ff ffbd 	bl	800022c <HAL_LCD_Set_Courser>
}
 80002b2:	e015      	b.n	80002e0 <check_line+0x54>
	else if(count ==49)
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <check_line+0x58>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b31      	cmp	r3, #49	; 0x31
 80002ba:	d104      	bne.n	80002c6 <check_line+0x3a>
		HAL_LCD_Set_Courser(4,0);
 80002bc:	2100      	movs	r1, #0
 80002be:	2004      	movs	r0, #4
 80002c0:	f7ff ffb4 	bl	800022c <HAL_LCD_Set_Courser>
}
 80002c4:	e00c      	b.n	80002e0 <check_line+0x54>
	else if(count == 65)
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <check_line+0x58>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b41      	cmp	r3, #65	; 0x41
 80002cc:	d108      	bne.n	80002e0 <check_line+0x54>
		LCD_clear_screen();
 80002ce:	f000 f80b 	bl	80002e8 <LCD_clear_screen>
		HAL_LCD_Set_Courser(1,0);
 80002d2:	2100      	movs	r1, #0
 80002d4:	2001      	movs	r0, #1
 80002d6:	f7ff ffa9 	bl	800022c <HAL_LCD_Set_Courser>
		count = 0;
 80002da:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <check_line+0x58>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000040 	.word	0x20000040

080002e8 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DISP_ON);
 80002ec:	200c      	movs	r0, #12
 80002ee:	f000 f8b1 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_CLEAR_SCREEN);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 f8ae 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_ENTRY_INC_);
 80002f8:	2006      	movs	r0, #6
 80002fa:	f000 f8ab 	bl	8000454 <HAL_LCD_Send_Command>
	LCD_delay_ms(5);
 80002fe:	2005      	movs	r0, #5
 8000300:	f000 f836 	bl	8000370 <LCD_delay_ms>
	count = 0;
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <LCD_clear_screen+0x28>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000040 	.word	0x20000040

08000314 <LCD_clear_screen_2>:

void LCD_clear_screen_2(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_DISP_OFF);
 8000318:	2008      	movs	r0, #8
 800031a:	f000 f89b 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Init();
 800031e:	f000 f843 	bl	80003a8 <HAL_LCD_Init>
	HAL_LCD_Send_Command(LCD_DISP_ON);
 8000322:	200c      	movs	r0, #12
 8000324:	f000 f896 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_CLEAR_SCREEN);
 8000328:	2001      	movs	r0, #1
 800032a:	f000 f893 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_ENTRY_INC_);
 800032e:	2006      	movs	r0, #6
 8000330:	f000 f890 	bl	8000454 <HAL_LCD_Send_Command>
	count = 0;
 8000334:	4b02      	ldr	r3, [pc, #8]	; (8000340 <LCD_clear_screen_2+0x2c>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000040 	.word	0x20000040

08000344 <ENABLE_cycle>:


void ENABLE_cycle()
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_EN, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2180      	movs	r1, #128	; 0x80
 800034c:	4807      	ldr	r0, [pc, #28]	; (800036c <ENABLE_cycle+0x28>)
 800034e:	f000 fb60 	bl	8000a12 <MCAL_GPIO_WritePin>
	LCD_delay_ms(5);
 8000352:	2005      	movs	r0, #5
 8000354:	f000 f80c 	bl	8000370 <LCD_delay_ms>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_EN, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <ENABLE_cycle+0x28>)
 800035e:	f000 fb58 	bl	8000a12 <MCAL_GPIO_WritePin>
	LCD_delay_ms(2);
 8000362:	2002      	movs	r0, #2
 8000364:	f000 f804 	bl	8000370 <LCD_delay_ms>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40010c00 	.word	0x40010c00

08000370 <LCD_delay_ms>:

void LCD_delay_ms(uint32_t time){
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	e00b      	b.n	8000396 <LCD_delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	e002      	b.n	800038a <LCD_delay_ms+0x1a>
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	3301      	adds	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	2bfe      	cmp	r3, #254	; 0xfe
 800038e:	d9f9      	bls.n	8000384 <LCD_delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	3301      	adds	r3, #1
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	429a      	cmp	r2, r3
 800039c:	d3ef      	bcc.n	800037e <LCD_delay_ms+0xe>
			;
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <HAL_LCD_Init>:
 * @brief 		-Initializes LCD states in the ref
 * @param [in]	-n1
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Init(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0
#if LCD_MODE == Eight_Bit_Mode
	uint32_t Pin_Counter,Pins[8]=LCD_Data_Pins;
#elif LCD_MODE == Four_Bit_Mode
	uint32_t Pin_Counter,Pins[4]=LCD_Data_Pins;
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <HAL_LCD_Init+0xa0>)
 80003b0:	1d3c      	adds	r4, r7, #4
 80003b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif

	GPIO_PinConfig_t  LCD_Pin;
	/*Initialize Control Pins*/
	LCD_Pin.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2304      	movs	r3, #4
 80003ba:	70bb      	strb	r3, [r7, #2]
	LCD_Pin.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003bc:	2301      	movs	r3, #1
 80003be:	70fb      	strb	r3, [r7, #3]
	LCD_Pin.GPIO_PinNumber = LCD_RS;
 80003c0:	2320      	movs	r3, #32
 80003c2:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(LCD_Control_Port, &LCD_Pin);
 80003c4:	463b      	mov	r3, r7
 80003c6:	4619      	mov	r1, r3
 80003c8:	4820      	ldr	r0, [pc, #128]	; (800044c <HAL_LCD_Init+0xa4>)
 80003ca:	f000 faa6 	bl	800091a <MCAL_GPIO_Init>
	LCD_Pin.GPIO_PinNumber = LCD_RW;
 80003ce:	2340      	movs	r3, #64	; 0x40
 80003d0:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(LCD_Control_Port, &LCD_Pin);
 80003d2:	463b      	mov	r3, r7
 80003d4:	4619      	mov	r1, r3
 80003d6:	481d      	ldr	r0, [pc, #116]	; (800044c <HAL_LCD_Init+0xa4>)
 80003d8:	f000 fa9f 	bl	800091a <MCAL_GPIO_Init>
	LCD_Pin.GPIO_PinNumber = LCD_EN;
 80003dc:	2380      	movs	r3, #128	; 0x80
 80003de:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(LCD_Control_Port, &LCD_Pin);
 80003e0:	463b      	mov	r3, r7
 80003e2:	4619      	mov	r1, r3
 80003e4:	4819      	ldr	r0, [pc, #100]	; (800044c <HAL_LCD_Init+0xa4>)
 80003e6:	f000 fa98 	bl	800091a <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_EN, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	4817      	ldr	r0, [pc, #92]	; (800044c <HAL_LCD_Init+0xa4>)
 80003f0:	f000 fb0f 	bl	8000a12 <MCAL_GPIO_WritePin>
	HAL_LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
	HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
	HAL_LCD_Send_Command(LCD_ENTRY_INC_);
#elif LCD_MODE == Four_Bit_Mode
	/*Initialize Data Pins*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	e010      	b.n	800041c <HAL_LCD_Init+0x74>
	{
		LCD_Pin.GPIO_PinNumber=Pins[Pin_Counter];
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	f107 0218 	add.w	r2, r7, #24
 8000402:	4413      	add	r3, r2
 8000404:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000408:	b29b      	uxth	r3, r3
 800040a:	803b      	strh	r3, [r7, #0]
		MCAL_GPIO_Init(LCD_Data_Port, &LCD_Pin);
 800040c:	463b      	mov	r3, r7
 800040e:	4619      	mov	r1, r3
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <HAL_LCD_Init+0xa8>)
 8000412:	f000 fa82 	bl	800091a <MCAL_GPIO_Init>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d9eb      	bls.n	80003fa <HAL_LCD_Init+0x52>
	}
	LCD_delay_ms(40);
 8000422:	2028      	movs	r0, #40	; 0x28
 8000424:	f7ff ffa4 	bl	8000370 <LCD_delay_ms>
	/* Configure LCD */
	HAL_LCD_Send_Command(LCD_RETURN_HOME);
 8000428:	2002      	movs	r0, #2
 800042a:	f000 f813 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
 800042e:	2028      	movs	r0, #40	; 0x28
 8000430:	f000 f810 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 8000434:	200f      	movs	r0, #15
 8000436:	f000 f80d 	bl	8000454 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_ENTRY_INC_);
 800043a:	2006      	movs	r0, #6
 800043c:	f000 f80a 	bl	8000454 <HAL_LCD_Send_Command>
#else
#warning (" Wrong Configuration !!")
#endif
}
 8000440:	bf00      	nop
 8000442:	371c      	adds	r7, #28
 8000444:	46bd      	mov	sp, r7
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	080019e0 	.word	0x080019e0
 800044c:	40010c00 	.word	0x40010c00
 8000450:	40010800 	.word	0x40010800

08000454 <HAL_LCD_Send_Command>:
 * @brief 		-Send Command to LCD
 * @param [in]	-command
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Send_Command(uint8_t Command)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	; 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
#if LCD_MODE == Eight_Bit_Mode
	uint32_t Pin_Counter,Pins[8]=LCD_Data_Pins;
#elif LCD_MODE == Four_Bit_Mode
	uint32_t Pin_Counter,Pins[4]=LCD_Data_Pins;
 800045e:	4b29      	ldr	r3, [pc, #164]	; (8000504 <HAL_LCD_Send_Command+0xb0>)
 8000460:	f107 040c 	add.w	r4, r7, #12
 8000464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif
	// Turn off RS & RW
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RW, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	4826      	ldr	r0, [pc, #152]	; (8000508 <HAL_LCD_Send_Command+0xb4>)
 8000470:	f000 facf 	bl	8000a12 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RS, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	4823      	ldr	r0, [pc, #140]	; (8000508 <HAL_LCD_Send_Command+0xb4>)
 800047a:	f000 faca 	bl	8000a12 <MCAL_GPIO_WritePin>
	/*Write Command*/
	for(Pin_Counter=0;Pin_Counter<8;Pin_Counter++)
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Command>>Pin_Counter)&1));
#elif LCD_MODE == Four_Bit_Mode
	/*Send Hi Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
 8000482:	e017      	b.n	80004b4 <HAL_LCD_Send_Command+0x60>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Command>>Pin_Counter+4)&1));
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	f107 0220 	add.w	r2, r7, #32
 800048c:	4413      	add	r3, r2
 800048e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000492:	4619      	mov	r1, r3
 8000494:	79fa      	ldrb	r2, [r7, #7]
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	3304      	adds	r3, #4
 800049a:	fa42 f303 	asr.w	r3, r2, r3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	4818      	ldr	r0, [pc, #96]	; (800050c <HAL_LCD_Send_Command+0xb8>)
 80004aa:	f000 fab2 	bl	8000a12 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	3301      	adds	r3, #1
 80004b2:	61fb      	str	r3, [r7, #28]
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d9e4      	bls.n	8000484 <HAL_LCD_Send_Command+0x30>
	/*Enable LCD*/
	ENABLE_cycle();
 80004ba:	f7ff ff43 	bl	8000344 <ENABLE_cycle>
	/*Send Low Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
 80004c2:	e016      	b.n	80004f2 <HAL_LCD_Send_Command+0x9e>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Command>>Pin_Counter)&1));
 80004c4:	69fb      	ldr	r3, [r7, #28]
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	f107 0220 	add.w	r2, r7, #32
 80004cc:	4413      	add	r3, r2
 80004ce:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80004d2:	4619      	mov	r1, r3
 80004d4:	79fa      	ldrb	r2, [r7, #7]
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	fa42 f303 	asr.w	r3, r2, r3
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	4809      	ldr	r0, [pc, #36]	; (800050c <HAL_LCD_Send_Command+0xb8>)
 80004e8:	f000 fa93 	bl	8000a12 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	3301      	adds	r3, #1
 80004f0:	61fb      	str	r3, [r7, #28]
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d9e5      	bls.n	80004c4 <HAL_LCD_Send_Command+0x70>
#endif
	/*Enable LCD*/
	ENABLE_cycle();
 80004f8:	f7ff ff24 	bl	8000344 <ENABLE_cycle>
}
 80004fc:	bf00      	nop
 80004fe:	3724      	adds	r7, #36	; 0x24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd90      	pop	{r4, r7, pc}
 8000504:	080019e0 	.word	0x080019e0
 8000508:	40010c00 	.word	0x40010c00
 800050c:	40010800 	.word	0x40010800

08000510 <HAL_LCD_Send_Data>:
 * @brief 		-Send data to LCD
 * @param [in]	-data
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Send_Data(uint8_t Data)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b089      	sub	sp, #36	; 0x24
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
#if LCD_MODE == Eight_Bit_Mode
	uint32_t Pin_Counter,Pins[8]=LCD_Data_Pins;
#elif LCD_MODE == Four_Bit_Mode
	uint32_t Pin_Counter,Pins[4]=LCD_Data_Pins;
 800051a:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <HAL_LCD_Send_Data+0xc4>)
 800051c:	f107 040c 	add.w	r4, r7, #12
 8000520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif
	/*check line*/
	count++;
 8000526:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <HAL_LCD_Send_Data+0xc8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	4a2a      	ldr	r2, [pc, #168]	; (80005d8 <HAL_LCD_Send_Data+0xc8>)
 800052e:	6013      	str	r3, [r2, #0]
	check_line();
 8000530:	f7ff feac 	bl	800028c <check_line>
	LCD_delay_ms(10);
 8000534:	200a      	movs	r0, #10
 8000536:	f7ff ff1b 	bl	8000370 <LCD_delay_ms>
	// Turn on RS & off RW
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RW, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2140      	movs	r1, #64	; 0x40
 800053e:	4827      	ldr	r0, [pc, #156]	; (80005dc <HAL_LCD_Send_Data+0xcc>)
 8000540:	f000 fa67 	bl	8000a12 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, LCD_RS, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2120      	movs	r1, #32
 8000548:	4824      	ldr	r0, [pc, #144]	; (80005dc <HAL_LCD_Send_Data+0xcc>)
 800054a:	f000 fa62 	bl	8000a12 <MCAL_GPIO_WritePin>
	/*Write Data*/
	for(Pin_Counter=0;Pin_Counter<8;Pin_Counter++)
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Data>>Pin_Counter)&1));
#elif LCD_MODE == Four_Bit_Mode
	/*Send Hi Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
 8000552:	e017      	b.n	8000584 <HAL_LCD_Send_Data+0x74>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Data>>Pin_Counter+4)&1));
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	f107 0220 	add.w	r2, r7, #32
 800055c:	4413      	add	r3, r2
 800055e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000562:	4619      	mov	r1, r3
 8000564:	79fa      	ldrb	r2, [r7, #7]
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3304      	adds	r3, #4
 800056a:	fa42 f303 	asr.w	r3, r2, r3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	4819      	ldr	r0, [pc, #100]	; (80005e0 <HAL_LCD_Send_Data+0xd0>)
 800057a:	f000 fa4a 	bl	8000a12 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	3301      	adds	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d9e4      	bls.n	8000554 <HAL_LCD_Send_Data+0x44>
	/*Enable LCD*/
	ENABLE_cycle();
 800058a:	f7ff fedb 	bl	8000344 <ENABLE_cycle>
	/*Send Low Nibble*/
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
 8000592:	e016      	b.n	80005c2 <HAL_LCD_Send_Data+0xb2>
		MCAL_GPIO_WritePin(LCD_Data_Port, Pins[Pin_Counter], ((Data>>Pin_Counter)&1));
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	f107 0220 	add.w	r2, r7, #32
 800059c:	4413      	add	r3, r2
 800059e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80005a2:	4619      	mov	r1, r3
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	fa42 f303 	asr.w	r3, r2, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <HAL_LCD_Send_Data+0xd0>)
 80005b8:	f000 fa2b 	bl	8000a12 <MCAL_GPIO_WritePin>
	for(Pin_Counter=0;Pin_Counter<4;Pin_Counter++)
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	3301      	adds	r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d9e5      	bls.n	8000594 <HAL_LCD_Send_Data+0x84>
#endif
	/*Enable LCD*/
	ENABLE_cycle();
 80005c8:	f7ff febc 	bl	8000344 <ENABLE_cycle>
}
 80005cc:	bf00      	nop
 80005ce:	3724      	adds	r7, #36	; 0x24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	080019e0 	.word	0x080019e0
 80005d8:	20000040 	.word	0x20000040
 80005dc:	40010c00 	.word	0x40010c00
 80005e0:	40010800 	.word	0x40010800

080005e4 <HAL_LCD_Send_String>:
 * @brief 		-send string number to LCD
 * @param [in]	-data
 * @retval 		-n1
 **************************************************************************/
void HAL_LCD_Send_String(char String[])
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	while(*String)
 80005ec:	e007      	b.n	80005fe <HAL_LCD_Send_String+0x1a>
	{
		HAL_LCD_Send_Data(*String);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff8c 	bl	8000510 <HAL_LCD_Send_Data>
		String++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
	while(*String)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1f3      	bne.n	80005ee <HAL_LCD_Send_String+0xa>
	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <Motion_Sensor_Get_State>:
	pinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(Motion_Sensor_Port, &pinCfg);
}

u8 Motion_Sensor_Get_State(void)
{  
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	u8 LOC_retval;
	LOC_retval = MCAL_GPIO_ReadPin(Motion_Sensor_Port, Motion_Sensor_Pin);
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <Motion_Sensor_Get_State+0x20>)
 800061c:	f000 f9e5 	bl	80009ea <MCAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	71fb      	strb	r3, [r7, #7]

    return LOC_retval;
 8000624:	79fb      	ldrb	r3, [r7, #7]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010c00 	.word	0x40010c00

08000634 <EXTI0_IRQHandler>:
 * =========================================================================
 * 								IRQ Functions
 * =========================================================================
 */
void EXTI0_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 0);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI0_IRQHandler+0x1c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI0_IRQHandler+0x1c>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[0]();
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI0_IRQHandler+0x20>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	20000058 	.word	0x20000058

08000658 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 1);
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI1_IRQHandler+0x1c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI1_IRQHandler+0x1c>)
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[1]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI1_IRQHandler+0x20>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	20000058 	.word	0x20000058

0800067c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 2);
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <EXTI2_IRQHandler+0x1c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <EXTI2_IRQHandler+0x1c>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[2]();
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <EXTI2_IRQHandler+0x20>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4798      	blx	r3
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	20000058 	.word	0x20000058

080006a0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 3);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <EXTI3_IRQHandler+0x1c>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <EXTI3_IRQHandler+0x1c>)
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[3]();
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <EXTI3_IRQHandler+0x20>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	4798      	blx	r3
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010400 	.word	0x40010400
 80006c0:	20000058 	.word	0x20000058

080006c4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 4);
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <EXTI4_IRQHandler+0x1c>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <EXTI4_IRQHandler+0x1c>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[4]();
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <EXTI4_IRQHandler+0x20>)
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	4798      	blx	r3
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40010400 	.word	0x40010400
 80006e4:	20000058 	.word	0x20000058

080006e8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	//check which EXTI
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= (1 << 5); GP_IRQ_CALLBACK[5](); }
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d008      	beq.n	800070a <EXTI9_5_IRQHandler+0x22>
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 80006fe:	f043 0320 	orr.w	r3, r3, #32
 8000702:	6153      	str	r3, [r2, #20]
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= (1 << 6); GP_IRQ_CALLBACK[6](); }
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000712:	2b00      	cmp	r3, #0
 8000714:	d008      	beq.n	8000728 <EXTI9_5_IRQHandler+0x40>
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= (1 << 7); GP_IRQ_CALLBACK[7](); }
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000730:	2b00      	cmp	r3, #0
 8000732:	d008      	beq.n	8000746 <EXTI9_5_IRQHandler+0x5e>
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800073a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073e:	6153      	str	r3, [r2, #20]
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= (1 << 8); GP_IRQ_CALLBACK[8](); }
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074e:	2b00      	cmp	r3, #0
 8000750:	d008      	beq.n	8000764 <EXTI9_5_IRQHandler+0x7c>
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= (1 << 9); GP_IRQ_CALLBACK[9](); }
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	2b00      	cmp	r3, #0
 800076e:	d008      	beq.n	8000782 <EXTI9_5_IRQHandler+0x9a>
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077a:	6153      	str	r3, [r2, #20]
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000780:	4798      	blx	r3

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010400 	.word	0x40010400
 800078c:	20000058 	.word	0x20000058

08000790 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	//check which EXTI
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= (1 << 10); GP_IRQ_CALLBACK[10](); }
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800079c:	2b00      	cmp	r3, #0
 800079e:	d008      	beq.n	80007b2 <EXTI15_10_IRQHandler+0x22>
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	4a29      	ldr	r2, [pc, #164]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007aa:	6153      	str	r3, [r2, #20]
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= (1 << 11); GP_IRQ_CALLBACK[11](); }
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d008      	beq.n	80007d0 <EXTI15_10_IRQHandler+0x40>
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= (1 << 12); GP_IRQ_CALLBACK[12](); }
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <EXTI15_10_IRQHandler+0x5e>
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e6:	6153      	str	r3, [r2, #20]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= (1 << 13); GP_IRQ_CALLBACK[13](); }
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d008      	beq.n	800080c <EXTI15_10_IRQHandler+0x7c>
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 8000800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= (1 << 14); GP_IRQ_CALLBACK[14](); }
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d008      	beq.n	800082a <EXTI15_10_IRQHandler+0x9a>
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6153      	str	r3, [r2, #20]
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 8000826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000828:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= (1 << 15); GP_IRQ_CALLBACK[15](); }
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d008      	beq.n	8000848 <EXTI15_10_IRQHandler+0xb8>
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800083c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b03      	ldr	r3, [pc, #12]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 8000844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000846:	4798      	blx	r3

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40010400 	.word	0x40010400
 8000850:	20000058 	.word	0x20000058

08000854 <Get_CRLH_Position>:
 */
#include "STM32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	2b80      	cmp	r3, #128	; 0x80
 8000862:	d042      	beq.n	80008ea <Get_CRLH_Position+0x96>
 8000864:	2b80      	cmp	r3, #128	; 0x80
 8000866:	dc11      	bgt.n	800088c <Get_CRLH_Position+0x38>
 8000868:	2b08      	cmp	r3, #8
 800086a:	d036      	beq.n	80008da <Get_CRLH_Position+0x86>
 800086c:	2b08      	cmp	r3, #8
 800086e:	dc06      	bgt.n	800087e <Get_CRLH_Position+0x2a>
 8000870:	2b02      	cmp	r3, #2
 8000872:	d02e      	beq.n	80008d2 <Get_CRLH_Position+0x7e>
 8000874:	2b04      	cmp	r3, #4
 8000876:	d02e      	beq.n	80008d6 <Get_CRLH_Position+0x82>
 8000878:	2b01      	cmp	r3, #1
 800087a:	d028      	beq.n	80008ce <Get_CRLH_Position+0x7a>
 800087c:	e047      	b.n	800090e <Get_CRLH_Position+0xba>
 800087e:	2b20      	cmp	r3, #32
 8000880:	d02f      	beq.n	80008e2 <Get_CRLH_Position+0x8e>
 8000882:	2b40      	cmp	r3, #64	; 0x40
 8000884:	d02f      	beq.n	80008e6 <Get_CRLH_Position+0x92>
 8000886:	2b10      	cmp	r3, #16
 8000888:	d029      	beq.n	80008de <Get_CRLH_Position+0x8a>
 800088a:	e040      	b.n	800090e <Get_CRLH_Position+0xba>
 800088c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000890:	d033      	beq.n	80008fa <Get_CRLH_Position+0xa6>
 8000892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000896:	dc09      	bgt.n	80008ac <Get_CRLH_Position+0x58>
 8000898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800089c:	d029      	beq.n	80008f2 <Get_CRLH_Position+0x9e>
 800089e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008a2:	d028      	beq.n	80008f6 <Get_CRLH_Position+0xa2>
 80008a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a8:	d021      	beq.n	80008ee <Get_CRLH_Position+0x9a>
 80008aa:	e030      	b.n	800090e <Get_CRLH_Position+0xba>
 80008ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b0:	d027      	beq.n	8000902 <Get_CRLH_Position+0xae>
 80008b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b6:	dc03      	bgt.n	80008c0 <Get_CRLH_Position+0x6c>
 80008b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008bc:	d01f      	beq.n	80008fe <Get_CRLH_Position+0xaa>
 80008be:	e026      	b.n	800090e <Get_CRLH_Position+0xba>
 80008c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008c4:	d01f      	beq.n	8000906 <Get_CRLH_Position+0xb2>
 80008c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008ca:	d01e      	beq.n	800090a <Get_CRLH_Position+0xb6>
 80008cc:	e01f      	b.n	800090e <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e01e      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	e01c      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80008d6:	2308      	movs	r3, #8
 80008d8:	e01a      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80008da:	230c      	movs	r3, #12
 80008dc:	e018      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80008de:	2310      	movs	r3, #16
 80008e0:	e016      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80008e2:	2314      	movs	r3, #20
 80008e4:	e014      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80008e6:	2318      	movs	r3, #24
 80008e8:	e012      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80008ea:	231c      	movs	r3, #28
 80008ec:	e010      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e00e      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80008f2:	2304      	movs	r3, #4
 80008f4:	e00c      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80008f6:	2308      	movs	r3, #8
 80008f8:	e00a      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80008fa:	230c      	movs	r3, #12
 80008fc:	e008      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80008fe:	2310      	movs	r3, #16
 8000900:	e006      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000902:	2314      	movs	r3, #20
 8000904:	e004      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000906:	2318      	movs	r3, #24
 8000908:	e002      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800090a:	231c      	movs	r3, #28
 800090c:	e000      	b.n	8000910 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules,
 * 				 but LQFP48 package has only GPIO A, B, and (part of C,D) exported as extenal PINs from thr MCU
 */
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800091a:	b590      	push	{r4, r7, lr}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	//check CRL\H
	volatile uint32_t *ConfigRegister = NULL;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	2bff      	cmp	r3, #255	; 0xff
 8000932:	d801      	bhi.n	8000938 <MCAL_GPIO_Init+0x1e>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	e001      	b.n	800093c <MCAL_GPIO_Init+0x22>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3304      	adds	r3, #4
 800093c:	60bb      	str	r3, [r7, #8]

	//0. clear CNFy[1:0] MODEy[1:0]
	*ConfigRegister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff86 	bl	8000854 <Get_CRLH_Position>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	230f      	movs	r3, #15
 800094e:	4093      	lsls	r3, r2
 8000950:	43da      	mvns	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	601a      	str	r2, [r3, #0]

	//1. if pin is output
	if((PinConfig->GPIO_Mode >= GPIO_MODE_OUTPUT_PP) && (PinConfig->GPIO_Mode <= GPIO_MODE_OUTPUT_AF_OD))
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d911      	bls.n	8000988 <MCAL_GPIO_Init+0x6e>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	2b07      	cmp	r3, #7
 800096a:	d80d      	bhi.n	8000988 <MCAL_GPIO_Init+0x6e>
	{
		//set CNF from output options, then set MODE (speed)
		PIN_Config = (((PinConfig->GPIO_Mode - 0x4UL) << 2) | (PinConfig->GPIO_Output_Speed & 0x0F));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	3b04      	subs	r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	78db      	ldrb	r3, [r3, #3]
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4313      	orrs	r3, r2
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e01e      	b.n	80009c6 <MCAL_GPIO_Init+0xac>
	}
	//2. if pin is input
	else
	{
		//if input pull-down, reset ODR
		if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	789b      	ldrb	r3, [r3, #2]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d108      	bne.n	80009a2 <MCAL_GPIO_Init+0x88>
		{
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	8812      	ldrh	r2, [r2, #0]
 8000998:	43d2      	mvns	r2, r2
 800099a:	401a      	ands	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	e00a      	b.n	80009b8 <MCAL_GPIO_Init+0x9e>
		}
		//if input pull-up, set ODR
		else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d106      	bne.n	80009b8 <MCAL_GPIO_Init+0x9e>
		{
			GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	8812      	ldrh	r2, [r2, #0]
 80009b2:	431a      	orrs	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	60da      	str	r2, [r3, #12]
		}

		//set CNF from input options, then set MODe (00)
		PIN_Config = ((PinConfig->GPIO_Mode << 2) & 0x0F );
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	789b      	ldrb	r3, [r3, #2]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	73fb      	strb	r3, [r7, #15]
	}
	//3. update register with the Pin_Config information
	*ConfigRegister |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80009c6:	7bfc      	ldrb	r4, [r7, #15]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff41 	bl	8000854 <Get_CRLH_Position>
 80009d2:	4603      	mov	r3, r0
 80009d4:	fa04 f203 	lsl.w	r2, r4, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	431a      	orrs	r2, r3
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}

080009ea <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set pin number according @ref GPIO_PINS_define
 * @retval 		-Pin value (two values based on @ref GPIO_PIN_state)
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_t *GPIOx, uint16_t PinNumber)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR & (uint32_t)PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	4013      	ands	r3, r2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MCAL_GPIO_ReadPin+0x1c>
		return GPIO_PIN_SET;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <MCAL_GPIO_ReadPin+0x1e>
	else
		return GPIO_PIN_RESET;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: Pin value
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx, uint16_t *PinNumber, uint8_t value)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71fb      	strb	r3, [r7, #7]
	//set pin by 1
	if(value != GPIO_PIN_RESET)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <MCAL_GPIO_WritePin+0x1c>
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
	else
		//reset bit
		GPIOx->BRR = (uint32_t)PinNumber;
}
 8000a2c:	e002      	b.n	8000a34 <MCAL_GPIO_WritePin+0x22>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	615a      	str	r2, [r3, #20]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
	...

08000a40 <MCAL_RCC_GetSYS_CLKFreq>:
 * @param [in]	-none
 * @retval 		-SYS_CLK value
 * Note			-none
 */
uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >>2 & 0b11)
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d006      	beq.n	8000a60 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d302      	bcc.n	8000a5c <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d004      	beq.n	8000a64 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000a5a:	e005      	b.n	8000a68 <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000a5e:	e004      	b.n	8000a6a <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	case 1:
		return HSE_RC_CLK;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000a62:	e002      	b.n	8000a6a <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	case 2:
		return PLL_RC_CLK;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000a66:	e000      	b.n	8000a6a <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	default:
		return HSI_RC_CLK;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
		break;
	}
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	007a1200 	.word	0x007a1200
 8000a7c:	00f42400 	.word	0x00f42400
 8000a80:	044aa200 	.word	0x044aa200

08000a84 <MCAL_RCC_GetHCLKFreq>:
 * @param [in]	-none
 * @retval 		-HCLK value
 * Note			-none
 */
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	// Get SYS_CLK source Compute HCLK Frequency
	return ( MCAL_RCC_GetSYS_CLKFreq() >> APBPrescTable[(RCC->CFGR >> 4) & 0b1111] );
 8000a88:	f7ff ffda 	bl	8000a40 <MCAL_RCC_GetSYS_CLKFreq>
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	091b      	lsrs	r3, r3, #4
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <MCAL_RCC_GetHCLKFreq+0x28>)
 8000a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9e:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	20000000 	.word	0x20000000

08000ab0 <MCAL_RCC_GetPCLK1Freq>:
 * @param [in]	-none
 * @retval 		-PCLK1 value
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	// Get HCLK source Compute PCLK1 Frequency
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111] );
 8000ab4:	f7ff ffe6 	bl	8000a84 <MCAL_RCC_GetHCLKFreq>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <MCAL_RCC_GetPCLK1Freq+0x28>)
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	20000000 	.word	0x20000000

08000adc <MCAL_RCC_GetPCLK2Freq>:
 * @param [in]	-none
 * @retval 		-PCLK2 value
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	// Get HCLK source Compute PCLK2 Frequency
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111] );
 8000ae0:	f7ff ffd0 	bl	8000a84 <MCAL_RCC_GetHCLKFreq>
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	0adb      	lsrs	r3, r3, #11
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <MCAL_RCC_GetPCLK2Freq+0x28>)
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	20000000 	.word	0x20000000

08000b08 <MCAL_SPI_GPIO_SetPins>:
 * @brief 		- Initialize the GPIO Pins for SPI Interface
 * @param [in]	- SPIx: where x can be (1..3 depending on device used)
 * @retval 		- none
 */
void MCAL_SPI_GPIO_SetPins(SPI_t* SPIx)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	/* For SPI 1 */
	if(SPIx == SPI1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a98      	ldr	r2, [pc, #608]	; (8000d74 <MCAL_SPI_GPIO_SetPins+0x26c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	f040 808f 	bne.w	8000c38 <MCAL_SPI_GPIO_SetPins+0x130>
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		/* Master Mode */
		if(Glob_SPI_Config[SPI1_Index]->Mode == SPI_MODE_Master)
 8000b1a:	4b97      	ldr	r3, [pc, #604]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	d14e      	bne.n	8000bc2 <MCAL_SPI_GPIO_SetPins+0xba>
		{
			/* set NSS by checking which NSS Mode -> PA4 */
			if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Master_SS_DISABLE)
 8000b24:	4b94      	ldr	r3, [pc, #592]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	891b      	ldrh	r3, [r3, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10a      	bne.n	8000b44 <MCAL_SPI_GPIO_SetPins+0x3c>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000b32:	2301      	movs	r3, #1
 8000b34:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	488f      	ldr	r0, [pc, #572]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000b3e:	f7ff feec 	bl	800091a <MCAL_GPIO_Init>
 8000b42:	e010      	b.n	8000b66 <MCAL_SPI_GPIO_SetPins+0x5e>
			}
			else if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Master_SS_ENABLE)
 8000b44:	4b8c      	ldr	r3, [pc, #560]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	891b      	ldrh	r3, [r3, #8]
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d10b      	bne.n	8000b66 <MCAL_SPI_GPIO_SetPins+0x5e>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000b52:	2306      	movs	r3, #6
 8000b54:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4886      	ldr	r0, [pc, #536]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000b62:	f7ff feda 	bl	800091a <MCAL_GPIO_Init>
			}


			/* Set SCK -> PA5 */
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000b66:	2320      	movs	r3, #32
 8000b68:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	4880      	ldr	r0, [pc, #512]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000b7a:	f7ff fece 	bl	800091a <MCAL_GPIO_Init>

			/* Set MISO -> PA6 */
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 8000b7e:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	885b      	ldrh	r3, [r3, #2]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <MCAL_SPI_GPIO_SetPins+0x94>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000b88:	2340      	movs	r3, #64	; 0x40
 8000b8a:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	4879      	ldr	r0, [pc, #484]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000b98:	f7ff febf 	bl	800091a <MCAL_GPIO_Init>
			else
			{
				//todo for Half-Duplex
			}
			/* Set MOSI -> PA7 */
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 8000b9c:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	885b      	ldrh	r3, [r3, #2]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f040 80e1 	bne.w	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000bac:	2306      	movs	r3, #6
 8000bae:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4870      	ldr	r0, [pc, #448]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000bbc:	f7ff fead 	bl	800091a <MCAL_GPIO_Init>
				//todo for Half-Duplex
			}
		}

	}
}
 8000bc0:	e0d3      	b.n	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
			if(Glob_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Slave)
 8000bc2:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	891b      	ldrh	r3, [r3, #8]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <MCAL_SPI_GPIO_SetPins+0xd8>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4868      	ldr	r0, [pc, #416]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000bdc:	f7ff fe9d 	bl	800091a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000be0:	2320      	movs	r3, #32
 8000be2:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4863      	ldr	r0, [pc, #396]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000bf0:	f7ff fe93 	bl	800091a <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 8000bf4:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	885b      	ldrh	r3, [r3, #2]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10b      	bne.n	8000c16 <MCAL_SPI_GPIO_SetPins+0x10e>
				PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000c02:	2306      	movs	r3, #6
 8000c04:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	485a      	ldr	r0, [pc, #360]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000c12:	f7ff fe82 	bl	800091a <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI1_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 8000c16:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	885b      	ldrh	r3, [r3, #2]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 80a4 	bne.w	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
				PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4852      	ldr	r0, [pc, #328]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000c32:	f7ff fe72 	bl	800091a <MCAL_GPIO_Init>
}
 8000c36:	e098      	b.n	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
	else if(SPIx == SPI2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a51      	ldr	r2, [pc, #324]	; (8000d80 <MCAL_SPI_GPIO_SetPins+0x278>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	f040 8094 	bne.w	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
		if(Glob_SPI_Config[SPI2_Index]->Mode == SPI_MODE_Master)
 8000c42:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d151      	bne.n	8000cf0 <MCAL_SPI_GPIO_SetPins+0x1e8>
			switch(Glob_SPI_Config[SPI2_Index]->NSS)
 8000c4c:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	891b      	ldrh	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <MCAL_SPI_GPIO_SetPins+0x154>
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d00c      	beq.n	8000c74 <MCAL_SPI_GPIO_SetPins+0x16c>
 8000c5a:	e019      	b.n	8000c90 <MCAL_SPI_GPIO_SetPins+0x188>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4843      	ldr	r0, [pc, #268]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000c6e:	f7ff fe54 	bl	800091a <MCAL_GPIO_Init>
				break;
 8000c72:	e00d      	b.n	8000c90 <MCAL_SPI_GPIO_SetPins+0x188>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	483c      	ldr	r0, [pc, #240]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000c8a:	f7ff fe46 	bl	800091a <MCAL_GPIO_Init>
				break;
 8000c8e:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c94:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000c96:	2306      	movs	r3, #6
 8000c98:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4835      	ldr	r0, [pc, #212]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000ca6:	f7ff fe38 	bl	800091a <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	885b      	ldrh	r3, [r3, #2]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10a      	bne.n	8000cca <MCAL_SPI_GPIO_SetPins+0x1c2>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb8:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	482d      	ldr	r0, [pc, #180]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000cc6:	f7ff fe28 	bl	800091a <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	885b      	ldrh	r3, [r3, #2]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14a      	bne.n	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
				PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd8:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4824      	ldr	r0, [pc, #144]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000cea:	f7ff fe16 	bl	800091a <MCAL_GPIO_Init>
}
 8000cee:	e03c      	b.n	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
			if(Glob_SPI_Config[SPI2_Index]->NSS == SPI_NSS_Hardware_Slave)
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	891b      	ldrh	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10a      	bne.n	8000d10 <MCAL_SPI_GPIO_SetPins+0x208>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481c      	ldr	r0, [pc, #112]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000d0c:	f7ff fe05 	bl	800091a <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d14:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000d22:	f7ff fdfa 	bl	800091a <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	885b      	ldrh	r3, [r3, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10c      	bne.n	8000d4a <MCAL_SPI_GPIO_SetPins+0x242>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000d30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d34:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000d36:	2306      	movs	r3, #6
 8000d38:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4619      	mov	r1, r3
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000d46:	f7ff fde8 	bl	800091a <MCAL_GPIO_Init>
			if(Glob_SPI_Config[SPI2_Index]->Comm_Mode == SPI_COMM_2Lines_FD)	//Full duplex slave (point to point)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MCAL_SPI_GPIO_SetPins+0x270>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	885b      	ldrh	r3, [r3, #2]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10a      	bne.n	8000d6a <MCAL_SPI_GPIO_SetPins+0x262>
				PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d58:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MCAL_SPI_GPIO_SetPins+0x274>)
 8000d66:	f7ff fdd8 	bl	800091a <MCAL_GPIO_Init>
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40013000 	.word	0x40013000
 8000d78:	20000044 	.word	0x20000044
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40003800 	.word	0x40003800

08000d84 <MCAL_SPI_Init>:
 * @retval 		- none
 * Note			- Support for SPI Full Duplex Master/Slave only & NSS HW/SW
 *				- in case of mater you have to configure pin and drive it
 */
void MCAL_SPI_Init(SPI_t* SPIx, SPI_Config_t* SPI_Cfg)
{
 8000d84:	b4b0      	push	{r4, r5, r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	/* Safety for Register*/
	u32 TempCR1 = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
	u32 TempCR2 = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]

	/* Save Config & Enable CLK*/
	if(SPIx == SPI1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <MCAL_SPI_Init+0x190>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d113      	bne.n	8000dc6 <MCAL_SPI_Init+0x42>
	{
		Glob_SPI1_Config = *SPI_Cfg;
 8000d9e:	4a5e      	ldr	r2, [pc, #376]	; (8000f18 <MCAL_SPI_Init+0x194>)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	4614      	mov	r4, r2
 8000da4:	461d      	mov	r5, r3
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dae:	e884 0003 	stmia.w	r4, {r0, r1}
		Glob_SPI_Config[SPI1_Index] = &Glob_SPI1_Config;
 8000db2:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <MCAL_SPI_Init+0x198>)
 8000db4:	4a58      	ldr	r2, [pc, #352]	; (8000f18 <MCAL_SPI_Init+0x194>)
 8000db6:	601a      	str	r2, [r3, #0]
		RCC_SPI1_CLK_EN();
 8000db8:	4b59      	ldr	r3, [pc, #356]	; (8000f20 <MCAL_SPI_Init+0x19c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a58      	ldr	r2, [pc, #352]	; (8000f20 <MCAL_SPI_Init+0x19c>)
 8000dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	e016      	b.n	8000df4 <MCAL_SPI_Init+0x70>
	}
	else if (SPIx == SPI2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a56      	ldr	r2, [pc, #344]	; (8000f24 <MCAL_SPI_Init+0x1a0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d112      	bne.n	8000df4 <MCAL_SPI_Init+0x70>
	{
		Glob_SPI2_Config = *SPI_Cfg;
 8000dce:	4a56      	ldr	r2, [pc, #344]	; (8000f28 <MCAL_SPI_Init+0x1a4>)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dde:	e884 0003 	stmia.w	r4, {r0, r1}
		Glob_SPI_Config[SPI1_Index] = &Glob_SPI2_Config;
 8000de2:	4b4e      	ldr	r3, [pc, #312]	; (8000f1c <MCAL_SPI_Init+0x198>)
 8000de4:	4a50      	ldr	r2, [pc, #320]	; (8000f28 <MCAL_SPI_Init+0x1a4>)
 8000de6:	601a      	str	r2, [r3, #0]
		RCC_SPI2_CLK_EN();
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <MCAL_SPI_Init+0x19c>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <MCAL_SPI_Init+0x19c>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	61d3      	str	r3, [r2, #28]
	}

	/* Set SPI Configurations */
	//1. Set BaudRate Prescaler
	TempCR1 |= SPI_Cfg->Baudrate_Prescaler;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	89db      	ldrh	r3, [r3, #14]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

	//2. Set CLK Phase
	TempCR1 |= SPI_Cfg->Phase;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	899b      	ldrh	r3, [r3, #12]
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

	//3. Set CLK Polarity
	TempCR1 |= SPI_Cfg->Polarity;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	895b      	ldrh	r3, [r3, #10]
 8000e10:	461a      	mov	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

	//4. Set Data Size
	TempCR1 |= SPI_Cfg->Data_Size;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	88db      	ldrh	r3, [r3, #6]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

	//5. Set Frame Format
	TempCR1 |= SPI_Cfg->Frame_Format;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	889b      	ldrh	r3, [r3, #4]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

	//6. Set NSS
	if(SPI_Cfg->NSS == SPI_NSS_Hardware_Master_SS_ENABLE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	891b      	ldrh	r3, [r3, #8]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d106      	bne.n	8000e46 <MCAL_SPI_Init+0xc2>
	{
		TempCR2 |= SPI_Cfg->NSS;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	891b      	ldrh	r3, [r3, #8]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	e025      	b.n	8000e92 <MCAL_SPI_Init+0x10e>
	}
	else if (SPI_Cfg->NSS == SPI_NSS_Hardware_Master_SS_DISABLE)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	891b      	ldrh	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d106      	bne.n	8000e5c <MCAL_SPI_Init+0xd8>
	{
		TempCR2 &= SPI_Cfg->NSS;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	891b      	ldrh	r3, [r3, #8]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e01a      	b.n	8000e92 <MCAL_SPI_Init+0x10e>
		//todo if you got unknown error check this step
	}
	else if (SPI_Cfg->NSS == SPI_NSS_Software_Slave_SET || SPI_Cfg->NSS == SPI_NSS_Software_Slave_RESET)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	891b      	ldrh	r3, [r3, #8]
 8000e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e64:	d004      	beq.n	8000e70 <MCAL_SPI_Init+0xec>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	891b      	ldrh	r3, [r3, #8]
 8000e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e6e:	d106      	bne.n	8000e7e <MCAL_SPI_Init+0xfa>
	{
		TempCR1 |= SPI_Cfg->NSS;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	891b      	ldrh	r3, [r3, #8]
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e009      	b.n	8000e92 <MCAL_SPI_Init+0x10e>
	}
	else if (SPI_Cfg->NSS == SPI_NSS_Hardware_Slave)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	891b      	ldrh	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d105      	bne.n	8000e92 <MCAL_SPI_Init+0x10e>
	{
		TempCR2 &= SPI_Cfg->NSS;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	891b      	ldrh	r3, [r3, #8]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60bb      	str	r3, [r7, #8]
	}

	//7. Set Communication Mode
	TempCR1 |= SPI_Cfg->Comm_Mode;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	885b      	ldrh	r3, [r3, #2]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]

	//8. Set Mode - Master/Slave
	TempCR1 |= SPI_Cfg->Mode;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]

	//9. Enable SPI - SPE Bit in CR1
	TempCR1 |= (1 << 6);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb0:	60fb      	str	r3, [r7, #12]

	//10. Set IRQ & Enable NVIC
	if(SPI_Cfg->IRQ_Enable != SPI_IRQ_NONE)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	8a1b      	ldrh	r3, [r3, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d01b      	beq.n	8000ef2 <MCAL_SPI_Init+0x16e>
	{
		TempCR2 |= SPI_Cfg->IRQ_Enable;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	8a1b      	ldrh	r3, [r3, #16]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60bb      	str	r3, [r7, #8]
		if(SPIx == SPI1){
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MCAL_SPI_Init+0x190>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d106      	bne.n	8000edc <MCAL_SPI_Init+0x158>
			NVIC_SPI1_IRQ35_Enable();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MCAL_SPI_Init+0x1a8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <MCAL_SPI_Init+0x1a8>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e010      	b.n	8000efe <MCAL_SPI_Init+0x17a>
		}
		else if(SPIx == SPI2){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <MCAL_SPI_Init+0x1a0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d10c      	bne.n	8000efe <MCAL_SPI_Init+0x17a>
			NVIC_SPI2_IRQ36_Enable();
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MCAL_SPI_Init+0x1a8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <MCAL_SPI_Init+0x1a8>)
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e005      	b.n	8000efe <MCAL_SPI_Init+0x17a>
		}
	}
	else
	{
		TempCR2 &= SPI_Cfg->IRQ_Enable;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	8a1b      	ldrh	r3, [r3, #16]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4013      	ands	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
	}

	/* Add values to the real resigter */
	SPIx->CR1 = TempCR1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = TempCR2;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	605a      	str	r2, [r3, #4]

}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bcb0      	pop	{r4, r5, r7}
 8000f12:	4770      	bx	lr
 8000f14:	40013000 	.word	0x40013000
 8000f18:	200000ac 	.word	0x200000ac
 8000f1c:	20000044 	.word	0x20000044
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40003800 	.word	0x40003800
 8000f28:	20000094 	.word	0x20000094
 8000f2c:	e000e104 	.word	0xe000e104

08000f30 <MCAL_SPI_TxRx>:
 * @param [in]	- pRxBuffer: includes the data to recieve
 * @param [in]	- PollingEn: define if the pooling is enable or not
 * @retval 		- none
 */
void MCAL_SPI_TxRx(SPI_t* SPIx, u16 *pTxBuffer, enum SPI_Polling_mechanism PollingEn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == PollingEnable)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d106      	bne.n	8000f52 <MCAL_SPI_TxRx+0x22>
		while(!(SPIx->SR & 1 << 1));
 8000f44:	bf00      	nop
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f9      	beq.n	8000f46 <MCAL_SPI_TxRx+0x16>
	SPIx->DR = *pTxBuffer;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	60da      	str	r2, [r3, #12]

	if(PollingEn == PollingEnable)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d106      	bne.n	8000f70 <MCAL_SPI_TxRx+0x40>
		while(!(SPIx->SR & 1 ));
 8000f62:	bf00      	nop
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f9      	beq.n	8000f64 <MCAL_SPI_TxRx+0x34>
	*pTxBuffer = (SPIx->DR);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	801a      	strh	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <SPI1_IRQHandler>:
/***************************************************************
------------------------ ISR Functions  ------------------------
 ****************************************************************/

void SPI1_IRQHandler()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	/*check What's causing the IRQ */
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <SPI1_IRQHandler+0x54>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	793b      	ldrb	r3, [r7, #4]
 8000f98:	f362 0300 	bfi	r3, r2, #0, #1
 8000f9c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <SPI1_IRQHandler+0x54>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	793b      	ldrb	r3, [r7, #4]
 8000faa:	f362 0341 	bfi	r3, r2, #1, #1
 8000fae:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <SPI1_IRQHandler+0x54>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	793b      	ldrb	r3, [r7, #4]
 8000fbe:	f362 0382 	bfi	r3, r2, #2, #1
 8000fc2:	713b      	strb	r3, [r7, #4]

	/* Call ISR Function */
	Glob_SPI_Config[SPI1_Index]->P_ISR_CallBack(irq_src);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SPI1_IRQHandler+0x58>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	7938      	ldrb	r0, [r7, #4]
 8000fcc:	4798      	blx	r3
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40013000 	.word	0x40013000
 8000fdc:	20000044 	.word	0x20000044

08000fe0 <SPI2_IRQHandler>:

void SPI2_IRQHandler()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	/*check What's causing the IRQ */
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <SPI2_IRQHandler+0x54>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	085b      	lsrs	r3, r3, #1
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	793b      	ldrb	r3, [r7, #4]
 8000ff4:	f362 0300 	bfi	r3, r2, #0, #1
 8000ff8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <SPI2_IRQHandler+0x54>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	f362 0341 	bfi	r3, r2, #1, #1
 800100a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <SPI2_IRQHandler+0x54>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	793b      	ldrb	r3, [r7, #4]
 800101a:	f362 0382 	bfi	r3, r2, #2, #1
 800101e:	713b      	strb	r3, [r7, #4]

	/* Call ISR Function */
	Glob_SPI_Config[SPI2_Index]->P_ISR_CallBack(irq_src);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SPI2_IRQHandler+0x58>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	7938      	ldrb	r0, [r7, #4]
 8001028:	4798      	blx	r3
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40003800 	.word	0x40003800
 8001038:	20000044 	.word	0x20000044

0800103c <MCAL_Timer2_init>:
 */
#include "STM32F103C6_TIMER_Driver.h"


void MCAL_Timer2_init(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MCAL_Timer2_init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <MCAL_Timer2_init+0x40>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MCAL_Timer2_init+0x44>)
 800104e:	2207      	movs	r2, #7
 8001050:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MCAL_Timer2_init+0x48>)
 8001054:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001058:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 800105a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 800106a:	bf00      	nop
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MCAL_Timer2_init+0x4c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0fb      	beq.n	800106c <MCAL_Timer2_init+0x30>
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	4002101c 	.word	0x4002101c
 8001080:	40000028 	.word	0x40000028
 8001084:	4000002c 	.word	0x4000002c
 8001088:	40000010 	.word	0x40000010

0800108c <dus>:

void dus(int us)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <dus+0x24>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 800109a:	bf00      	nop
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <dus+0x24>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3fa      	bcc.n	800109c <dus+0x10>
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40000024 	.word	0x40000024

080010b4 <MCAL_UART_Init>:
 * @param [in]	- UART_Cfg: All UART configuration
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Cfg)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	//0- save uart config in global variable
	if(USARTx == USART1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a61      	ldr	r2, [pc, #388]	; (8001248 <MCAL_UART_Init+0x194>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d103      	bne.n	80010ce <MCAL_UART_Init+0x1a>
		GLOBAL_UART1_Config = UART_Cfg;
 80010c6:	4a61      	ldr	r2, [pc, #388]	; (800124c <MCAL_UART_Init+0x198>)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e00a      	b.n	80010e4 <MCAL_UART_Init+0x30>
	else if(USARTx == USART2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a5f      	ldr	r2, [pc, #380]	; (8001250 <MCAL_UART_Init+0x19c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d103      	bne.n	80010de <MCAL_UART_Init+0x2a>
		GLOBAL_UART2_Config = UART_Cfg;
 80010d6:	4a5f      	ldr	r2, [pc, #380]	; (8001254 <MCAL_UART_Init+0x1a0>)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	e002      	b.n	80010e4 <MCAL_UART_Init+0x30>
	else
		GLOBAL_UART3_Config = UART_Cfg;
 80010de:	4a5e      	ldr	r2, [pc, #376]	; (8001258 <MCAL_UART_Init+0x1a4>)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	6013      	str	r3, [r2, #0]

	//1- enable UART peripheral
	if(USARTx == USART1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a58      	ldr	r2, [pc, #352]	; (8001248 <MCAL_UART_Init+0x194>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d106      	bne.n	80010fa <MCAL_UART_Init+0x46>
		RCC_USART1_CLK_EN();
 80010ec:	4b5b      	ldr	r3, [pc, #364]	; (800125c <MCAL_UART_Init+0x1a8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a5a      	ldr	r2, [pc, #360]	; (800125c <MCAL_UART_Init+0x1a8>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	e014      	b.n	8001124 <MCAL_UART_Init+0x70>
	else if(USARTx == USART2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a54      	ldr	r2, [pc, #336]	; (8001250 <MCAL_UART_Init+0x19c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d106      	bne.n	8001110 <MCAL_UART_Init+0x5c>
		RCC_USART2_CLK_EN();
 8001102:	4b56      	ldr	r3, [pc, #344]	; (800125c <MCAL_UART_Init+0x1a8>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a55      	ldr	r2, [pc, #340]	; (800125c <MCAL_UART_Init+0x1a8>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	e009      	b.n	8001124 <MCAL_UART_Init+0x70>
	else if(USARTx == USART3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a53      	ldr	r2, [pc, #332]	; (8001260 <MCAL_UART_Init+0x1ac>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d105      	bne.n	8001124 <MCAL_UART_Init+0x70>
		RCC_USART3_CLK_EN();
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <MCAL_UART_Init+0x1a8>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	4a4f      	ldr	r2, [pc, #316]	; (800125c <MCAL_UART_Init+0x1a8>)
 800111e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001122:	61d3      	str	r3, [r2, #28]

	//2- enable UART_CR module
	USARTx->CR1 |= (1 << 13);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	60da      	str	r2, [r3, #12]

	//3- enable UART_CR mode
	USARTx->CR1 |= UART_Cfg->USART_Mode;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60da      	str	r2, [r3, #12]

	//4- enable UART_CR payload
	USARTx->CR1 |= UART_Cfg->PayLoad;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	7a12      	ldrb	r2, [r2, #8]
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	60da      	str	r2, [r3, #12]

	//5- enable UART_CR parity
	USARTx->CR1 |= UART_Cfg->Parity;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	7a52      	ldrb	r2, [r2, #9]
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60da      	str	r2, [r3, #12]

	//6- enable UART_CR2 stop bits
	USARTx->CR2 |= UART_Cfg->StopBit;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	7a92      	ldrb	r2, [r2, #10]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]

	//7- enable UART_CR3 flow ctrl
	USARTx->CR3 |= UART_Cfg->HW_Flow_CTRL;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	7ad2      	ldrb	r2, [r2, #11]
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	615a      	str	r2, [r3, #20]

	//8- Configure BRR value
	if(USARTx == USART1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a33      	ldr	r2, [pc, #204]	; (8001248 <MCAL_UART_Init+0x194>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d105      	bne.n	800118a <MCAL_UART_Init+0xd6>
	{
		Pclk = MCAL_RCC_GetPCLK2Freq();
 800117e:	f7ff fcad 	bl	8000adc <MCAL_RCC_GetPCLK2Freq>
 8001182:	4602      	mov	r2, r0
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <MCAL_UART_Init+0x1b0>)
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e004      	b.n	8001194 <MCAL_UART_Init+0xe0>
	}
	else
	{
		Pclk = MCAL_RCC_GetPCLK1Freq();
 800118a:	f7ff fc91 	bl	8000ab0 <MCAL_RCC_GetPCLK1Freq>
 800118e:	4602      	mov	r2, r0
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <MCAL_UART_Init+0x1b0>)
 8001192:	601a      	str	r2, [r3, #0]
	}
	USARTx->BRR = USART_BRR_Register(Pclk, UART_Cfg->BaudRate);
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <MCAL_UART_Init+0x1b0>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	0119      	lsls	r1, r3, #4
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <MCAL_UART_Init+0x1b0>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	009a      	lsls	r2, r3, #2
 80011b0:	441a      	add	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <MCAL_UART_Init+0x1b0>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	fb00 f303 	mul.w	r3, r0, r3
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4a24      	ldr	r2, [pc, #144]	; (8001268 <MCAL_UART_Init+0x1b4>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	ea41 0203 	orr.w	r2, r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]

	//9- enable UART interrupt and NVIC
	if(UART_Cfg->IRQ_EN != USART_IRQ__EN_NONE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	7b1b      	ldrb	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d026      	beq.n	800123e <MCAL_UART_Init+0x18a>
	{
		USARTx->CR1 |= UART_Cfg->IRQ_EN;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	7b12      	ldrb	r2, [r2, #12]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60da      	str	r2, [r3, #12]

		if(USARTx == USART1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a11      	ldr	r2, [pc, #68]	; (8001248 <MCAL_UART_Init+0x194>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d106      	bne.n	8001214 <MCAL_UART_Init+0x160>
			NVIC_USART1_IRQ37_Enable();
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MCAL_UART_Init+0x1b8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a18      	ldr	r2, [pc, #96]	; (800126c <MCAL_UART_Init+0x1b8>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2)
			NVIC_USART2_IRQ38_Enable();
		else if(USARTx == USART3)
			NVIC_USART3_IRQ39_Enable();
	}
}
 8001212:	e014      	b.n	800123e <MCAL_UART_Init+0x18a>
		else if(USARTx == USART2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <MCAL_UART_Init+0x19c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d106      	bne.n	800122a <MCAL_UART_Init+0x176>
			NVIC_USART2_IRQ38_Enable();
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MCAL_UART_Init+0x1b8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <MCAL_UART_Init+0x1b8>)
 8001222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	e009      	b.n	800123e <MCAL_UART_Init+0x18a>
		else if(USARTx == USART3)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <MCAL_UART_Init+0x1ac>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d105      	bne.n	800123e <MCAL_UART_Init+0x18a>
			NVIC_USART3_IRQ39_Enable();
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MCAL_UART_Init+0x1b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a0d      	ldr	r2, [pc, #52]	; (800126c <MCAL_UART_Init+0x1b8>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40013800 	.word	0x40013800
 800124c:	2000004c 	.word	0x2000004c
 8001250:	40004400 	.word	0x40004400
 8001254:	20000050 	.word	0x20000050
 8001258:	20000054 	.word	0x20000054
 800125c:	40021000 	.word	0x40021000
 8001260:	40004800 	.word	0x40004800
 8001264:	200000c8 	.word	0x200000c8
 8001268:	51eb851f 	.word	0x51eb851f
 800126c:	e000e104 	.word	0xe000e104

08001270 <MCAL_UART_GPIO_SetPins>:
 * @param [in]	- USARTx: where x can be (1..3 depending on device used)
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_GPIO_SetPins(USART_t* USARTx)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a2b      	ldr	r2, [pc, #172]	; (8001328 <MCAL_UART_GPIO_SetPins+0xb8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d118      	bne.n	80012b2 <MCAL_UART_GPIO_SetPins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8001286:	2306      	movs	r3, #6
 8001288:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800128a:	2301      	movs	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	4825      	ldr	r0, [pc, #148]	; (800132c <MCAL_UART_GPIO_SetPins+0xbc>)
 8001296:	f7ff fb40 	bl	800091a <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	4820      	ldr	r0, [pc, #128]	; (800132c <MCAL_UART_GPIO_SetPins+0xbc>)
 80012ac:	f7ff fb35 	bl	800091a <MCAL_GPIO_Init>
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 80012b0:	e036      	b.n	8001320 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <MCAL_UART_GPIO_SetPins+0xc0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d116      	bne.n	80012e8 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80012ba:	2304      	movs	r3, #4
 80012bc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80012be:	2306      	movs	r3, #6
 80012c0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80012c2:	2301      	movs	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	4817      	ldr	r0, [pc, #92]	; (800132c <MCAL_UART_GPIO_SetPins+0xbc>)
 80012ce:	f7ff fb24 	bl	800091a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80012d2:	2308      	movs	r3, #8
 80012d4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <MCAL_UART_GPIO_SetPins+0xbc>)
 80012e2:	f7ff fb1a 	bl	800091a <MCAL_GPIO_Init>
}
 80012e6:	e01b      	b.n	8001320 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MCAL_UART_GPIO_SetPins+0xc4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d117      	bne.n	8001320 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80012f6:	2306      	movs	r3, #6
 80012f8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <MCAL_UART_GPIO_SetPins+0xc8>)
 8001306:	f7ff fb08 	bl	800091a <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800130a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800130e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8001310:	2301      	movs	r3, #1
 8001312:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4619      	mov	r1, r3
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <MCAL_UART_GPIO_SetPins+0xc8>)
 800131c:	f7ff fafd 	bl	800091a <MCAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013800 	.word	0x40013800
 800132c:	40010800 	.word	0x40010800
 8001330:	40004400 	.word	0x40004400
 8001334:	40004800 	.word	0x40004800
 8001338:	40010c00 	.word	0x40010c00

0800133c <MCAL_UART_SendData>:
 * @param [in]	- PollingEn: define if the pooling is enable or not
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum UART_Polling_mechanism PollingEn)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4613      	mov	r3, r2
 8001348:	71fb      	strb	r3, [r7, #7]

	//1. wait TXE flag in SR until to be set
	if(PollingEn == enable)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8001350:	bf00      	nop
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f9      	beq.n	8001352 <MCAL_UART_SendData+0x16>

	//0. select which USARTx
	UART_Config_t* USARTx_Config = NULL;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <MCAL_UART_SendData+0x68>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d103      	bne.n	8001372 <MCAL_UART_SendData+0x36>
		USARTx_Config = GLOBAL_UART1_Config;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MCAL_UART_SendData+0x6c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e00e      	b.n	8001390 <MCAL_UART_SendData+0x54>
	else if(USARTx == USART2)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <MCAL_UART_SendData+0x70>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d103      	bne.n	8001382 <MCAL_UART_SendData+0x46>
		USARTx_Config = GLOBAL_UART2_Config;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MCAL_UART_SendData+0x74>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e006      	b.n	8001390 <MCAL_UART_SendData+0x54>
	else if(USARTx == USART3)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <MCAL_UART_SendData+0x78>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d102      	bne.n	8001390 <MCAL_UART_SendData+0x54>
		USARTx_Config = GLOBAL_UART3_Config;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MCAL_UART_SendData+0x7c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0x01FF);
	}
	else //8 bit word length
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0xFF);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	605a      	str	r2, [r3, #4]
	}
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40013800 	.word	0x40013800
 80013a8:	2000004c 	.word	0x2000004c
 80013ac:	40004400 	.word	0x40004400
 80013b0:	20000050 	.word	0x20000050
 80013b4:	40004800 	.word	0x40004800
 80013b8:	20000054 	.word	0x20000054

080013bc <MCAL_UART_SendString>:

void MCAL_UART_SendString(USART_t* USARTx, uint8_t* pTxString, uint16_t Delimiter)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]
	uint16_t LOC_Counter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	82fb      	strh	r3, [r7, #22]
	while(pTxString[LOC_Counter] != Delimiter)
 80013ce:	e00a      	b.n	80013e6 <MCAL_UART_SendString+0x2a>
	{
		MCAL_UART_SendData(USARTx,(uint16_t *) &pTxString[LOC_Counter], enable);
 80013d0:	8afb      	ldrh	r3, [r7, #22]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	4413      	add	r3, r2
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff ffae 	bl	800133c <MCAL_UART_SendData>
		LOC_Counter++;
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	3301      	adds	r3, #1
 80013e4:	82fb      	strh	r3, [r7, #22]
	while(pTxString[LOC_Counter] != Delimiter)
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d1ec      	bne.n	80013d0 <MCAL_UART_SendString+0x14>
	}
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MCAL_UART_ReceiveData>:

void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum UART_Polling_mechanism PollingEn)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	4613      	mov	r3, r2
 800140c:	71fb      	strb	r3, [r7, #7]
	//0. wait TXE flag in SR until to be set
	if(PollingEn == enable)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d106      	bne.n	8001422 <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8001414:	bf00      	nop
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f9      	beq.n	8001416 <MCAL_UART_ReceiveData+0x16>

	//1. select which USARTx
	UART_Config_t* USARTx_Config = NULL;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4a17      	ldr	r2, [pc, #92]	; (8001488 <MCAL_UART_ReceiveData+0x88>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d103      	bne.n	8001436 <MCAL_UART_ReceiveData+0x36>
		USARTx_Config = GLOBAL_UART1_Config;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MCAL_UART_ReceiveData+0x8c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e00e      	b.n	8001454 <MCAL_UART_ReceiveData+0x54>
	else if(USARTx == USART2)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <MCAL_UART_ReceiveData+0x90>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d103      	bne.n	8001446 <MCAL_UART_ReceiveData+0x46>
		USARTx_Config = GLOBAL_UART2_Config;
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MCAL_UART_ReceiveData+0x94>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	e006      	b.n	8001454 <MCAL_UART_ReceiveData+0x54>
	else if(USARTx == USART3)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <MCAL_UART_ReceiveData+0x98>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d102      	bne.n	8001454 <MCAL_UART_ReceiveData+0x54>
		USARTx_Config = GLOBAL_UART3_Config;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MCAL_UART_ReceiveData+0x9c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	617b      	str	r3, [r7, #20]
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF);
	}

	else //8 bit word length
	{
		if(USARTx_Config->Parity == USART_PARITY_NONE)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	7a5b      	ldrb	r3, [r3, #9]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d107      	bne.n	800146c <MCAL_UART_ReceiveData+0x6c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	b29b      	uxth	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	b29a      	uxth	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	801a      	strh	r2, [r3, #0]

		else //parity ON
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F);
	}

}
 800146a:	e007      	b.n	800147c <MCAL_UART_ReceiveData+0x7c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001476:	b29a      	uxth	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	801a      	strh	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40013800 	.word	0x40013800
 800148c:	2000004c 	.word	0x2000004c
 8001490:	40004400 	.word	0x40004400
 8001494:	20000050 	.word	0x20000050
 8001498:	40004800 	.word	0x40004800
 800149c:	20000054 	.word	0x20000054

080014a0 <USART1_IRQHandler>:
 * 								ISR Functions
 * =========================================================================
 */

void USART1_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	GLOBAL_UART1_Config->IRQ_CallBack();
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <USART1_IRQHandler+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	4798      	blx	r3
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000004c 	.word	0x2000004c

080014b4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	GLOBAL_UART2_Config->IRQ_CallBack();
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <USART2_IRQHandler+0x10>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	4798      	blx	r3
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000050 	.word	0x20000050

080014c8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	GLOBAL_UART3_Config->IRQ_CallBack();
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <USART3_IRQHandler+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4798      	blx	r3
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000054 	.word	0x20000054

080014dc <APP_CLK_init>:

/* ==============================================
 * 		Initialization  & Start FCNs
 * ==============================================*/
static void APP_CLK_init(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	//1. GPIO port A clock enable
	RCC_GPIOA_CLK_EN();
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <APP_CLK_init+0x30>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a09      	ldr	r2, [pc, #36]	; (800150c <APP_CLK_init+0x30>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]

	//2. GPIO port B clock enable
	RCC_GPIOB_CLK_EN();
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <APP_CLK_init+0x30>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <APP_CLK_init+0x30>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6193      	str	r3, [r2, #24]

	//3. AFIO clock enable
	RCC_AFIO_CLK_EN();
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <APP_CLK_init+0x30>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <APP_CLK_init+0x30>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6193      	str	r3, [r2, #24]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000

08001510 <APP_UART_init>:

static void APP_UART_init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	//PA09 Tx
	//PA10 Rx
	//PA11 CTS
	//PA12 RTS

	uartCfg.BaudRate = USART_BAUDRATE_115200;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <APP_UART_init+0x4c>)
 8001516:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151a:	605a      	str	r2, [r3, #4]
	uartCfg.HW_Flow_CTRL = HW_FLOW_CTRL_CTS_NONE;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <APP_UART_init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	72da      	strb	r2, [r3, #11]
	uartCfg.IRQ_EN = USART_IRQ__EN_RXNEIE;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <APP_UART_init+0x4c>)
 8001524:	2220      	movs	r2, #32
 8001526:	731a      	strb	r2, [r3, #12]
	uartCfg.IRQ_CallBack = ECU1_UART_IRQ_CallBack;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <APP_UART_init+0x4c>)
 800152a:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <APP_UART_init+0x50>)
 800152c:	611a      	str	r2, [r3, #16]
	uartCfg.Parity = USART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <APP_UART_init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	725a      	strb	r2, [r3, #9]
	uartCfg.PayLoad = USART_PAYLOAD_8B;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <APP_UART_init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	721a      	strb	r2, [r3, #8]
	uartCfg.StopBit = UASRT_STOPBIT_1;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <APP_UART_init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	729a      	strb	r2, [r3, #10]
	uartCfg.USART_Mode = USART_MODE_Tx_Rx;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <APP_UART_init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	701a      	strb	r2, [r3, #0]

	MCAL_UART_Init(USART1, &uartCfg);
 8001546:	4905      	ldr	r1, [pc, #20]	; (800155c <APP_UART_init+0x4c>)
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <APP_UART_init+0x54>)
 800154a:	f7ff fdb3 	bl	80010b4 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <APP_UART_init+0x54>)
 8001550:	f7ff fe8e 	bl	8001270 <MCAL_UART_GPIO_SetPins>

	UART_Welcome_Message();
 8001554:	f000 f884 	bl	8001660 <UART_Welcome_Message>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200000cc 	.word	0x200000cc
 8001560:	08001855 	.word	0x08001855
 8001564:	40013800 	.word	0x40013800

08001568 <APP_SPI_init>:

static void APP_SPI_init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
	//PA7 : MOSI

	SPI_Config_t spi1Cfg;

	/* Common Configuration */
	spi1Cfg.Phase = SPI_PHASE_Second_Edge;
 800156e:	2301      	movs	r3, #1
 8001570:	81bb      	strh	r3, [r7, #12]
	spi1Cfg.Polarity = SPI_IDEAL_High;
 8001572:	2302      	movs	r3, #2
 8001574:	817b      	strh	r3, [r7, #10]
	spi1Cfg.Frame_Format = SPI_FRAME_MSB;
 8001576:	2300      	movs	r3, #0
 8001578:	80bb      	strh	r3, [r7, #4]
	spi1Cfg.Data_Size = SPI_DATA_8_Bit;
 800157a:	2300      	movs	r3, #0
 800157c:	80fb      	strh	r3, [r7, #6]
	spi1Cfg.Baudrate_Prescaler = SPI_BAUDRATEPRESCALER_8;
 800157e:	2310      	movs	r3, #16
 8001580:	81fb      	strh	r3, [r7, #14]
	spi1Cfg.Comm_Mode = SPI_COMM_2Lines_FD;
 8001582:	2300      	movs	r3, #0
 8001584:	807b      	strh	r3, [r7, #2]
	/* Force the SS to high idle Mode */
	MCAL_GPIO_WritePin(GPIOA, pinCfg.GPIO_PinNumber, GPIO_PIN_SET);
#endif

#ifdef MCU_Act_As_Slave
	spi1Cfg.Mode = SPI_MODE_Slave;
 8001586:	2300      	movs	r3, #0
 8001588:	803b      	strh	r3, [r7, #0]
	spi1Cfg.IRQ_Enable = SPI_IRQ_RXNEIE;
 800158a:	2340      	movs	r3, #64	; 0x40
 800158c:	823b      	strh	r3, [r7, #16]
	spi1Cfg.P_ISR_CallBack = ECU1_SPI_IRQ_CallBack;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <APP_SPI_init+0x48>)
 8001590:	617b      	str	r3, [r7, #20]
	spi1Cfg.NSS = SPI_NSS_Hardware_Slave;
 8001592:	2300      	movs	r3, #0
 8001594:	813b      	strh	r3, [r7, #8]
#endif

	MCAL_SPI_Init(SPI1, &spi1Cfg);
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <APP_SPI_init+0x4c>)
 800159c:	f7ff fbf2 	bl	8000d84 <MCAL_SPI_Init>
	/* Set GPIO Pins for SPI */
	MCAL_SPI_GPIO_SetPins(SPI1);
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <APP_SPI_init+0x4c>)
 80015a2:	f7ff fab1 	bl	8000b08 <MCAL_SPI_GPIO_SetPins>

	//LCD_clear_screen_2();
	//HAL_LCD_Send_String("SPI READY       MODE: Slave");
	//delay_ms(500);
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	080018c9 	.word	0x080018c9
 80015b4:	40013000 	.word	0x40013000

080015b8 <APP_EXTI_init>:

static void APP_EXTI_init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Slave
	GPIO_PinConfig_t pin_cfg;
	pin_cfg.GPIO_PinNumber = EXTI_Pin;
 80015be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c2:	80bb      	strh	r3, [r7, #4]
	pin_cfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2304      	movs	r3, #4
 80015c6:	71bb      	strb	r3, [r7, #6]
	pin_cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80015c8:	2301      	movs	r3, #1
 80015ca:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(EXTI_Port, &pin_cfg);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <APP_EXTI_init+0x28>)
 80015d2:	f7ff f9a2 	bl	800091a <MCAL_GPIO_Init>
#endif
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010800 	.word	0x40010800

080015e4 <APP_LEDs_Init>:

static void APP_LEDs_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	// Setup Valid LED
	GPIO_PinConfig_t pinCfg;
	pinCfg.GPIO_PinNumber = VALID_LED;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	80bb      	strh	r3, [r7, #4]
	pinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2304      	movs	r3, #4
 80015f2:	71bb      	strb	r3, [r7, #6]
	pinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80015f4:	2301      	movs	r3, #1
 80015f6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LED_PORT, &pinCfg);
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <APP_LEDs_Init+0x38>)
 80015fe:	f7ff f98c 	bl	800091a <MCAL_GPIO_Init>

	// Setup InValid LED
	pinCfg.GPIO_PinNumber = INVALID_LED;
 8001602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001606:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LED_PORT, &pinCfg);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <APP_LEDs_Init+0x38>)
 800160e:	f7ff f984 	bl	800091a <MCAL_GPIO_Init>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40010c00 	.word	0x40010c00

08001620 <APP_Start_Tringer_init>:

static void APP_Start_Tringer_init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t pinCfg;
	pinCfg.GPIO_PinNumber = Start_Trigger_Pin;
 8001626:	2301      	movs	r3, #1
 8001628:	80bb      	strh	r3, [r7, #4]
	pinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800162a:	2301      	movs	r3, #1
 800162c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(Start_Trigger_PORT, &pinCfg);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <APP_Start_Tringer_init+0x20>)
 8001634:	f7ff f971 	bl	800091a <MCAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40010c00 	.word	0x40010c00

08001644 <APP_Start_Wait_Trigger>:

static void APP_Start_Wait_Trigger(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	while(MCAL_GPIO_ReadPin(Start_Trigger_PORT, Start_Trigger_Pin) == 0)
 8001648:	bf00      	nop
 800164a:	2101      	movs	r1, #1
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <APP_Start_Wait_Trigger+0x18>)
 800164e:	f7ff f9cc 	bl	80009ea <MCAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f8      	beq.n	800164a <APP_Start_Wait_Trigger+0x6>
	{

	}
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010c00 	.word	0x40010c00

08001660 <UART_Welcome_Message>:

/* ==============================================
 * 					LCD FCNs
 * ==============================================*/
void UART_Welcome_Message(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	//LCD_clear_screen_2();
	//HAL_LCD_Send_String("UART is READY ");
	//delay_ms(50);

	MCAL_UART_SendString(USART1, addString("**************** WELCOME TO ETCH GARAGE :) ****************\r\n\0"), '\0');
 8001664:	2200      	movs	r2, #0
 8001666:	4905      	ldr	r1, [pc, #20]	; (800167c <UART_Welcome_Message+0x1c>)
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <UART_Welcome_Message+0x20>)
 800166a:	f7ff fea7 	bl	80013bc <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, addString("Enter ID: "), '\0');
 800166e:	2200      	movs	r2, #0
 8001670:	4904      	ldr	r1, [pc, #16]	; (8001684 <UART_Welcome_Message+0x24>)
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <UART_Welcome_Message+0x20>)
 8001674:	f7ff fea2 	bl	80013bc <MCAL_UART_SendString>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	080019f0 	.word	0x080019f0
 8001680:	40013800 	.word	0x40013800
 8001684:	08001a30 	.word	0x08001a30

08001688 <LCD_Waiting_Message>:
	HAL_LCD_Send_String("SPI is READY    MODE: Slave");
	delay_ms(500);
}

void LCD_Waiting_Message(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	LCD_clear_screen_2();
 800168c:	f7fe fe42 	bl	8000314 <LCD_clear_screen_2>
	HAL_LCD_Send_String("System Getting  Ready ......");
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <LCD_Waiting_Message+0x14>)
 8001692:	f7fe ffa7 	bl	80005e4 <HAL_LCD_Send_String>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	08001a78 	.word	0x08001a78

080016a0 <LCD_Welcome_Message>:

void LCD_Welcome_Message(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	LCD_clear_screen_2();
 80016a4:	f7fe fe36 	bl	8000314 <LCD_clear_screen_2>
	HAL_LCD_Send_String("Welcome Sir,    Scan Your ID :)");
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <LCD_Welcome_Message+0x14>)
 80016aa:	f7fe ff9b 	bl	80005e4 <HAL_LCD_Send_String>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	08001a98 	.word	0x08001a98

080016b8 <ECU1_APP_Valid_Access>:

/* ==============================================
 * 					SYSTEM FCNs
 * ==============================================*/
void ECU1_APP_Valid_Access(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	Glob_Available_Slots--;
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <ECU1_APP_Valid_Access+0x90>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <ECU1_APP_Valid_Access+0x90>)
 80016c6:	701a      	strb	r2, [r3, #0]
	/* Turn ON Valid LED */
	MCAL_GPIO_WritePin(LED_PORT, VALID_LED, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ce:	481f      	ldr	r0, [pc, #124]	; (800174c <ECU1_APP_Valid_Access+0x94>)
 80016d0:	f7ff f99f 	bl	8000a12 <MCAL_GPIO_WritePin>

	LCD_clear_screen_2();
 80016d4:	f7fe fe1e 	bl	8000314 <LCD_clear_screen_2>
	MCAL_UART_SendString(USART1, "*** Valid ID ***\r\n", '\0');
 80016d8:	2200      	movs	r2, #0
 80016da:	491d      	ldr	r1, [pc, #116]	; (8001750 <ECU1_APP_Valid_Access+0x98>)
 80016dc:	481d      	ldr	r0, [pc, #116]	; (8001754 <ECU1_APP_Valid_Access+0x9c>)
 80016de:	f7ff fe6d 	bl	80013bc <MCAL_UART_SendString>
	HAL_LCD_Send_String("Welcome Sir     - Opening Gate");
 80016e2:	481d      	ldr	r0, [pc, #116]	; (8001758 <ECU1_APP_Valid_Access+0xa0>)
 80016e4:	f7fe ff7e 	bl	80005e4 <HAL_LCD_Send_String>


	Servo1_Entry_Gate(UP);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7fe fd6d 	bl	80001c8 <Servo1_Entry_Gate>

	LCD_clear_screen_2();
 80016ee:	f7fe fe11 	bl	8000314 <LCD_clear_screen_2>
	HAL_LCD_Send_String("Please,         Move Your Car :)");
 80016f2:	481a      	ldr	r0, [pc, #104]	; (800175c <ECU1_APP_Valid_Access+0xa4>)
 80016f4:	f7fe ff76 	bl	80005e4 <HAL_LCD_Send_String>

	/* Wait until Sensor is off */
	while(Motion_Sensor_Get_State() != 0);
 80016f8:	bf00      	nop
 80016fa:	f7fe ff89 	bl	8000610 <Motion_Sensor_Get_State>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1fa      	bne.n	80016fa <ECU1_APP_Valid_Access+0x42>
	LCD_clear_screen_2();
 8001704:	f7fe fe06 	bl	8000314 <LCD_clear_screen_2>
	HAL_LCD_Send_String("- Closing Gate");
 8001708:	4815      	ldr	r0, [pc, #84]	; (8001760 <ECU1_APP_Valid_Access+0xa8>)
 800170a:	f7fe ff6b 	bl	80005e4 <HAL_LCD_Send_String>

	Servo1_Entry_Gate(DOWN);
 800170e:	2002      	movs	r0, #2
 8001710:	f7fe fd5a 	bl	80001c8 <Servo1_Entry_Gate>

	/* Turn OFF Valid LED */
	MCAL_GPIO_WritePin(LED_PORT, VALID_LED, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <ECU1_APP_Valid_Access+0x94>)
 800171c:	f7ff f979 	bl	8000a12 <MCAL_GPIO_WritePin>

	Glob_Available_Slots--;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <ECU1_APP_Valid_Access+0x90>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <ECU1_APP_Valid_Access+0x90>)
 800172a:	701a      	strb	r2, [r3, #0]

	MCAL_UART_SendString(USART1, "\r\n**************** WELCOME TO ETCH GARAGE :) ****************\r\n", '\0');
 800172c:	2200      	movs	r2, #0
 800172e:	490d      	ldr	r1, [pc, #52]	; (8001764 <ECU1_APP_Valid_Access+0xac>)
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <ECU1_APP_Valid_Access+0x9c>)
 8001732:	f7ff fe43 	bl	80013bc <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, addString("Enter ID: "), '\0');
 8001736:	2200      	movs	r2, #0
 8001738:	490b      	ldr	r1, [pc, #44]	; (8001768 <ECU1_APP_Valid_Access+0xb0>)
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <ECU1_APP_Valid_Access+0x9c>)
 800173c:	f7ff fe3e 	bl	80013bc <MCAL_UART_SendString>

	LCD_Welcome_Message();
 8001740:	f7ff ffae 	bl	80016a0 <LCD_Welcome_Message>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000021 	.word	0x20000021
 800174c:	40010c00 	.word	0x40010c00
 8001750:	08001ab8 	.word	0x08001ab8
 8001754:	40013800 	.word	0x40013800
 8001758:	08001acc 	.word	0x08001acc
 800175c:	08001aec 	.word	0x08001aec
 8001760:	08001b10 	.word	0x08001b10
 8001764:	08001b20 	.word	0x08001b20
 8001768:	08001a30 	.word	0x08001a30

0800176c <ECU1_APP_InValid_Acess>:

void ECU1_APP_InValid_Acess(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	/* Turn ON Invalid LED */
	MCAL_GPIO_WritePin(LED_PORT, INVALID_LED, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <ECU1_APP_InValid_Acess+0x58>)
 8001778:	f7ff f94b 	bl	8000a12 <MCAL_GPIO_WritePin>

	LCD_clear_screen_2();
 800177c:	f7fe fdca 	bl	8000314 <LCD_clear_screen_2>
	HAL_LCD_Send_String("Invalid Access");
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <ECU1_APP_InValid_Acess+0x5c>)
 8001782:	f7fe ff2f 	bl	80005e4 <HAL_LCD_Send_String>
	MCAL_UART_SendString(USART1, "*** Received InValid ID ***\r\n", '\0');
 8001786:	2200      	movs	r2, #0
 8001788:	4910      	ldr	r1, [pc, #64]	; (80017cc <ECU1_APP_InValid_Acess+0x60>)
 800178a:	4811      	ldr	r0, [pc, #68]	; (80017d0 <ECU1_APP_InValid_Acess+0x64>)
 800178c:	f7ff fe16 	bl	80013bc <MCAL_UART_SendString>

	Buzzer_Start();
 8001790:	f7fe fcee 	bl	8000170 <Buzzer_Start>

	Servo1_Entry_Gate(DOWN);
 8001794:	2002      	movs	r0, #2
 8001796:	f7fe fd17 	bl	80001c8 <Servo1_Entry_Gate>

	/* Turn OFF Invalid LED */
	MCAL_GPIO_WritePin(LED_PORT, INVALID_LED, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <ECU1_APP_InValid_Acess+0x58>)
 80017a2:	f7ff f936 	bl	8000a12 <MCAL_GPIO_WritePin>

	MCAL_UART_SendString(USART1, addString("\r\n**************** WELCOME TO ETCH GARAGE :) ****************\r\n\0"), '\0');
 80017a6:	2200      	movs	r2, #0
 80017a8:	490a      	ldr	r1, [pc, #40]	; (80017d4 <ECU1_APP_InValid_Acess+0x68>)
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <ECU1_APP_InValid_Acess+0x64>)
 80017ac:	f7ff fe06 	bl	80013bc <MCAL_UART_SendString>
	MCAL_UART_SendString(USART1, addString("Enter ID: "), '\0');
 80017b0:	2200      	movs	r2, #0
 80017b2:	4909      	ldr	r1, [pc, #36]	; (80017d8 <ECU1_APP_InValid_Acess+0x6c>)
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <ECU1_APP_InValid_Acess+0x64>)
 80017b6:	f7ff fe01 	bl	80013bc <MCAL_UART_SendString>

	LCD_Welcome_Message();
 80017ba:	f7ff ff71 	bl	80016a0 <LCD_Welcome_Message>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40010c00 	.word	0x40010c00
 80017c8:	08001b60 	.word	0x08001b60
 80017cc:	08001b70 	.word	0x08001b70
 80017d0:	40013800 	.word	0x40013800
 80017d4:	08001b90 	.word	0x08001b90
 80017d8:	08001a30 	.word	0x08001a30

080017dc <delay_ms>:

/* ==============================================
 * 					GENERIC FCNs
 * ==============================================*/
void delay_ms(uint32_t time){
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e00b      	b.n	8001802 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	e002      	b.n	80017f6 <delay_ms+0x1a>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	3301      	adds	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2bfe      	cmp	r3, #254	; 0xfe
 80017fa:	d9f9      	bls.n	80017f0 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3ef      	bcc.n	80017ea <delay_ms+0xe>
			;
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <ECU1_Dashboard_APP_SETUP>:
 * @brief 		- This function is used to make MCAL & HAL initialization.
 * @param [in]	- none
 * @retval 		- none
 **************************************************************************/
void ECU1_Dashboard_APP_SETUP(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	APP_CLK_init();
 8001818:	f7ff fe60 	bl	80014dc <APP_CLK_init>

	//HAL initialization
	HAL_LCD_Init();
 800181c:	f7fe fdc4 	bl	80003a8 <HAL_LCD_Init>
	Servo1_Entry_Gate_Init();
 8001820:	f7fe fcbc 	bl	800019c <Servo1_Entry_Gate_Init>

	LCD_Waiting_Message();
 8001824:	f7ff ff30 	bl	8001688 <LCD_Waiting_Message>

	APP_LEDs_Init();
 8001828:	f7ff fedc 	bl	80015e4 <APP_LEDs_Init>
	//HAL_keypad_init();

	//MCAL initialization
	MCAL_Timer2_init();
 800182c:	f7ff fc06 	bl	800103c <MCAL_Timer2_init>
	APP_UART_init();
 8001830:	f7ff fe6e 	bl	8001510 <APP_UART_init>
	APP_SPI_init();
 8001834:	f7ff fe98 	bl	8001568 <APP_SPI_init>
	APP_EXTI_init();
 8001838:	f7ff febe 	bl	80015b8 <APP_EXTI_init>

	APP_Start_Tringer_init();
 800183c:	f7ff fef0 	bl	8001620 <APP_Start_Tringer_init>
	APP_Start_Wait_Trigger();
 8001840:	f7ff ff00 	bl	8001644 <APP_Start_Wait_Trigger>

	LCD_Welcome_Message();
 8001844:	f7ff ff2c 	bl	80016a0 <LCD_Welcome_Message>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <ECU1_Dashboard_APP_RUN>:
void ECU1_Dashboard_APP_RUN(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	while(1)
 8001850:	e7fe      	b.n	8001850 <ECU1_Dashboard_APP_RUN+0x4>
	...

08001854 <ECU1_UART_IRQ_CallBack>:

/* =========================================================================
 * 								Callback Functions
 * =========================================================================*/
static void ECU1_UART_IRQ_CallBack(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint8_t check_Termination, LOC_RxData;
	MCAL_UART_ReceiveData(USART1, &LOC_RxData, enable);
 800185a:	1dbb      	adds	r3, r7, #6
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4816      	ldr	r0, [pc, #88]	; (80018bc <ECU1_UART_IRQ_CallBack+0x68>)
 8001862:	f7ff fdcd 	bl	8001400 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &LOC_RxData, enable);
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <ECU1_UART_IRQ_CallBack+0x68>)
 800186e:	f7ff fd65 	bl	800133c <MCAL_UART_SendData>

	Slave_TxData = LOC_RxData;
 8001872:	79ba      	ldrb	r2, [r7, #6]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <ECU1_UART_IRQ_CallBack+0x6c>)
 8001876:	701a      	strb	r2, [r3, #0]
	check_Termination = LOC_RxData;
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	71fb      	strb	r3, [r7, #7]

	/* inform Master */
	MCAL_GPIO_WritePin(EXTI_Port, EXTI_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001882:	4810      	ldr	r0, [pc, #64]	; (80018c4 <ECU1_UART_IRQ_CallBack+0x70>)
 8001884:	f7ff f8c5 	bl	8000a12 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(EXTI_Port, EXTI_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <ECU1_UART_IRQ_CallBack+0x70>)
 8001890:	f7ff f8bf 	bl	8000a12 <MCAL_GPIO_WritePin>

	if(check_Termination == 13)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b0d      	cmp	r3, #13
 8001898:	d10b      	bne.n	80018b2 <ECU1_UART_IRQ_CallBack+0x5e>
	{
		MCAL_GPIO_WritePin(EXTI_Port, EXTI_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a0:	4808      	ldr	r0, [pc, #32]	; (80018c4 <ECU1_UART_IRQ_CallBack+0x70>)
 80018a2:	f7ff f8b6 	bl	8000a12 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(EXTI_Port, EXTI_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <ECU1_UART_IRQ_CallBack+0x70>)
 80018ae:	f7ff f8b0 	bl	8000a12 <MCAL_GPIO_WritePin>

//	if(check_Termination == 13)
//	{
//		MCAL_UART_SendString(USART1, "*** Requesting Access ***\r\n", '\0');
//	}
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40013800 	.word	0x40013800
 80018c0:	20000020 	.word	0x20000020
 80018c4:	40010800 	.word	0x40010800

080018c8 <ECU1_SPI_IRQ_CallBack>:

static void ECU1_SPI_IRQ_CallBack(struct S_IRQ_SRC irq_src)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if(irq_src.RXNE)
 80018d0:	793b      	ldrb	r3, [r7, #4]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d014      	beq.n	8001906 <ECU1_SPI_IRQ_CallBack+0x3e>
	{
		MCAL_SPI_TxRx(SPI1, &Slave_TxData, PollingDisable);
 80018dc:	2201      	movs	r2, #1
 80018de:	490c      	ldr	r1, [pc, #48]	; (8001910 <ECU1_SPI_IRQ_CallBack+0x48>)
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <ECU1_SPI_IRQ_CallBack+0x4c>)
 80018e2:	f7ff fb25 	bl	8000f30 <MCAL_SPI_TxRx>

		if(Slave_TxData == 'T')
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <ECU1_SPI_IRQ_CallBack+0x48>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b54      	cmp	r3, #84	; 0x54
 80018ec:	d102      	bne.n	80018f4 <ECU1_SPI_IRQ_CallBack+0x2c>
			ECU1_APP_Valid_Access();
 80018ee:	f7ff fee3 	bl	80016b8 <ECU1_APP_Valid_Access>
 80018f2:	e005      	b.n	8001900 <ECU1_SPI_IRQ_CallBack+0x38>
		else if(Slave_TxData == 'F')
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <ECU1_SPI_IRQ_CallBack+0x48>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b46      	cmp	r3, #70	; 0x46
 80018fa:	d101      	bne.n	8001900 <ECU1_SPI_IRQ_CallBack+0x38>
			ECU1_APP_InValid_Acess();
 80018fc:	f7ff ff36 	bl	800176c <ECU1_APP_InValid_Acess>

		Slave_TxData = 'w';
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <ECU1_SPI_IRQ_CallBack+0x48>)
 8001902:	2277      	movs	r2, #119	; 0x77
 8001904:	701a      	strb	r2, [r3, #0]
	}

#endif
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000020 	.word	0x20000020
 8001914:	40013000 	.word	0x40013000

08001918 <main>:
 **************************************************/
#include "MyApp.h"


int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	ECU1_Dashboard_APP_SETUP();
 800191c:	f7ff ff7a 	bl	8001814 <ECU1_Dashboard_APP_SETUP>

	/* Loop forever */
	ECU1_Dashboard_APP_RUN();
 8001920:	f7ff ff94 	bl	800184c <ECU1_Dashboard_APP_RUN>

	return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800192e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001930:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <LoopForever+0x6>)
  ldr r1, =_edata
 8001936:	490d      	ldr	r1, [pc, #52]	; (800196c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <LoopForever+0xe>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800194c:	4c0a      	ldr	r4, [pc, #40]	; (8001978 <LoopForever+0x16>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800195a:	f000 f811 	bl	8001980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195e:	f7ff ffdb 	bl	8001918 <main>

08001962 <LoopForever>:

LoopForever:
    b LoopForever
 8001962:	e7fe      	b.n	8001962 <LoopForever>
  ldr   r0, =_estack
 8001964:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001970:	08001bdc 	.word	0x08001bdc
  ldr r2, =_sbss
 8001974:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001978:	200000e0 	.word	0x200000e0

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <__libc_init_array>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2500      	movs	r5, #0
 8001984:	4e0c      	ldr	r6, [pc, #48]	; (80019b8 <__libc_init_array+0x38>)
 8001986:	4c0d      	ldr	r4, [pc, #52]	; (80019bc <__libc_init_array+0x3c>)
 8001988:	1ba4      	subs	r4, r4, r6
 800198a:	10a4      	asrs	r4, r4, #2
 800198c:	42a5      	cmp	r5, r4
 800198e:	d109      	bne.n	80019a4 <__libc_init_array+0x24>
 8001990:	f000 f81a 	bl	80019c8 <_init>
 8001994:	2500      	movs	r5, #0
 8001996:	4e0a      	ldr	r6, [pc, #40]	; (80019c0 <__libc_init_array+0x40>)
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <__libc_init_array+0x44>)
 800199a:	1ba4      	subs	r4, r4, r6
 800199c:	10a4      	asrs	r4, r4, #2
 800199e:	42a5      	cmp	r5, r4
 80019a0:	d105      	bne.n	80019ae <__libc_init_array+0x2e>
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a8:	4798      	blx	r3
 80019aa:	3501      	adds	r5, #1
 80019ac:	e7ee      	b.n	800198c <__libc_init_array+0xc>
 80019ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b2:	4798      	blx	r3
 80019b4:	3501      	adds	r5, #1
 80019b6:	e7f2      	b.n	800199e <__libc_init_array+0x1e>
 80019b8:	08001bd4 	.word	0x08001bd4
 80019bc:	08001bd4 	.word	0x08001bd4
 80019c0:	08001bd4 	.word	0x08001bd4
 80019c4:	08001bd8 	.word	0x08001bd8

080019c8 <_init>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	bf00      	nop
 80019cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ce:	bc08      	pop	{r3}
 80019d0:	469e      	mov	lr, r3
 80019d2:	4770      	bx	lr

080019d4 <_fini>:
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d6:	bf00      	nop
 80019d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019da:	bc08      	pop	{r3}
 80019dc:	469e      	mov	lr, r3
 80019de:	4770      	bx	lr
